
main-CWLITEXMEGA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c42  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000050  00802000  00000c42  00000cd6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000102  00802050  00802050  00000d26  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000d26  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000d78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003f82  00000000  00000000  00000e20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002922  00000000  00000000  00004da2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c8c  00000000  00000000  000076c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000474  00000000  00000000  00008350  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001f62  00000000  00000000  000087c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000131b  00000000  00000000  0000a726  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  0000ba41  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__ctors_end>
   4:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
   8:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
   c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  10:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  14:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  18:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  1c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  20:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  24:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  28:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  2c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  30:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  34:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  38:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  3c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  40:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  44:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  48:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  4c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  50:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  54:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  58:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  5c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  60:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  64:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  68:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  6c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  70:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  74:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  78:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  7c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  80:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  84:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  88:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  8c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  90:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  94:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  98:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  9c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  a0:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  a4:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  a8:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  ac:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  b0:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  b4:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  b8:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  bc:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  c0:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  c4:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  c8:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  cc:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  d0:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  d4:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  d8:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  dc:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  e0:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  e4:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  e8:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  ec:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  f0:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  f4:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  f8:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  fc:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 100:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 104:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 108:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 10c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 110:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 114:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 118:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 11c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 120:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 124:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 128:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 12c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 130:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 134:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 138:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 13c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 140:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 144:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 148:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 14c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 150:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 154:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 158:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 15c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 160:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 164:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 168:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 16c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 170:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 174:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 178:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 17c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 180:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 184:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 188:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 18c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 190:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 194:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 198:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 19c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 1a0:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 1a4:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 1a8:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 1ac:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 1b0:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 1b4:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 1b8:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 1bc:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 1c0:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 1c4:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>

000001c8 <__trampolines_start>:
 1c8:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <ss_num_commands>
 1cc:	0c 94 13 01 	jmp	0x226	; 0x226 <get_key>
 1d0:	0c 94 15 01 	jmp	0x22a	; 0x22a <reset>
 1d4:	0c 94 11 04 	jmp	0x822	; 0x822 <ss_get_commands>
 1d8:	0c 94 13 03 	jmp	0x626	; 0x626 <get_pt>
 1dc:	0c 94 39 03 	jmp	0x672	; 0x672 <check_version>

000001e0 <__ctors_end>:
 1e0:	11 24       	eor	r1, r1
 1e2:	1f be       	out	0x3f, r1	; 63
 1e4:	cf ef       	ldi	r28, 0xFF	; 255
 1e6:	cd bf       	out	0x3d, r28	; 61
 1e8:	df e3       	ldi	r29, 0x3F	; 63
 1ea:	de bf       	out	0x3e, r29	; 62
 1ec:	00 e0       	ldi	r16, 0x00	; 0
 1ee:	0c bf       	out	0x3c, r16	; 60

000001f0 <__do_copy_data>:
 1f0:	10 e2       	ldi	r17, 0x20	; 32
 1f2:	a0 e0       	ldi	r26, 0x00	; 0
 1f4:	b0 e2       	ldi	r27, 0x20	; 32
 1f6:	e2 e4       	ldi	r30, 0x42	; 66
 1f8:	fc e0       	ldi	r31, 0x0C	; 12
 1fa:	00 e0       	ldi	r16, 0x00	; 0
 1fc:	0b bf       	out	0x3b, r16	; 59
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <__do_copy_data+0x14>
 200:	07 90       	elpm	r0, Z+
 202:	0d 92       	st	X+, r0
 204:	a0 35       	cpi	r26, 0x50	; 80
 206:	b1 07       	cpc	r27, r17
 208:	d9 f7       	brne	.-10     	; 0x200 <__do_copy_data+0x10>

0000020a <__do_clear_bss>:
 20a:	21 e2       	ldi	r18, 0x21	; 33
 20c:	a0 e5       	ldi	r26, 0x50	; 80
 20e:	b0 e2       	ldi	r27, 0x20	; 32
 210:	01 c0       	rjmp	.+2      	; 0x214 <.do_clear_bss_start>

00000212 <.do_clear_bss_loop>:
 212:	1d 92       	st	X+, r1

00000214 <.do_clear_bss_start>:
 214:	a2 35       	cpi	r26, 0x52	; 82
 216:	b2 07       	cpc	r27, r18
 218:	e1 f7       	brne	.-8      	; 0x212 <.do_clear_bss_loop>
 21a:	0e 94 fe 05 	call	0xbfc	; 0xbfc <main>
 21e:	0c 94 1f 06 	jmp	0xc3e	; 0xc3e <_exit>

00000222 <__bad_interrupt>:
 222:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000226 <get_key>:
uint8_t get_key(uint8_t* k)
{
	//ignore the input k and use pre-defined key

	return 0x00;
}
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	08 95       	ret

0000022a <reset>:
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	08 95       	ret

0000022e <to_bits>:
const uint8_t sbox[16] = {1,10, 4,12, 6,15, 3, 9, 2,13,11, 7, 5, 0, 8,14};
const uint8_t invsbox[16] = {13, 0, 8, 6, 2,12, 4,11,14, 7, 1,10, 3, 9,15, 5};

//X0 <- x00, X1 <- x01,...., X4 <- x10, X5 <- x11,... etc.
//127,126,125,124,          .....        7,6,5,4,  3,2,1,0
void to_bits(uint8_t *A, uint8_t *B){
 22e:	cf 93       	push	r28
 230:	df 93       	push	r29
 232:	dc 01       	movw	r26, r24
 234:	90 96       	adiw	r26, 0x20	; 32
 236:	fb 01       	movw	r30, r22
    for(int i = 0; i < 32; i++){
        for(int j = 0; j < 4; j++){
 238:	50 e0       	ldi	r21, 0x00	; 0
 23a:	40 e0       	ldi	r20, 0x00	; 0
        B[(i * 4) + j] = (A[i] >> j) & 0x1;
 23c:	ec 01       	movw	r28, r24
 23e:	28 81       	ld	r18, Y
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	04 2e       	mov	r0, r20
 244:	02 c0       	rjmp	.+4      	; 0x24a <to_bits+0x1c>
 246:	35 95       	asr	r19
 248:	27 95       	ror	r18
 24a:	0a 94       	dec	r0
 24c:	e2 f7       	brpl	.-8      	; 0x246 <to_bits+0x18>
 24e:	21 70       	andi	r18, 0x01	; 1
 250:	21 93       	st	Z+, r18

//X0 <- x00, X1 <- x01,...., X4 <- x10, X5 <- x11,... etc.
//127,126,125,124,          .....        7,6,5,4,  3,2,1,0
void to_bits(uint8_t *A, uint8_t *B){
    for(int i = 0; i < 32; i++){
        for(int j = 0; j < 4; j++){
 252:	4f 5f       	subi	r20, 0xFF	; 255
 254:	5f 4f       	sbci	r21, 0xFF	; 255
 256:	44 30       	cpi	r20, 0x04	; 4
 258:	51 05       	cpc	r21, r1
 25a:	81 f7       	brne	.-32     	; 0x23c <to_bits+0xe>
 25c:	6c 5f       	subi	r22, 0xFC	; 252
 25e:	7f 4f       	sbci	r23, 0xFF	; 255
 260:	01 96       	adiw	r24, 0x01	; 1
const uint8_t invsbox[16] = {13, 0, 8, 6, 2,12, 4,11,14, 7, 1,10, 3, 9,15, 5};

//X0 <- x00, X1 <- x01,...., X4 <- x10, X5 <- x11,... etc.
//127,126,125,124,          .....        7,6,5,4,  3,2,1,0
void to_bits(uint8_t *A, uint8_t *B){
    for(int i = 0; i < 32; i++){
 262:	a8 17       	cp	r26, r24
 264:	b9 07       	cpc	r27, r25
 266:	39 f7       	brne	.-50     	; 0x236 <to_bits+0x8>
        for(int j = 0; j < 4; j++){
        B[(i * 4) + j] = (A[i] >> j) & 0x1;
        }
    }
}
 268:	df 91       	pop	r29
 26a:	cf 91       	pop	r28
 26c:	08 95       	ret

0000026e <from_bits>:
void from_bits(uint8_t *A, uint8_t *B){
 26e:	fc 01       	movw	r30, r24
 270:	db 01       	movw	r26, r22
 272:	ac 01       	movw	r20, r24
 274:	40 58       	subi	r20, 0x80	; 128
 276:	5f 4f       	sbci	r21, 0xFF	; 255
    //convert bit-wise variables into nibble-wise variables
    for(int i = 0; i < 32; i++){
        //0 is LSB and 3 is MSB in each nibble
        B[i]  = (A[(4 * i)]         );
 278:	80 81       	ld	r24, Z
 27a:	8c 93       	st	X, r24
        B[i] ^= (A[(4 * i) + 1] << 1);
 27c:	91 81       	ldd	r25, Z+1	; 0x01
 27e:	99 0f       	add	r25, r25
 280:	98 27       	eor	r25, r24
 282:	9c 93       	st	X, r25
        B[i] ^= (A[(4 * i) + 2] << 2);
 284:	22 81       	ldd	r18, Z+2	; 0x02
 286:	84 e0       	ldi	r24, 0x04	; 4
 288:	28 9f       	mul	r18, r24
 28a:	90 01       	movw	r18, r0
 28c:	11 24       	eor	r1, r1
 28e:	92 27       	eor	r25, r18
 290:	9c 93       	st	X, r25
        B[i] ^= (A[(4 * i) + 3] << 3);
 292:	23 81       	ldd	r18, Z+3	; 0x03
 294:	88 e0       	ldi	r24, 0x08	; 8
 296:	28 9f       	mul	r18, r24
 298:	90 01       	movw	r18, r0
 29a:	11 24       	eor	r1, r1
 29c:	92 27       	eor	r25, r18
 29e:	9d 93       	st	X+, r25
 2a0:	34 96       	adiw	r30, 0x04	; 4
        }
    }
}
void from_bits(uint8_t *A, uint8_t *B){
    //convert bit-wise variables into nibble-wise variables
    for(int i = 0; i < 32; i++){
 2a2:	e4 17       	cp	r30, r20
 2a4:	f5 07       	cpc	r31, r21
 2a6:	41 f7       	brne	.-48     	; 0x278 <from_bits+0xa>
        B[i]  = (A[(4 * i)]         );
        B[i] ^= (A[(4 * i) + 1] << 1);
        B[i] ^= (A[(4 * i) + 2] << 2);
        B[i] ^= (A[(4 * i) + 3] << 3);
    }
}
 2a8:	08 95       	ret

000002aa <SBox>:
void SBox(uint8_t *state){
 2aa:	9c 01       	movw	r18, r24
 2ac:	20 5e       	subi	r18, 0xE0	; 224
 2ae:	3f 4f       	sbci	r19, 0xFF	; 255
    //SBox
    for(int i=0; i<32; i++){
    	state[i] = sbox[state[i]];
 2b0:	dc 01       	movw	r26, r24
 2b2:	ed 91       	ld	r30, X+
 2b4:	cd 01       	movw	r24, r26
 2b6:	11 97       	sbiw	r26, 0x01	; 1
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	e0 5d       	subi	r30, 0xD0	; 208
 2bc:	ff 4d       	sbci	r31, 0xDF	; 223
 2be:	40 81       	ld	r20, Z
 2c0:	4c 93       	st	X, r20
        B[i] ^= (A[(4 * i) + 3] << 3);
    }
}
void SBox(uint8_t *state){
    //SBox
    for(int i=0; i<32; i++){
 2c2:	82 17       	cp	r24, r18
 2c4:	93 07       	cpc	r25, r19
 2c6:	a1 f7       	brne	.-24     	; 0x2b0 <SBox+0x6>
    	state[i] = sbox[state[i]];
    }
}
 2c8:	08 95       	ret

000002ca <genPerm>:

int genPerm(int i) {
    return ((i >> 4) << 2) + (((3*((i & 0xf)>>2) + (i & 3)) & 3) << 5) + (i & 3);
 2ca:	ac 01       	movw	r20, r24
 2cc:	55 95       	asr	r21
 2ce:	47 95       	ror	r20
 2d0:	55 95       	asr	r21
 2d2:	47 95       	ror	r20
 2d4:	43 70       	andi	r20, 0x03	; 3
 2d6:	55 27       	eor	r21, r21
 2d8:	9a 01       	movw	r18, r20
 2da:	22 0f       	add	r18, r18
 2dc:	33 1f       	adc	r19, r19
 2de:	24 0f       	add	r18, r20
 2e0:	35 1f       	adc	r19, r21
 2e2:	28 0f       	add	r18, r24
 2e4:	39 1f       	adc	r19, r25
 2e6:	75 e0       	ldi	r23, 0x05	; 5
 2e8:	22 0f       	add	r18, r18
 2ea:	33 1f       	adc	r19, r19
 2ec:	7a 95       	dec	r23
 2ee:	e1 f7       	brne	.-8      	; 0x2e8 <genPerm+0x1e>
 2f0:	20 76       	andi	r18, 0x60	; 96
 2f2:	33 27       	eor	r19, r19
 2f4:	ac 01       	movw	r20, r24
 2f6:	e4 e0       	ldi	r30, 0x04	; 4
 2f8:	55 95       	asr	r21
 2fa:	47 95       	ror	r20
 2fc:	ea 95       	dec	r30
 2fe:	e1 f7       	brne	.-8      	; 0x2f8 <genPerm+0x2e>
 300:	44 0f       	add	r20, r20
 302:	55 1f       	adc	r21, r21
 304:	44 0f       	add	r20, r20
 306:	55 1f       	adc	r21, r21
 308:	24 0f       	add	r18, r20
 30a:	35 1f       	adc	r19, r21
 30c:	83 70       	andi	r24, 0x03	; 3
 30e:	99 27       	eor	r25, r25
}
 310:	82 0f       	add	r24, r18
 312:	93 1f       	adc	r25, r19
 314:	08 95       	ret

00000316 <PLayer>:
void PLayer(uint8_t *state){
 316:	cf 92       	push	r12
 318:	df 92       	push	r13
 31a:	ef 92       	push	r14
 31c:	ff 92       	push	r15
 31e:	0f 93       	push	r16
 320:	1f 93       	push	r17
 322:	cf 93       	push	r28
 324:	df 93       	push	r29
 326:	cd b7       	in	r28, 0x3d	; 61
 328:	de b7       	in	r29, 0x3e	; 62
 32a:	da 95       	dec	r29
 32c:	cd bf       	out	0x3d, r28	; 61
 32e:	de bf       	out	0x3e, r29	; 62
 330:	6c 01       	movw	r12, r24
    uint8_t tmp[128];
    uint8_t bits[128];
    to_bits(state, tmp);
 332:	be 01       	movw	r22, r28
 334:	6f 57       	subi	r22, 0x7F	; 127
 336:	7f 4f       	sbci	r23, 0xFF	; 255
 338:	0e 94 17 01 	call	0x22e	; 0x22e <to_bits>
 33c:	8e 01       	movw	r16, r28
 33e:	0f 57       	subi	r16, 0x7F	; 127
 340:	1f 4f       	sbci	r17, 0xFF	; 255
    for(int i = 0; i < 128; i++){
 342:	f1 2c       	mov	r15, r1
 344:	e1 2c       	mov	r14, r1
        bits[genPerm(i)] = tmp[i];
 346:	c7 01       	movw	r24, r14
 348:	0e 94 65 01 	call	0x2ca	; 0x2ca <genPerm>
 34c:	f8 01       	movw	r30, r16
 34e:	21 91       	ld	r18, Z+
 350:	8f 01       	movw	r16, r30
 352:	41 e0       	ldi	r20, 0x01	; 1
 354:	50 e0       	ldi	r21, 0x00	; 0
 356:	4c 0f       	add	r20, r28
 358:	5d 1f       	adc	r21, r29
 35a:	84 0f       	add	r24, r20
 35c:	95 1f       	adc	r25, r21
 35e:	fc 01       	movw	r30, r24
 360:	20 83       	st	Z, r18
}
void PLayer(uint8_t *state){
    uint8_t tmp[128];
    uint8_t bits[128];
    to_bits(state, tmp);
    for(int i = 0; i < 128; i++){
 362:	ff ef       	ldi	r31, 0xFF	; 255
 364:	ef 1a       	sub	r14, r31
 366:	ff 0a       	sbc	r15, r31
 368:	40 e8       	ldi	r20, 0x80	; 128
 36a:	e4 16       	cp	r14, r20
 36c:	f1 04       	cpc	r15, r1
 36e:	59 f7       	brne	.-42     	; 0x346 <PLayer+0x30>
        bits[genPerm(i)] = tmp[i];
    }
    from_bits(bits, state);
 370:	b6 01       	movw	r22, r12
 372:	ce 01       	movw	r24, r28
 374:	01 96       	adiw	r24, 0x01	; 1
 376:	0e 94 37 01 	call	0x26e	; 0x26e <from_bits>
}
 37a:	d3 95       	inc	r29
 37c:	cd bf       	out	0x3d, r28	; 61
 37e:	de bf       	out	0x3e, r29	; 62
 380:	df 91       	pop	r29
 382:	cf 91       	pop	r28
 384:	1f 91       	pop	r17
 386:	0f 91       	pop	r16
 388:	ff 90       	pop	r15
 38a:	ef 90       	pop	r14
 38c:	df 90       	pop	r13
 38e:	cf 90       	pop	r12
 390:	08 95       	ret

00000392 <Key_update>:
void Key_update(uint8_t *key){
 392:	cf 93       	push	r28
 394:	df 93       	push	r29
 396:	cd b7       	in	r28, 0x3d	; 61
 398:	de b7       	in	r29, 0x3e	; 62
 39a:	a0 97       	sbiw	r28, 0x20	; 32
 39c:	cd bf       	out	0x3d, r28	; 61
 39e:	de bf       	out	0x3e, r29	; 62
 3a0:	fc 01       	movw	r30, r24
 3a2:	9e 01       	movw	r18, r28
 3a4:	2f 5f       	subi	r18, 0xFF	; 255
 3a6:	3f 4f       	sbci	r19, 0xFF	; 255
 3a8:	a9 01       	movw	r20, r18
 3aa:	88 e0       	ldi	r24, 0x08	; 8
 3ac:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t temp_key[32];
    //entire key>>32
    for(int i=0; i<32; i++){
        temp_key[i] = key[(i+8)%32];
 3ae:	dc 01       	movw	r26, r24
 3b0:	af 71       	andi	r26, 0x1F	; 31
 3b2:	bb 27       	eor	r27, r27
 3b4:	ae 0f       	add	r26, r30
 3b6:	bf 1f       	adc	r27, r31
 3b8:	6c 91       	ld	r22, X
 3ba:	da 01       	movw	r26, r20
 3bc:	6d 93       	st	X+, r22
 3be:	ad 01       	movw	r20, r26
 3c0:	01 96       	adiw	r24, 0x01	; 1
    from_bits(bits, state);
}
void Key_update(uint8_t *key){
    uint8_t temp_key[32];
    //entire key>>32
    for(int i=0; i<32; i++){
 3c2:	88 32       	cpi	r24, 0x28	; 40
 3c4:	91 05       	cpc	r25, r1
 3c6:	99 f7       	brne	.-26     	; 0x3ae <Key_update+0x1c>
 3c8:	bf 01       	movw	r22, r30
 3ca:	cf 01       	movw	r24, r30
 3cc:	48 96       	adiw	r24, 0x18	; 24
        temp_key[i] = key[(i+8)%32];
    }
    for(int i=0; i<24; i++) key[i] = temp_key[i];
 3ce:	d9 01       	movw	r26, r18
 3d0:	4d 91       	ld	r20, X+
 3d2:	9d 01       	movw	r18, r26
 3d4:	db 01       	movw	r26, r22
 3d6:	4d 93       	st	X+, r20
 3d8:	bd 01       	movw	r22, r26
 3da:	a8 17       	cp	r26, r24
 3dc:	b9 07       	cpc	r27, r25
 3de:	b9 f7       	brne	.-18     	; 0x3ce <Key_update+0x3c>
    //k0>>12
    key[24] = temp_key[27];
 3e0:	8c 8d       	ldd	r24, Y+28	; 0x1c
 3e2:	80 8f       	std	Z+24, r24	; 0x18
    key[25] = temp_key[24];
 3e4:	89 8d       	ldd	r24, Y+25	; 0x19
 3e6:	81 8f       	std	Z+25, r24	; 0x19
    key[26] = temp_key[25];
 3e8:	8a 8d       	ldd	r24, Y+26	; 0x1a
 3ea:	82 8f       	std	Z+26, r24	; 0x1a
    key[27] = temp_key[26];
 3ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
 3ee:	83 8f       	std	Z+27, r24	; 0x1b
    //k1>>2
    key[28] = ((temp_key[28]&0xc)>>2) ^ ((temp_key[29]&0x3)<<2);
 3f0:	4d 8d       	ldd	r20, Y+29	; 0x1d
 3f2:	50 e0       	ldi	r21, 0x00	; 0
 3f4:	8e 8d       	ldd	r24, Y+30	; 0x1e
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	9a 01       	movw	r18, r20
 3fa:	35 95       	asr	r19
 3fc:	27 95       	ror	r18
 3fe:	35 95       	asr	r19
 400:	27 95       	ror	r18
 402:	23 70       	andi	r18, 0x03	; 3
 404:	bc 01       	movw	r22, r24
 406:	66 0f       	add	r22, r22
 408:	77 1f       	adc	r23, r23
 40a:	66 0f       	add	r22, r22
 40c:	77 1f       	adc	r23, r23
 40e:	6c 70       	andi	r22, 0x0C	; 12
 410:	26 2b       	or	r18, r22
 412:	24 8f       	std	Z+28, r18	; 0x1c
    key[29] = ((temp_key[29]&0xc)>>2) ^ ((temp_key[30]&0x3)<<2);
 414:	2f 8d       	ldd	r18, Y+31	; 0x1f
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	95 95       	asr	r25
 41a:	87 95       	ror	r24
 41c:	95 95       	asr	r25
 41e:	87 95       	ror	r24
 420:	83 70       	andi	r24, 0x03	; 3
 422:	b9 01       	movw	r22, r18
 424:	66 0f       	add	r22, r22
 426:	77 1f       	adc	r23, r23
 428:	66 0f       	add	r22, r22
 42a:	77 1f       	adc	r23, r23
 42c:	6c 70       	andi	r22, 0x0C	; 12
 42e:	86 2b       	or	r24, r22
 430:	85 8f       	std	Z+29, r24	; 0x1d
    key[30] = ((temp_key[30]&0xc)>>2) ^ ((temp_key[31]&0x3)<<2);
 432:	98 a1       	ldd	r25, Y+32	; 0x20
 434:	89 2f       	mov	r24, r25
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	35 95       	asr	r19
 43a:	27 95       	ror	r18
 43c:	35 95       	asr	r19
 43e:	27 95       	ror	r18
 440:	23 70       	andi	r18, 0x03	; 3
 442:	bc 01       	movw	r22, r24
 444:	66 0f       	add	r22, r22
 446:	77 1f       	adc	r23, r23
 448:	66 0f       	add	r22, r22
 44a:	77 1f       	adc	r23, r23
 44c:	6c 70       	andi	r22, 0x0C	; 12
 44e:	26 2b       	or	r18, r22
 450:	26 8f       	std	Z+30, r18	; 0x1e
    key[31] = ((temp_key[31]&0xc)>>2) ^ ((temp_key[28]&0x3)<<2);
 452:	95 95       	asr	r25
 454:	87 95       	ror	r24
 456:	95 95       	asr	r25
 458:	87 95       	ror	r24
 45a:	83 70       	andi	r24, 0x03	; 3
 45c:	44 0f       	add	r20, r20
 45e:	55 1f       	adc	r21, r21
 460:	44 0f       	add	r20, r20
 462:	55 1f       	adc	r21, r21
 464:	4c 70       	andi	r20, 0x0C	; 12
 466:	84 2b       	or	r24, r20
 468:	87 8f       	std	Z+31, r24	; 0x1f
}
 46a:	a0 96       	adiw	r28, 0x20	; 32
 46c:	cd bf       	out	0x3d, r28	; 61
 46e:	de bf       	out	0x3e, r29	; 62
 470:	df 91       	pop	r29
 472:	cf 91       	pop	r28
 474:	08 95       	ret

00000476 <addRk>:
void addRk(uint8_t *state, uint8_t *key){
 476:	0f 93       	push	r16
 478:	1f 93       	push	r17
 47a:	cf 93       	push	r28
 47c:	df 93       	push	r29
 47e:	cd b7       	in	r28, 0x3d	; 61
 480:	de b7       	in	r29, 0x3e	; 62
 482:	da 95       	dec	r29
 484:	cd bf       	out	0x3d, r28	; 61
 486:	de bf       	out	0x3e, r29	; 62
 488:	8c 01       	movw	r16, r24
 48a:	cb 01       	movw	r24, r22
    uint8_t bits[128];
    uint8_t key_bits[128];
    to_bits(key, key_bits);
 48c:	be 01       	movw	r22, r28
 48e:	6f 5f       	subi	r22, 0xFF	; 255
 490:	7f 4f       	sbci	r23, 0xFF	; 255
 492:	0e 94 17 01 	call	0x22e	; 0x22e <to_bits>
    to_bits(state, bits);
 496:	be 01       	movw	r22, r28
 498:	6f 57       	subi	r22, 0x7F	; 127
 49a:	7f 4f       	sbci	r23, 0xFF	; 255
 49c:	c8 01       	movw	r24, r16
 49e:	0e 94 17 01 	call	0x22e	; 0x22e <to_bits>
 4a2:	fe 01       	movw	r30, r28
 4a4:	ef 57       	subi	r30, 0x7F	; 127
 4a6:	ff 4f       	sbci	r31, 0xFF	; 255
 4a8:	de 01       	movw	r26, r28
 4aa:	11 96       	adiw	r26, 0x01	; 1
 4ac:	9e 01       	movw	r18, r28
 4ae:	2f 5f       	subi	r18, 0xFF	; 255
 4b0:	3e 4f       	sbci	r19, 0xFE	; 254
    int kbc=0;  //key_bit_counter
    for (int i=0; i<32; i++){
        bits[4*i+1] ^= key_bits[kbc];
 4b2:	9d 91       	ld	r25, X+
 4b4:	81 81       	ldd	r24, Z+1	; 0x01
 4b6:	89 27       	eor	r24, r25
 4b8:	81 83       	std	Z+1, r24	; 0x01
        bits[4*i+2] ^= key_bits[kbc+64];
 4ba:	82 81       	ldd	r24, Z+2	; 0x02
 4bc:	df 96       	adiw	r26, 0x3f	; 63
 4be:	9c 91       	ld	r25, X
 4c0:	df 97       	sbiw	r26, 0x3f	; 63
 4c2:	89 27       	eor	r24, r25
 4c4:	82 83       	std	Z+2, r24	; 0x02
 4c6:	34 96       	adiw	r30, 0x04	; 4
    uint8_t bits[128];
    uint8_t key_bits[128];
    to_bits(key, key_bits);
    to_bits(state, bits);
    int kbc=0;  //key_bit_counter
    for (int i=0; i<32; i++){
 4c8:	e2 17       	cp	r30, r18
 4ca:	f3 07       	cpc	r31, r19
 4cc:	91 f7       	brne	.-28     	; 0x4b2 <addRk+0x3c>
        bits[4*i+1] ^= key_bits[kbc];
        bits[4*i+2] ^= key_bits[kbc+64];
        kbc++;
    }
    from_bits(bits, state);
 4ce:	b8 01       	movw	r22, r16
 4d0:	ce 01       	movw	r24, r28
 4d2:	8f 57       	subi	r24, 0x7F	; 127
 4d4:	9f 4f       	sbci	r25, 0xFF	; 255
 4d6:	0e 94 37 01 	call	0x26e	; 0x26e <from_bits>
}
 4da:	d3 95       	inc	r29
 4dc:	cd bf       	out	0x3d, r28	; 61
 4de:	de bf       	out	0x3e, r29	; 62
 4e0:	df 91       	pop	r29
 4e2:	cf 91       	pop	r28
 4e4:	1f 91       	pop	r17
 4e6:	0f 91       	pop	r16
 4e8:	08 95       	ret

000004ea <addRc>:

void addRc(uint8_t *state, uint8_t RC){
 4ea:	ef 92       	push	r14
 4ec:	ff 92       	push	r15
 4ee:	1f 93       	push	r17
 4f0:	cf 93       	push	r28
 4f2:	df 93       	push	r29
 4f4:	cd b7       	in	r28, 0x3d	; 61
 4f6:	de b7       	in	r29, 0x3e	; 62
 4f8:	c0 58       	subi	r28, 0x80	; 128
 4fa:	d1 09       	sbc	r29, r1
 4fc:	cd bf       	out	0x3d, r28	; 61
 4fe:	de bf       	out	0x3e, r29	; 62
 500:	7c 01       	movw	r14, r24
 502:	16 2f       	mov	r17, r22
    uint8_t bits[128];
    to_bits(state, bits);
 504:	be 01       	movw	r22, r28
 506:	6f 5f       	subi	r22, 0xFF	; 255
 508:	7f 4f       	sbci	r23, 0xFF	; 255
 50a:	0e 94 17 01 	call	0x22e	; 0x22e <to_bits>
    //add constant
    bits[3] ^= RC & 0x1;
 50e:	91 2f       	mov	r25, r17
 510:	91 70       	andi	r25, 0x01	; 1
 512:	8c 81       	ldd	r24, Y+4	; 0x04
 514:	89 27       	eor	r24, r25
 516:	8c 83       	std	Y+4, r24	; 0x04
    bits[7] ^= (RC>>1) & 0x1;
 518:	11 fb       	bst	r17, 1
 51a:	99 27       	eor	r25, r25
 51c:	90 f9       	bld	r25, 0
 51e:	88 85       	ldd	r24, Y+8	; 0x08
 520:	89 27       	eor	r24, r25
 522:	88 87       	std	Y+8, r24	; 0x08
    bits[11] ^= (RC>>2) & 0x1;
 524:	12 fb       	bst	r17, 2
 526:	99 27       	eor	r25, r25
 528:	90 f9       	bld	r25, 0
 52a:	8c 85       	ldd	r24, Y+12	; 0x0c
 52c:	89 27       	eor	r24, r25
 52e:	8c 87       	std	Y+12, r24	; 0x0c
    bits[15] ^= (RC>>3) & 0x1;
 530:	13 fb       	bst	r17, 3
 532:	99 27       	eor	r25, r25
 534:	90 f9       	bld	r25, 0
 536:	88 89       	ldd	r24, Y+16	; 0x10
 538:	89 27       	eor	r24, r25
 53a:	88 8b       	std	Y+16, r24	; 0x10
    bits[19] ^= (RC>>4) & 0x1;
 53c:	14 fb       	bst	r17, 4
 53e:	99 27       	eor	r25, r25
 540:	90 f9       	bld	r25, 0
 542:	8c 89       	ldd	r24, Y+20	; 0x14
 544:	89 27       	eor	r24, r25
 546:	8c 8b       	std	Y+20, r24	; 0x14
    bits[23] ^= (RC>>5) & 0x1;
 548:	15 fb       	bst	r17, 5
 54a:	11 27       	eor	r17, r17
 54c:	10 f9       	bld	r17, 0
 54e:	88 8d       	ldd	r24, Y+24	; 0x18
 550:	18 27       	eor	r17, r24
 552:	18 8f       	std	Y+24, r17	; 0x18
    bits[127] ^= 1;
 554:	c0 58       	subi	r28, 0x80	; 128
 556:	df 4f       	sbci	r29, 0xFF	; 255
 558:	88 81       	ld	r24, Y
 55a:	c0 58       	subi	r28, 0x80	; 128
 55c:	d0 40       	sbci	r29, 0x00	; 0
 55e:	91 e0       	ldi	r25, 0x01	; 1
 560:	89 27       	eor	r24, r25
 562:	c0 58       	subi	r28, 0x80	; 128
 564:	df 4f       	sbci	r29, 0xFF	; 255
 566:	88 83       	st	Y, r24
 568:	c0 58       	subi	r28, 0x80	; 128
 56a:	d0 40       	sbci	r29, 0x00	; 0
    from_bits(bits, state);
 56c:	b7 01       	movw	r22, r14
 56e:	ce 01       	movw	r24, r28
 570:	01 96       	adiw	r24, 0x01	; 1
 572:	0e 94 37 01 	call	0x26e	; 0x26e <from_bits>
}
 576:	c0 58       	subi	r28, 0x80	; 128
 578:	df 4f       	sbci	r29, 0xFF	; 255
 57a:	cd bf       	out	0x3d, r28	; 61
 57c:	de bf       	out	0x3e, r29	; 62
 57e:	df 91       	pop	r29
 580:	cf 91       	pop	r28
 582:	1f 91       	pop	r17
 584:	ff 90       	pop	r15
 586:	ef 90       	pop	r14
 588:	08 95       	ret

0000058a <updateConst>:
uint8_t updateConst(uint8_t cc){
    return ((cc << 1) ^ ( ((cc >> 5) & 0x01) ^ ((cc >> 4) & 0x01) ^ 1) );
 58a:	98 2f       	mov	r25, r24
 58c:	92 95       	swap	r25
 58e:	96 95       	lsr	r25
 590:	97 70       	andi	r25, 0x07	; 7
 592:	28 2f       	mov	r18, r24
 594:	22 95       	swap	r18
 596:	2f 70       	andi	r18, 0x0F	; 15
 598:	92 27       	eor	r25, r18
 59a:	90 95       	com	r25
 59c:	91 70       	andi	r25, 0x01	; 1
 59e:	88 0f       	add	r24, r24
}
 5a0:	89 2b       	or	r24, r25
 5a2:	08 95       	ret

000005a4 <enc>:
void enc(int rounds, uint8_t *state, uint8_t *key){
 5a4:	af 92       	push	r10
 5a6:	bf 92       	push	r11
 5a8:	cf 92       	push	r12
 5aa:	df 92       	push	r13
 5ac:	ef 92       	push	r14
 5ae:	ff 92       	push	r15
 5b0:	0f 93       	push	r16
 5b2:	1f 93       	push	r17
 5b4:	cf 93       	push	r28
 5b6:	df 93       	push	r29
 5b8:	5c 01       	movw	r10, r24
 5ba:	8b 01       	movw	r16, r22
 5bc:	6a 01       	movw	r12, r20
    uint8_t rconst = 0x00;
    for(int r=0; r<rounds; r++){
 5be:	d0 e0       	ldi	r29, 0x00	; 0
 5c0:	c0 e0       	ldi	r28, 0x00	; 0
}
uint8_t updateConst(uint8_t cc){
    return ((cc << 1) ^ ( ((cc >> 5) & 0x01) ^ ((cc >> 4) & 0x01) ^ 1) );
}
void enc(int rounds, uint8_t *state, uint8_t *key){
    uint8_t rconst = 0x00;
 5c2:	f1 2c       	mov	r15, r1
    for(int r=0; r<rounds; r++){
        if(r==35) trigger_high();
 5c4:	ee 24       	eor	r14, r14
 5c6:	e3 94       	inc	r14
uint8_t updateConst(uint8_t cc){
    return ((cc << 1) ^ ( ((cc >> 5) & 0x01) ^ ((cc >> 4) & 0x01) ^ 1) );
}
void enc(int rounds, uint8_t *state, uint8_t *key){
    uint8_t rconst = 0x00;
    for(int r=0; r<rounds; r++){
 5c8:	ca 15       	cp	r28, r10
 5ca:	db 05       	cpc	r29, r11
 5cc:	5c f0       	brlt	.+22     	; 0x5e4 <enc+0x40>
        addRc(state, rconst);
        addRk(state, key);
        Key_update(key);
        if(r==35) trigger_low();
    }
}
 5ce:	df 91       	pop	r29
 5d0:	cf 91       	pop	r28
 5d2:	1f 91       	pop	r17
 5d4:	0f 91       	pop	r16
 5d6:	ff 90       	pop	r15
 5d8:	ef 90       	pop	r14
 5da:	df 90       	pop	r13
 5dc:	cf 90       	pop	r12
 5de:	bf 90       	pop	r11
 5e0:	af 90       	pop	r10
 5e2:	08 95       	ret
    return ((cc << 1) ^ ( ((cc >> 5) & 0x01) ^ ((cc >> 4) & 0x01) ^ 1) );
}
void enc(int rounds, uint8_t *state, uint8_t *key){
    uint8_t rconst = 0x00;
    for(int r=0; r<rounds; r++){
        if(r==35) trigger_high();
 5e4:	c3 32       	cpi	r28, 0x23	; 35
 5e6:	d1 05       	cpc	r29, r1
 5e8:	11 f4       	brne	.+4      	; 0x5ee <enc+0x4a>
 5ea:	e0 92 05 06 	sts	0x0605, r14	; 0x800605 <__TEXT_REGION_LENGTH__+0x7de605>
        SBox(state);
 5ee:	c8 01       	movw	r24, r16
 5f0:	0e 94 55 01 	call	0x2aa	; 0x2aa <SBox>
        PLayer(state);
 5f4:	c8 01       	movw	r24, r16
 5f6:	0e 94 8b 01 	call	0x316	; 0x316 <PLayer>
        rconst = updateConst(rconst);
 5fa:	8f 2d       	mov	r24, r15
 5fc:	0e 94 c5 02 	call	0x58a	; 0x58a <updateConst>
 600:	f8 2e       	mov	r15, r24
        addRc(state, rconst);
 602:	68 2f       	mov	r22, r24
 604:	c8 01       	movw	r24, r16
 606:	0e 94 75 02 	call	0x4ea	; 0x4ea <addRc>
        addRk(state, key);
 60a:	b6 01       	movw	r22, r12
 60c:	c8 01       	movw	r24, r16
 60e:	0e 94 3b 02 	call	0x476	; 0x476 <addRk>
        Key_update(key);
 612:	c6 01       	movw	r24, r12
 614:	0e 94 c9 01 	call	0x392	; 0x392 <Key_update>
        if(r==35) trigger_low();
 618:	c3 32       	cpi	r28, 0x23	; 35
 61a:	d1 05       	cpc	r29, r1
 61c:	11 f4       	brne	.+4      	; 0x622 <enc+0x7e>
 61e:	e0 92 06 06 	sts	0x0606, r14	; 0x800606 <__TEXT_REGION_LENGTH__+0x7de606>
uint8_t updateConst(uint8_t cc){
    return ((cc << 1) ^ ( ((cc >> 5) & 0x01) ^ ((cc >> 4) & 0x01) ^ 1) );
}
void enc(int rounds, uint8_t *state, uint8_t *key){
    uint8_t rconst = 0x00;
    for(int r=0; r<rounds; r++){
 622:	21 96       	adiw	r28, 0x01	; 1
 624:	d1 cf       	rjmp	.-94     	; 0x5c8 <enc+0x24>

00000626 <get_pt>:

uint8_t get_pt(uint8_t* pt)
{
 626:	e2 e1       	ldi	r30, 0x12	; 18
 628:	f1 e2       	ldi	r31, 0x21	; 33
 62a:	9c 01       	movw	r18, r24
 62c:	20 5e       	subi	r18, 0xE0	; 224
 62e:	3f 4f       	sbci	r19, 0xFF	; 255
    
    for(int j=0;j<32;j++)
        msg_copy[j]=pt[j];
 630:	dc 01       	movw	r26, r24
 632:	4d 91       	ld	r20, X+
 634:	cd 01       	movw	r24, r26
 636:	41 93       	st	Z+, r20
}

uint8_t get_pt(uint8_t* pt)
{
    
    for(int j=0;j<32;j++)
 638:	a2 17       	cp	r26, r18
 63a:	b3 07       	cpc	r27, r19
 63c:	c9 f7       	brne	.-14     	; 0x630 <get_pt+0xa>
 63e:	e0 e0       	ldi	r30, 0x00	; 0
 640:	f0 e2       	ldi	r31, 0x20	; 32
 642:	a2 e3       	ldi	r26, 0x32	; 50
 644:	b1 e2       	ldi	r27, 0x21	; 33
        msg_copy[j]=pt[j];
    
    for(int j=0;j<32;j++)
        key_copy[j]=key[j];
 646:	81 91       	ld	r24, Z+
 648:	8d 93       	st	X+, r24
{
    
    for(int j=0;j<32;j++)
        msg_copy[j]=pt[j];
    
    for(int j=0;j<32;j++)
 64a:	80 e2       	ldi	r24, 0x20	; 32
 64c:	e0 32       	cpi	r30, 0x20	; 32
 64e:	f8 07       	cpc	r31, r24
 650:	d1 f7       	brne	.-12     	; 0x646 <get_pt+0x20>
        key_copy[j]=key[j];
        
    //trigger_high();

    enc(40, msg_copy, key_copy);
 652:	42 e3       	ldi	r20, 0x32	; 50
 654:	51 e2       	ldi	r21, 0x21	; 33
 656:	62 e1       	ldi	r22, 0x12	; 18
 658:	71 e2       	ldi	r23, 0x21	; 33
 65a:	88 e2       	ldi	r24, 0x28	; 40
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <enc>

    //trigger_low();
    
    simpleserial_put('r', 32, msg_copy);
 662:	42 e1       	ldi	r20, 0x12	; 18
 664:	51 e2       	ldi	r21, 0x21	; 33
 666:	60 e2       	ldi	r22, 0x20	; 32
 668:	82 e7       	ldi	r24, 0x72	; 114
 66a:	0e 94 ce 03 	call	0x79c	; 0x79c <simpleserial_put>

   return 0x00;
}
 66e:	80 e0       	ldi	r24, 0x00	; 0
 670:	08 95       	ret

00000672 <check_version>:
// Callback function for "v" command.
// This can exist in v1.0 as long as we don't actually send back an ack ("z")
uint8_t check_version(uint8_t *v, uint8_t len)
{
	return SS_VER;
}
 672:	81 e0       	ldi	r24, 0x01	; 1
 674:	08 95       	ret

00000676 <ss_crc>:
//#define SS_VER_2_0 2


#define CRC 0xA6
uint8_t ss_crc(uint8_t *buf, uint8_t len)
{
 676:	fc 01       	movw	r30, r24
	unsigned int k = 0;
	uint8_t crc = 0x00;
 678:	80 e0       	ldi	r24, 0x00	; 0
	while (len--) {
		crc ^= *buf++;
		for (k = 0; k < 8; k++) {
			crc = crc & 0x80 ? (crc << 1) ^ 0xA6: crc << 1;
 67a:	46 ea       	ldi	r20, 0xA6	; 166
#define CRC 0xA6
uint8_t ss_crc(uint8_t *buf, uint8_t len)
{
	unsigned int k = 0;
	uint8_t crc = 0x00;
	while (len--) {
 67c:	61 50       	subi	r22, 0x01	; 1
 67e:	08 f4       	brcc	.+2      	; 0x682 <ss_crc+0xc>
			crc = crc & 0x80 ? (crc << 1) ^ 0xA6: crc << 1;
		}
	}
	return crc;

}
 680:	08 95       	ret
uint8_t ss_crc(uint8_t *buf, uint8_t len)
{
	unsigned int k = 0;
	uint8_t crc = 0x00;
	while (len--) {
		crc ^= *buf++;
 682:	91 91       	ld	r25, Z+
 684:	98 27       	eor	r25, r24
 686:	28 e0       	ldi	r18, 0x08	; 8
 688:	30 e0       	ldi	r19, 0x00	; 0
		for (k = 0; k < 8; k++) {
			crc = crc & 0x80 ? (crc << 1) ^ 0xA6: crc << 1;
 68a:	97 ff       	sbrs	r25, 7
 68c:	07 c0       	rjmp	.+14     	; 0x69c <ss_crc+0x26>
 68e:	99 0f       	add	r25, r25
 690:	94 27       	eor	r25, r20
 692:	21 50       	subi	r18, 0x01	; 1
 694:	31 09       	sbc	r19, r1
 696:	89 2f       	mov	r24, r25
{
	unsigned int k = 0;
	uint8_t crc = 0x00;
	while (len--) {
		crc ^= *buf++;
		for (k = 0; k < 8; k++) {
 698:	c1 f7       	brne	.-16     	; 0x68a <ss_crc+0x14>
 69a:	f0 cf       	rjmp	.-32     	; 0x67c <ss_crc+0x6>
			crc = crc & 0x80 ? (crc << 1) ^ 0xA6: crc << 1;
 69c:	99 0f       	add	r25, r25
 69e:	f9 cf       	rjmp	.-14     	; 0x692 <ss_crc+0x1c>

000006a0 <hex_decode>:
	'0', '1', '2', '3', '4', '5', '6', '7',
	'8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
};

int hex_decode(int len, char* ascii_buf, uint8_t* data_buf)
{
 6a0:	db 01       	movw	r26, r22
	for(int i = 0; i < len; i++)
 6a2:	fa 01       	movw	r30, r20
 6a4:	9f 01       	movw	r18, r30
 6a6:	24 1b       	sub	r18, r20
 6a8:	35 0b       	sbc	r19, r21
 6aa:	28 17       	cp	r18, r24
 6ac:	39 07       	cpc	r19, r25
 6ae:	1c f0       	brlt	.+6      	; 0x6b6 <hex_decode+0x16>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
		else
			return 1;
	}

	return 0;
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	80 e0       	ldi	r24, 0x00	; 0
}
 6b4:	08 95       	ret

int hex_decode(int len, char* ascii_buf, uint8_t* data_buf)
{
	for(int i = 0; i < len; i++)
	{
		char n_hi = ascii_buf[2*i];
 6b6:	2c 91       	ld	r18, X
		char n_lo = ascii_buf[2*i+1];
 6b8:	11 96       	adiw	r26, 0x01	; 1
 6ba:	3c 91       	ld	r19, X
 6bc:	11 97       	sbiw	r26, 0x01	; 1

		if(n_lo >= '0' && n_lo <= '9')
 6be:	60 ed       	ldi	r22, 0xD0	; 208
 6c0:	63 0f       	add	r22, r19
 6c2:	6a 30       	cpi	r22, 0x0A	; 10
 6c4:	68 f4       	brcc	.+26     	; 0x6e0 <hex_decode+0x40>
			data_buf[i] = n_lo - '0';
 6c6:	60 83       	st	Z, r22
		else if(n_lo >= 'a' && n_lo <= 'f')
			data_buf[i] = n_lo - 'a' + 10;
		else
			return 1;

		if(n_hi >= '0' && n_hi <= '9')
 6c8:	30 ed       	ldi	r19, 0xD0	; 208
 6ca:	32 0f       	add	r19, r18
 6cc:	3a 30       	cpi	r19, 0x0A	; 10
 6ce:	c0 f4       	brcc	.+48     	; 0x700 <hex_decode+0x60>
			data_buf[i] |= (n_hi - '0') << 4;
 6d0:	22 95       	swap	r18
 6d2:	20 7f       	andi	r18, 0xF0	; 240
		else if(n_hi >= 'A' && n_hi <= 'F')
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
		else if(n_hi >= 'a' && n_hi <= 'f')
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 6d4:	30 81       	ld	r19, Z
 6d6:	23 2b       	or	r18, r19
 6d8:	20 83       	st	Z, r18
 6da:	31 96       	adiw	r30, 0x01	; 1
 6dc:	12 96       	adiw	r26, 0x02	; 2
 6de:	e2 cf       	rjmp	.-60     	; 0x6a4 <hex_decode+0x4>
		char n_hi = ascii_buf[2*i];
		char n_lo = ascii_buf[2*i+1];

		if(n_lo >= '0' && n_lo <= '9')
			data_buf[i] = n_lo - '0';
		else if(n_lo >= 'A' && n_lo <= 'F')
 6e0:	6f eb       	ldi	r22, 0xBF	; 191
 6e2:	63 0f       	add	r22, r19
 6e4:	66 30       	cpi	r22, 0x06	; 6
 6e6:	18 f4       	brcc	.+6      	; 0x6ee <hex_decode+0x4e>
			data_buf[i] = n_lo - 'A' + 10;
 6e8:	37 53       	subi	r19, 0x37	; 55
		else if(n_lo >= 'a' && n_lo <= 'f')
			data_buf[i] = n_lo - 'a' + 10;
 6ea:	30 83       	st	Z, r19
 6ec:	ed cf       	rjmp	.-38     	; 0x6c8 <hex_decode+0x28>

		if(n_lo >= '0' && n_lo <= '9')
			data_buf[i] = n_lo - '0';
		else if(n_lo >= 'A' && n_lo <= 'F')
			data_buf[i] = n_lo - 'A' + 10;
		else if(n_lo >= 'a' && n_lo <= 'f')
 6ee:	6f e9       	ldi	r22, 0x9F	; 159
 6f0:	63 0f       	add	r22, r19
 6f2:	66 30       	cpi	r22, 0x06	; 6
 6f4:	18 f0       	brcs	.+6      	; 0x6fc <hex_decode+0x5c>
			data_buf[i] = n_lo - 'a' + 10;
		else
			return 1;
 6f6:	81 e0       	ldi	r24, 0x01	; 1
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	08 95       	ret
		if(n_lo >= '0' && n_lo <= '9')
			data_buf[i] = n_lo - '0';
		else if(n_lo >= 'A' && n_lo <= 'F')
			data_buf[i] = n_lo - 'A' + 10;
		else if(n_lo >= 'a' && n_lo <= 'f')
			data_buf[i] = n_lo - 'a' + 10;
 6fc:	37 55       	subi	r19, 0x57	; 87
 6fe:	f5 cf       	rjmp	.-22     	; 0x6ea <hex_decode+0x4a>
		else
			return 1;

		if(n_hi >= '0' && n_hi <= '9')
			data_buf[i] |= (n_hi - '0') << 4;
		else if(n_hi >= 'A' && n_hi <= 'F')
 700:	3f eb       	ldi	r19, 0xBF	; 191
 702:	32 0f       	add	r19, r18
 704:	36 30       	cpi	r19, 0x06	; 6
 706:	40 f4       	brcc	.+16     	; 0x718 <hex_decode+0x78>
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 708:	27 53       	subi	r18, 0x37	; 55
 70a:	33 0b       	sbc	r19, r19
		else if(n_hi >= 'a' && n_hi <= 'f')
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 70c:	64 e0       	ldi	r22, 0x04	; 4
 70e:	22 0f       	add	r18, r18
 710:	33 1f       	adc	r19, r19
 712:	6a 95       	dec	r22
 714:	e1 f7       	brne	.-8      	; 0x70e <hex_decode+0x6e>
 716:	de cf       	rjmp	.-68     	; 0x6d4 <hex_decode+0x34>

		if(n_hi >= '0' && n_hi <= '9')
			data_buf[i] |= (n_hi - '0') << 4;
		else if(n_hi >= 'A' && n_hi <= 'F')
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
		else if(n_hi >= 'a' && n_hi <= 'f')
 718:	3f e9       	ldi	r19, 0x9F	; 159
 71a:	32 0f       	add	r19, r18
 71c:	36 30       	cpi	r19, 0x06	; 6
 71e:	58 f7       	brcc	.-42     	; 0x6f6 <hex_decode+0x56>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 720:	27 55       	subi	r18, 0x57	; 87
 722:	33 0b       	sbc	r19, r19
 724:	f3 cf       	rjmp	.-26     	; 0x70c <hex_decode+0x6c>

00000726 <simpleserial_addcmd_flags>:
	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
}

int simpleserial_addcmd_flags(char c, unsigned int len, uint8_t (*fp)(uint8_t*, uint8_t), uint8_t fl)
{
	if(num_commands >= MAX_SS_CMDS)
 726:	a0 91 10 21 	lds	r26, 0x2110	; 0x802110 <num_commands>
 72a:	b0 91 11 21 	lds	r27, 0x2111	; 0x802111 <num_commands+0x1>
 72e:	a0 32       	cpi	r26, 0x20	; 32
 730:	b1 05       	cpc	r27, r1
 732:	cc f4       	brge	.+50     	; 0x766 <simpleserial_addcmd_flags+0x40>
		return 1;

	if(len >= MAX_SS_LEN)
 734:	60 3c       	cpi	r22, 0xC0	; 192
 736:	71 05       	cpc	r23, r1
 738:	b0 f4       	brcc	.+44     	; 0x766 <simpleserial_addcmd_flags+0x40>
		return 1;

	commands[num_commands].c   = c;
 73a:	96 e0       	ldi	r25, 0x06	; 6
 73c:	9a 9f       	mul	r25, r26
 73e:	f0 01       	movw	r30, r0
 740:	9b 9f       	mul	r25, r27
 742:	f0 0d       	add	r31, r0
 744:	11 24       	eor	r1, r1
 746:	e0 5b       	subi	r30, 0xB0	; 176
 748:	ff 4d       	sbci	r31, 0xDF	; 223
 74a:	80 83       	st	Z, r24
	commands[num_commands].len = len;
 74c:	61 83       	std	Z+1, r22	; 0x01
 74e:	72 83       	std	Z+2, r23	; 0x02
	commands[num_commands].fp  = fp;
 750:	43 83       	std	Z+3, r20	; 0x03
 752:	54 83       	std	Z+4, r21	; 0x04
	commands[num_commands].flags = fl;
 754:	25 83       	std	Z+5, r18	; 0x05
	num_commands++;
 756:	11 96       	adiw	r26, 0x01	; 1
 758:	a0 93 10 21 	sts	0x2110, r26	; 0x802110 <num_commands>
 75c:	b0 93 11 21 	sts	0x2111, r27	; 0x802111 <num_commands+0x1>

	return 0;
 760:	90 e0       	ldi	r25, 0x00	; 0
 762:	80 e0       	ldi	r24, 0x00	; 0
 764:	08 95       	ret
}

int simpleserial_addcmd_flags(char c, unsigned int len, uint8_t (*fp)(uint8_t*, uint8_t), uint8_t fl)
{
	if(num_commands >= MAX_SS_CMDS)
		return 1;
 766:	81 e0       	ldi	r24, 0x01	; 1
 768:	90 e0       	ldi	r25, 0x00	; 0
	commands[num_commands].fp  = fp;
	commands[num_commands].flags = fl;
	num_commands++;

	return 0;
}
 76a:	08 95       	ret

0000076c <simpleserial_addcmd>:
    simpleserial_addcmd('y', 0, ss_num_commands);
}

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t*, uint8_t))
{
	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
 76c:	20 e0       	ldi	r18, 0x00	; 0
 76e:	0c 94 93 03 	jmp	0x726	; 0x726 <simpleserial_addcmd_flags>

00000772 <simpleserial_init>:

// Set up the SimpleSerial module by preparing internal commands
// This just adds the "v" command for now...
void simpleserial_init()
{
	simpleserial_addcmd('v', 0, check_version);
 772:	49 e3       	ldi	r20, 0x39	; 57
 774:	53 e0       	ldi	r21, 0x03	; 3
 776:	70 e0       	ldi	r23, 0x00	; 0
 778:	60 e0       	ldi	r22, 0x00	; 0
 77a:	86 e7       	ldi	r24, 0x76	; 118
 77c:	0e 94 b6 03 	call	0x76c	; 0x76c <simpleserial_addcmd>
    simpleserial_addcmd('w', 0, ss_get_commands);
 780:	41 e1       	ldi	r20, 0x11	; 17
 782:	54 e0       	ldi	r21, 0x04	; 4
 784:	70 e0       	ldi	r23, 0x00	; 0
 786:	60 e0       	ldi	r22, 0x00	; 0
 788:	87 e7       	ldi	r24, 0x77	; 119
 78a:	0e 94 b6 03 	call	0x76c	; 0x76c <simpleserial_addcmd>
    simpleserial_addcmd('y', 0, ss_num_commands);
 78e:	4d ef       	ldi	r20, 0xFD	; 253
 790:	53 e0       	ldi	r21, 0x03	; 3
 792:	70 e0       	ldi	r23, 0x00	; 0
 794:	60 e0       	ldi	r22, 0x00	; 0
 796:	89 e7       	ldi	r24, 0x79	; 121
 798:	0c 94 b6 03 	jmp	0x76c	; 0x76c <simpleserial_addcmd>

0000079c <simpleserial_put>:
	simpleserial_put('z', 1, ret);
#endif
}

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 79c:	ef 92       	push	r14
 79e:	ff 92       	push	r15
 7a0:	0f 93       	push	r16
 7a2:	1f 93       	push	r17
 7a4:	cf 93       	push	r28
 7a6:	df 93       	push	r29
 7a8:	06 2f       	mov	r16, r22
 7aa:	7a 01       	movw	r14, r20
	// Write first character
	putch(c);
 7ac:	0e 94 54 05 	call	0xaa8	; 0xaa8 <output_ch_0>

	// Write each byte as two nibbles
	for(int i = 0; i < size; i++)
 7b0:	e7 01       	movw	r28, r14
 7b2:	10 e0       	ldi	r17, 0x00	; 0
 7b4:	ce 01       	movw	r24, r28
 7b6:	8e 19       	sub	r24, r14
 7b8:	9f 09       	sbc	r25, r15
 7ba:	80 17       	cp	r24, r16
 7bc:	91 07       	cpc	r25, r17
 7be:	4c f0       	brlt	.+18     	; 0x7d2 <simpleserial_put+0x36>
		putch(hex_lookup[output[i] >> 4 ]);
		putch(hex_lookup[output[i] & 0xF]);
	}

	// Write trailing '\n'
	putch('\n');
 7c0:	8a e0       	ldi	r24, 0x0A	; 10
}
 7c2:	df 91       	pop	r29
 7c4:	cf 91       	pop	r28
 7c6:	1f 91       	pop	r17
 7c8:	0f 91       	pop	r16
 7ca:	ff 90       	pop	r15
 7cc:	ef 90       	pop	r14
		putch(hex_lookup[output[i] >> 4 ]);
		putch(hex_lookup[output[i] & 0xF]);
	}

	// Write trailing '\n'
	putch('\n');
 7ce:	0c 94 54 05 	jmp	0xaa8	; 0xaa8 <output_ch_0>
	putch(c);

	// Write each byte as two nibbles
	for(int i = 0; i < size; i++)
	{
		putch(hex_lookup[output[i] >> 4 ]);
 7d2:	e9 91       	ld	r30, Y+
 7d4:	e2 95       	swap	r30
 7d6:	ef 70       	andi	r30, 0x0F	; 15
 7d8:	f0 e0       	ldi	r31, 0x00	; 0
 7da:	e0 5c       	subi	r30, 0xC0	; 192
 7dc:	ff 4d       	sbci	r31, 0xDF	; 223
 7de:	80 81       	ld	r24, Z
 7e0:	0e 94 54 05 	call	0xaa8	; 0xaa8 <output_ch_0>
		putch(hex_lookup[output[i] & 0xF]);
 7e4:	fe 01       	movw	r30, r28
 7e6:	31 97       	sbiw	r30, 0x01	; 1
 7e8:	e0 81       	ld	r30, Z
 7ea:	ef 70       	andi	r30, 0x0F	; 15
 7ec:	f0 e0       	ldi	r31, 0x00	; 0
 7ee:	e0 5c       	subi	r30, 0xC0	; 192
 7f0:	ff 4d       	sbci	r31, 0xDF	; 223
 7f2:	80 81       	ld	r24, Z
 7f4:	0e 94 54 05 	call	0xaa8	; 0xaa8 <output_ch_0>
 7f8:	dd cf       	rjmp	.-70     	; 0x7b4 <simpleserial_put+0x18>

000007fa <ss_num_commands>:
{
	return SS_VER;
}

uint8_t ss_num_commands(uint8_t *x, uint8_t len)
{
 7fa:	cf 93       	push	r28
 7fc:	df 93       	push	r29
 7fe:	1f 92       	push	r1
 800:	cd b7       	in	r28, 0x3d	; 61
 802:	de b7       	in	r29, 0x3e	; 62
    uint8_t ncmds = num_commands & 0xFF;
 804:	80 91 10 21 	lds	r24, 0x2110	; 0x802110 <num_commands>
 808:	89 83       	std	Y+1, r24	; 0x01
    simpleserial_put('r', 0x01, &ncmds);
 80a:	ae 01       	movw	r20, r28
 80c:	4f 5f       	subi	r20, 0xFF	; 255
 80e:	5f 4f       	sbci	r21, 0xFF	; 255
 810:	61 e0       	ldi	r22, 0x01	; 1
 812:	82 e7       	ldi	r24, 0x72	; 114
 814:	0e 94 ce 03 	call	0x79c	; 0x79c <simpleserial_put>
    return 0x00;
}
 818:	80 e0       	ldi	r24, 0x00	; 0
 81a:	0f 90       	pop	r0
 81c:	df 91       	pop	r29
 81e:	cf 91       	pop	r28
 820:	08 95       	ret

00000822 <ss_get_commands>:
    uint8_t len;
    uint8_t flags;
} ss_cmd_repr;

uint8_t ss_get_commands(uint8_t *x, uint8_t len)
{
 822:	cf 93       	push	r28
 824:	df 93       	push	r29
 826:	cd b7       	in	r28, 0x3d	; 61
 828:	de b7       	in	r29, 0x3e	; 62
 82a:	c0 56       	subi	r28, 0x60	; 96
 82c:	d1 09       	sbc	r29, r1
 82e:	cd bf       	out	0x3d, r28	; 61
 830:	de bf       	out	0x3e, r29	; 62
    ss_cmd_repr repr_cmd_buf[MAX_SS_CMDS];
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 832:	20 91 10 21 	lds	r18, 0x2110	; 0x802110 <num_commands>
 836:	30 91 11 21 	lds	r19, 0x2111	; 0x802111 <num_commands+0x1>
 83a:	b9 01       	movw	r22, r18
 83c:	77 27       	eor	r23, r23
 83e:	40 e0       	ldi	r20, 0x00	; 0
        repr_cmd_buf[i].c = commands[i].c;
 840:	56 e0       	ldi	r21, 0x06	; 6
} ss_cmd_repr;

uint8_t ss_get_commands(uint8_t *x, uint8_t len)
{
    ss_cmd_repr repr_cmd_buf[MAX_SS_CMDS];
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 842:	84 2f       	mov	r24, r20
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	86 17       	cp	r24, r22
 848:	97 07       	cpc	r25, r23
 84a:	8c f0       	brlt	.+34     	; 0x86e <ss_get_commands+0x4c>
        repr_cmd_buf[i].c = commands[i].c;
        repr_cmd_buf[i].len = commands[i].len;
        repr_cmd_buf[i].flags = commands[i].flags;
    }

    simpleserial_put('r', num_commands * 0x03, &repr_cmd_buf);
 84c:	62 2f       	mov	r22, r18
 84e:	66 0f       	add	r22, r22
 850:	62 0f       	add	r22, r18
 852:	ae 01       	movw	r20, r28
 854:	4f 5f       	subi	r20, 0xFF	; 255
 856:	5f 4f       	sbci	r21, 0xFF	; 255
 858:	82 e7       	ldi	r24, 0x72	; 114
 85a:	0e 94 ce 03 	call	0x79c	; 0x79c <simpleserial_put>
    return 0x00;
}
 85e:	80 e0       	ldi	r24, 0x00	; 0
 860:	c0 5a       	subi	r28, 0xA0	; 160
 862:	df 4f       	sbci	r29, 0xFF	; 255
 864:	cd bf       	out	0x3d, r28	; 61
 866:	de bf       	out	0x3e, r29	; 62
 868:	df 91       	pop	r29
 86a:	cf 91       	pop	r28
 86c:	08 95       	ret

uint8_t ss_get_commands(uint8_t *x, uint8_t len)
{
    ss_cmd_repr repr_cmd_buf[MAX_SS_CMDS];
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
        repr_cmd_buf[i].c = commands[i].c;
 86e:	fc 01       	movw	r30, r24
 870:	ee 0f       	add	r30, r30
 872:	ff 1f       	adc	r31, r31
 874:	e8 0f       	add	r30, r24
 876:	f9 1f       	adc	r31, r25
 878:	a1 e0       	ldi	r26, 0x01	; 1
 87a:	b0 e0       	ldi	r27, 0x00	; 0
 87c:	ac 0f       	add	r26, r28
 87e:	bd 1f       	adc	r27, r29
 880:	ea 0f       	add	r30, r26
 882:	fb 1f       	adc	r31, r27
 884:	58 9f       	mul	r21, r24
 886:	d0 01       	movw	r26, r0
 888:	59 9f       	mul	r21, r25
 88a:	b0 0d       	add	r27, r0
 88c:	11 24       	eor	r1, r1
 88e:	a0 5b       	subi	r26, 0xB0	; 176
 890:	bf 4d       	sbci	r27, 0xDF	; 223
 892:	8c 91       	ld	r24, X
 894:	80 83       	st	Z, r24
        repr_cmd_buf[i].len = commands[i].len;
 896:	11 96       	adiw	r26, 0x01	; 1
 898:	8c 91       	ld	r24, X
 89a:	11 97       	sbiw	r26, 0x01	; 1
 89c:	81 83       	std	Z+1, r24	; 0x01
        repr_cmd_buf[i].flags = commands[i].flags;
 89e:	15 96       	adiw	r26, 0x05	; 5
 8a0:	8c 91       	ld	r24, X
 8a2:	82 83       	std	Z+2, r24	; 0x02
} ss_cmd_repr;

uint8_t ss_get_commands(uint8_t *x, uint8_t len)
{
    ss_cmd_repr repr_cmd_buf[MAX_SS_CMDS];
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8a4:	4f 5f       	subi	r20, 0xFF	; 255
 8a6:	cd cf       	rjmp	.-102    	; 0x842 <ss_get_commands+0x20>

000008a8 <simpleserial_get>:

	return 0;
}

void simpleserial_get(void)
{
 8a8:	af 92       	push	r10
 8aa:	bf 92       	push	r11
 8ac:	cf 92       	push	r12
 8ae:	df 92       	push	r13
 8b0:	ef 92       	push	r14
 8b2:	ff 92       	push	r15
 8b4:	0f 93       	push	r16
 8b6:	1f 93       	push	r17
 8b8:	cf 93       	push	r28
 8ba:	df 93       	push	r29
 8bc:	cd b7       	in	r28, 0x3d	; 61
 8be:	de b7       	in	r29, 0x3e	; 62
 8c0:	c1 54       	subi	r28, 0x41	; 65
 8c2:	d2 40       	sbci	r29, 0x02	; 2
 8c4:	cd bf       	out	0x3d, r28	; 61
 8c6:	de bf       	out	0x3e, r29	; 62
	char ascii_buf[2*MAX_SS_LEN];
	uint8_t data_buf[MAX_SS_LEN];
	char c;

	// Find which command we're receiving
	c = getch();
 8c8:	0e 94 4d 05 	call	0xa9a	; 0xa9a <input_ch_0>

	int cmd;
	for(cmd = 0; cmd < num_commands; cmd++)
 8cc:	40 91 10 21 	lds	r20, 0x2110	; 0x802110 <num_commands>
 8d0:	50 91 11 21 	lds	r21, 0x2111	; 0x802111 <num_commands+0x1>
 8d4:	20 e5       	ldi	r18, 0x50	; 80
 8d6:	30 e2       	ldi	r19, 0x20	; 32
 8d8:	10 e0       	ldi	r17, 0x00	; 0
 8da:	00 e0       	ldi	r16, 0x00	; 0
 8dc:	04 17       	cp	r16, r20
 8de:	15 07       	cpc	r17, r21
 8e0:	94 f0       	brlt	.+36     	; 0x906 <simpleserial_get+0x5e>
		if(commands[cmd].c == c)
			break;
	}

	// If we didn't find a match, give up right away
	if(cmd == num_commands)
 8e2:	40 17       	cp	r20, r16
 8e4:	51 07       	cpc	r21, r17
 8e6:	b1 f4       	brne	.+44     	; 0x914 <simpleserial_get+0x6c>

	// Acknowledge (if version is 1.1)
#if SS_VER == SS_VER_1_1
	simpleserial_put('z', 1, ret);
#endif
}
 8e8:	cf 5b       	subi	r28, 0xBF	; 191
 8ea:	dd 4f       	sbci	r29, 0xFD	; 253
 8ec:	cd bf       	out	0x3d, r28	; 61
 8ee:	de bf       	out	0x3e, r29	; 62
 8f0:	df 91       	pop	r29
 8f2:	cf 91       	pop	r28
 8f4:	1f 91       	pop	r17
 8f6:	0f 91       	pop	r16
 8f8:	ff 90       	pop	r15
 8fa:	ef 90       	pop	r14
 8fc:	df 90       	pop	r13
 8fe:	cf 90       	pop	r12
 900:	bf 90       	pop	r11
 902:	af 90       	pop	r10
 904:	08 95       	ret
 906:	2a 5f       	subi	r18, 0xFA	; 250
 908:	3f 4f       	sbci	r19, 0xFF	; 255
	c = getch();

	int cmd;
	for(cmd = 0; cmd < num_commands; cmd++)
	{
		if(commands[cmd].c == c)
 90a:	f9 01       	movw	r30, r18
 90c:	36 97       	sbiw	r30, 0x06	; 6
 90e:	90 81       	ld	r25, Z
 910:	98 13       	cpse	r25, r24
 912:	7e c0       	rjmp	.+252    	; 0xa10 <simpleserial_get+0x168>
	// If we didn't find a match, give up right away
	if(cmd == num_commands)
		return;

	// If flag CMD_FLAG_LEN is set, the next byte indicates the sent length
	if ((commands[cmd].flags & CMD_FLAG_LEN) != 0)
 914:	26 e0       	ldi	r18, 0x06	; 6
 916:	20 9f       	mul	r18, r16
 918:	c0 01       	movw	r24, r0
 91a:	21 9f       	mul	r18, r17
 91c:	90 0d       	add	r25, r0
 91e:	11 24       	eor	r1, r1
 920:	9c 01       	movw	r18, r24
 922:	20 5b       	subi	r18, 0xB0	; 176
 924:	3f 4d       	sbci	r19, 0xDF	; 223
 926:	69 01       	movw	r12, r18
 928:	d9 01       	movw	r26, r18
 92a:	15 96       	adiw	r26, 0x05	; 5
 92c:	8c 91       	ld	r24, X
 92e:	fe 01       	movw	r30, r28
 930:	31 96       	adiw	r30, 0x01	; 1
 932:	7f 01       	movw	r14, r30
 934:	80 ff       	sbrs	r24, 0
 936:	20 c0       	rjmp	.+64     	; 0x978 <simpleserial_get+0xd0>
	{
		uint8_t l = 0;
 938:	cf 57       	subi	r28, 0x7F	; 127
 93a:	de 4f       	sbci	r29, 0xFE	; 254
 93c:	18 82       	st	Y, r1
 93e:	c1 58       	subi	r28, 0x81	; 129
 940:	d1 40       	sbci	r29, 0x01	; 1
		char buff[2];
		buff[0] = getch();
 942:	0e 94 4d 05 	call	0xa9a	; 0xa9a <input_ch_0>
 946:	89 83       	std	Y+1, r24	; 0x01
		buff[1] = getch();
 948:	0e 94 4d 05 	call	0xa9a	; 0xa9a <input_ch_0>
 94c:	8a 83       	std	Y+2, r24	; 0x02
		if (hex_decode(1, buff, &l))
 94e:	ae 01       	movw	r20, r28
 950:	4f 57       	subi	r20, 0x7F	; 127
 952:	5e 4f       	sbci	r21, 0xFE	; 254
 954:	b7 01       	movw	r22, r14
 956:	81 e0       	ldi	r24, 0x01	; 1
 958:	90 e0       	ldi	r25, 0x00	; 0
 95a:	0e 94 50 03 	call	0x6a0	; 0x6a0 <hex_decode>
 95e:	89 2b       	or	r24, r25
 960:	19 f6       	brne	.-122    	; 0x8e8 <simpleserial_get+0x40>
			return;
		commands[cmd].len = l;
 962:	cf 57       	subi	r28, 0x7F	; 127
 964:	de 4f       	sbci	r29, 0xFE	; 254
 966:	88 81       	ld	r24, Y
 968:	c1 58       	subi	r28, 0x81	; 129
 96a:	d1 40       	sbci	r29, 0x01	; 1
 96c:	90 e0       	ldi	r25, 0x00	; 0
 96e:	d6 01       	movw	r26, r12
 970:	11 96       	adiw	r26, 0x01	; 1
 972:	8d 93       	st	X+, r24
 974:	9c 93       	st	X, r25
 976:	12 97       	sbiw	r26, 0x02	; 2

	// Find which command we're receiving
	c = getch();

	int cmd;
	for(cmd = 0; cmd < num_commands; cmd++)
 978:	67 01       	movw	r12, r14
			return;
		commands[cmd].len = l;
	}

	// Receive characters until we fill the ASCII buffer
	for(int i = 0; i < 2*commands[cmd].len; i++)
 97a:	26 e0       	ldi	r18, 0x06	; 6
 97c:	20 9f       	mul	r18, r16
 97e:	c0 01       	movw	r24, r0
 980:	21 9f       	mul	r18, r17
 982:	90 0d       	add	r25, r0
 984:	11 24       	eor	r1, r1
 986:	fc 01       	movw	r30, r24
 988:	ef 5a       	subi	r30, 0xAF	; 175
 98a:	ff 4d       	sbci	r31, 0xDF	; 223
 98c:	5f 01       	movw	r10, r30
 98e:	f5 01       	movw	r30, r10
 990:	80 81       	ld	r24, Z
 992:	91 81       	ldd	r25, Z+1	; 0x01
 994:	88 0f       	add	r24, r24
 996:	99 1f       	adc	r25, r25
 998:	96 01       	movw	r18, r12
 99a:	2e 19       	sub	r18, r14
 99c:	3f 09       	sbc	r19, r15
 99e:	28 17       	cp	r18, r24
 9a0:	39 07       	cpc	r19, r25
 9a2:	c8 f1       	brcs	.+114    	; 0xa16 <simpleserial_get+0x16e>

		ascii_buf[i] = c;
	}

	// Assert that last character is \n or \r
	c = getch();
 9a4:	0e 94 4d 05 	call	0xa9a	; 0xa9a <input_ch_0>
	if(c != '\n' && c != '\r')
 9a8:	8a 30       	cpi	r24, 0x0A	; 10
 9aa:	19 f0       	breq	.+6      	; 0x9b2 <simpleserial_get+0x10a>
 9ac:	8d 30       	cpi	r24, 0x0D	; 13
 9ae:	09 f0       	breq	.+2      	; 0x9b2 <simpleserial_get+0x10a>
 9b0:	9b cf       	rjmp	.-202    	; 0x8e8 <simpleserial_get+0x40>
		return;

	// ASCII buffer is full: convert to bytes
	// Check for illegal characters here
	if(hex_decode(commands[cmd].len, ascii_buf, data_buf))
 9b2:	26 e0       	ldi	r18, 0x06	; 6
 9b4:	20 9f       	mul	r18, r16
 9b6:	c0 01       	movw	r24, r0
 9b8:	21 9f       	mul	r18, r17
 9ba:	90 0d       	add	r25, r0
 9bc:	11 24       	eor	r1, r1
 9be:	8c 01       	movw	r16, r24
 9c0:	00 5b       	subi	r16, 0xB0	; 176
 9c2:	1f 4d       	sbci	r17, 0xDF	; 223
 9c4:	d8 01       	movw	r26, r16
 9c6:	11 96       	adiw	r26, 0x01	; 1
 9c8:	dc 90       	ld	r13, X
 9ca:	11 97       	sbiw	r26, 0x01	; 1
 9cc:	ae 01       	movw	r20, r28
 9ce:	4f 57       	subi	r20, 0x7F	; 127
 9d0:	5e 4f       	sbci	r21, 0xFE	; 254
 9d2:	b7 01       	movw	r22, r14
 9d4:	8d 2d       	mov	r24, r13
 9d6:	12 96       	adiw	r26, 0x02	; 2
 9d8:	9c 91       	ld	r25, X
 9da:	0e 94 50 03 	call	0x6a0	; 0x6a0 <hex_decode>
 9de:	89 2b       	or	r24, r25
 9e0:	09 f0       	breq	.+2      	; 0x9e4 <simpleserial_get+0x13c>
 9e2:	82 cf       	rjmp	.-252    	; 0x8e8 <simpleserial_get+0x40>
		return;

	// Callback
	uint8_t ret[1];
	ret[0] = commands[cmd].fp(data_buf, commands[cmd].len);
 9e4:	d8 01       	movw	r26, r16
 9e6:	13 96       	adiw	r26, 0x03	; 3
 9e8:	ed 91       	ld	r30, X+
 9ea:	fc 91       	ld	r31, X
 9ec:	6d 2d       	mov	r22, r13
 9ee:	ce 01       	movw	r24, r28
 9f0:	8f 57       	subi	r24, 0x7F	; 127
 9f2:	9e 4f       	sbci	r25, 0xFE	; 254
 9f4:	19 95       	eicall
 9f6:	cf 5b       	subi	r28, 0xBF	; 191
 9f8:	dd 4f       	sbci	r29, 0xFD	; 253
 9fa:	88 83       	st	Y, r24
 9fc:	c1 54       	subi	r28, 0x41	; 65
 9fe:	d2 40       	sbci	r29, 0x02	; 2

	// Acknowledge (if version is 1.1)
#if SS_VER == SS_VER_1_1
	simpleserial_put('z', 1, ret);
 a00:	ae 01       	movw	r20, r28
 a02:	4f 5b       	subi	r20, 0xBF	; 191
 a04:	5d 4f       	sbci	r21, 0xFD	; 253
 a06:	61 e0       	ldi	r22, 0x01	; 1
 a08:	8a e7       	ldi	r24, 0x7A	; 122
 a0a:	0e 94 ce 03 	call	0x79c	; 0x79c <simpleserial_put>
 a0e:	6c cf       	rjmp	.-296    	; 0x8e8 <simpleserial_get+0x40>

	// Find which command we're receiving
	c = getch();

	int cmd;
	for(cmd = 0; cmd < num_commands; cmd++)
 a10:	0f 5f       	subi	r16, 0xFF	; 255
 a12:	1f 4f       	sbci	r17, 0xFF	; 255
 a14:	63 cf       	rjmp	.-314    	; 0x8dc <simpleserial_get+0x34>
	}

	// Receive characters until we fill the ASCII buffer
	for(int i = 0; i < 2*commands[cmd].len; i++)
	{
		c = getch();
 a16:	0e 94 4d 05 	call	0xa9a	; 0xa9a <input_ch_0>

		// Check for early \n
		if(c == '\n' || c == '\r')
 a1a:	8a 30       	cpi	r24, 0x0A	; 10
 a1c:	09 f4       	brne	.+2      	; 0xa20 <simpleserial_get+0x178>
 a1e:	64 cf       	rjmp	.-312    	; 0x8e8 <simpleserial_get+0x40>
 a20:	8d 30       	cpi	r24, 0x0D	; 13
 a22:	09 f4       	brne	.+2      	; 0xa26 <simpleserial_get+0x17e>
 a24:	61 cf       	rjmp	.-318    	; 0x8e8 <simpleserial_get+0x40>
			return;

		ascii_buf[i] = c;
 a26:	d6 01       	movw	r26, r12
 a28:	8d 93       	st	X+, r24
 a2a:	6d 01       	movw	r12, r26
 a2c:	b0 cf       	rjmp	.-160    	; 0x98e <simpleserial_get+0xe6>

00000a2e <init_uart0>:
   )
   {
/* This PORT setting is only valid to USARTC0 if other USARTs is used a
	 * different PORT and/or pins is used. */
	/* PIN3 (TXD0) as output. */
	PORTC.DIRSET = PIN3_bm;
 a2e:	e0 e4       	ldi	r30, 0x40	; 64
 a30:	f6 e0       	ldi	r31, 0x06	; 6
 a32:	88 e0       	ldi	r24, 0x08	; 8
 a34:	81 83       	std	Z+1, r24	; 0x01

	/* PC2 (RXD0) as input. */
	PORTC.DIRCLR = PIN2_bm;
 a36:	84 e0       	ldi	r24, 0x04	; 4
 a38:	82 83       	std	Z+2, r24	; 0x02

	/* USARTC0, 8 Data bits, No Parity, 1 Stop bit. */
	USART_Format_Set(&USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
 a3a:	e0 ea       	ldi	r30, 0xA0	; 160
 a3c:	f8 e0       	ldi	r31, 0x08	; 8
 a3e:	83 e0       	ldi	r24, 0x03	; 3
 a40:	85 83       	std	Z+5, r24	; 0x05
	 *                 = 12
	 */
	#if SS_VER==SS_VER_2_0
	USART_Baudrate_Set(&USART, 1, 0);
	#else
	USART_Baudrate_Set(&USART, 11, 0);
 a42:	8b e0       	ldi	r24, 0x0B	; 11
 a44:	86 83       	std	Z+6, r24	; 0x06
 a46:	17 82       	std	Z+7, r1	; 0x07
	#endif

	/* Enable both RX and TX. */
	USART_Rx_Enable(&USART);
 a48:	84 81       	ldd	r24, Z+4	; 0x04
 a4a:	80 61       	ori	r24, 0x10	; 16
 a4c:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(&USART);
 a4e:	84 81       	ldd	r24, Z+4	; 0x04
 a50:	88 60       	ori	r24, 0x08	; 8
 a52:	84 83       	std	Z+4, r24	; 0x04
   }
 a54:	08 95       	ret

00000a56 <input_ch_w_timeout_0>:
unsigned char									input_ch_w_timeout_0
	(
   char *					 	data,
   volatile unsigned int				timeout
   )
   {
 a56:	cf 93       	push	r28
 a58:	df 93       	push	r29
 a5a:	1f 92       	push	r1
 a5c:	1f 92       	push	r1
 a5e:	cd b7       	in	r28, 0x3d	; 61
 a60:	de b7       	in	r29, 0x3e	; 62
 a62:	69 83       	std	Y+1, r22	; 0x01
 a64:	7a 83       	std	Y+2, r23	; 0x02
   unsigned int				timeout_counter = 0;
 a66:	30 e0       	ldi	r19, 0x00	; 0
 a68:	20 e0       	ldi	r18, 0x00	; 0

   
   //check if a byte has been recieved or if the timeout has been excedded
   while (timeout_counter != timeout)
 a6a:	49 81       	ldd	r20, Y+1	; 0x01
 a6c:	5a 81       	ldd	r21, Y+2	; 0x02
 a6e:	42 17       	cp	r20, r18
 a70:	53 07       	cpc	r21, r19
 a72:	11 f4       	brne	.+4      	; 0xa78 <input_ch_w_timeout_0+0x22>
			return BYTE_REC;
			}
		timeout_counter++;
		}
		
	return TIMEOUT;
 a74:	80 e0       	ldi	r24, 0x00	; 0
 a76:	09 c0       	rjmp	.+18     	; 0xa8a <input_ch_w_timeout_0+0x34>

   
   //check if a byte has been recieved or if the timeout has been excedded
   while (timeout_counter != timeout)
		{	
		if (USART_IsRXComplete(&USART))
 a78:	40 91 a1 08 	lds	r20, 0x08A1	; 0x8008a1 <__TEXT_REGION_LENGTH__+0x7de8a1>
 a7c:	47 ff       	sbrs	r20, 7
 a7e:	0a c0       	rjmp	.+20     	; 0xa94 <input_ch_w_timeout_0+0x3e>
			{
			*data = USART_GetChar(&USART);
 a80:	20 91 a0 08 	lds	r18, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7de8a0>
 a84:	fc 01       	movw	r30, r24
 a86:	20 83       	st	Z, r18
			return BYTE_REC;
 a88:	81 e0       	ldi	r24, 0x01	; 1
			}
		timeout_counter++;
		}
		
	return TIMEOUT;
	}
 a8a:	0f 90       	pop	r0
 a8c:	0f 90       	pop	r0
 a8e:	df 91       	pop	r29
 a90:	cf 91       	pop	r28
 a92:	08 95       	ret
		if (USART_IsRXComplete(&USART))
			{
			*data = USART_GetChar(&USART);
			return BYTE_REC;
			}
		timeout_counter++;
 a94:	2f 5f       	subi	r18, 0xFF	; 255
 a96:	3f 4f       	sbci	r19, 0xFF	; 255
 a98:	e8 cf       	rjmp	.-48     	; 0xa6a <input_ch_w_timeout_0+0x14>

00000a9a <input_ch_0>:
	(
   void
   )
   {
   //check if a byte has been recieved or if the timeout has been excedded
   while (!USART_IsRXComplete(&USART))
 a9a:	80 91 a1 08 	lds	r24, 0x08A1	; 0x8008a1 <__TEXT_REGION_LENGTH__+0x7de8a1>
 a9e:	87 ff       	sbrs	r24, 7
 aa0:	fc cf       	rjmp	.-8      	; 0xa9a <input_ch_0>
		{
		continue;		
		}		
	return USART_GetChar(&USART);;
 aa2:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7de8a0>
	}
 aa6:	08 95       	ret

00000aa8 <output_ch_0>:
void												output_ch_0
	(
	char							data
	)
	{
	while(!USART_IsTXDataRegisterEmpty(&USART));
 aa8:	90 91 a1 08 	lds	r25, 0x08A1	; 0x8008a1 <__TEXT_REGION_LENGTH__+0x7de8a1>
 aac:	95 ff       	sbrs	r25, 5
 aae:	fc cf       	rjmp	.-8      	; 0xaa8 <output_ch_0>
	USART_PutChar(&USART, data);
 ab0:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7de8a0>
	return;
 ab4:	08 95       	ret

00000ab6 <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel          Data register empty interrupt level.
 */
void USART_InterruptDriver_Initialize(USART_data_t * usart_data,
                                      USART_t * usart,
                                      USART_DREINTLVL_t dreIntLevel)
{
 ab6:	fc 01       	movw	r30, r24
	usart_data->usart = usart;
 ab8:	60 83       	st	Z, r22
 aba:	71 83       	std	Z+1, r23	; 0x01
	usart_data->dreIntLevel = dreIntLevel;
 abc:	42 83       	std	Z+2, r20	; 0x02

	usart_data->buffer.RX_Tail = 0;
 abe:	14 86       	std	Z+12, r1	; 0x0c
	usart_data->buffer.RX_Head = 0;
 ac0:	13 86       	std	Z+11, r1	; 0x0b
	usart_data->buffer.TX_Tail = 0;
 ac2:	16 86       	std	Z+14, r1	; 0x0e
	usart_data->buffer.TX_Head = 0;
 ac4:	15 86       	std	Z+13, r1	; 0x0d
}
 ac6:	08 95       	ret

00000ac8 <USART_InterruptDriver_DreInterruptLevel_Set>:
 *  \param dreIntLevel        Interrupt level of the DRE interrupt.
 */
void USART_InterruptDriver_DreInterruptLevel_Set(USART_data_t * usart_data,
                                                 USART_DREINTLVL_t dreIntLevel)
{
	usart_data->dreIntLevel = dreIntLevel;
 ac8:	fc 01       	movw	r30, r24
 aca:	62 83       	std	Z+2, r22	; 0x02
}
 acc:	08 95       	ret

00000ace <USART_TXBuffer_FreeSpace>:
 *
 *  \retval true      There is data in the receive buffer.
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
 ace:	fc 01       	movw	r30, r24
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
 ad0:	95 85       	ldd	r25, Z+13	; 0x0d
	uint8_t tempTail = usart_data->buffer.TX_Tail;
 ad2:	26 85       	ldd	r18, Z+14	; 0x0e
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
 ad4:	9f 5f       	subi	r25, 0xFF	; 255
 ad6:	93 70       	andi	r25, 0x03	; 3
	uint8_t tempTail = usart_data->buffer.TX_Tail;

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
 ad8:	81 e0       	ldi	r24, 0x01	; 1
 ada:	92 13       	cpse	r25, r18
 adc:	01 c0       	rjmp	.+2      	; 0xae0 <USART_TXBuffer_FreeSpace+0x12>
 ade:	80 e0       	ldi	r24, 0x00	; 0
}
 ae0:	08 95       	ret

00000ae2 <USART_TXBuffer_PutByte>:
 *
 *  \param usart_data The USART_data_t struct instance.
 *  \param data       The data to send.
 */
bool USART_TXBuffer_PutByte(USART_data_t * usart_data, uint8_t data)
{
 ae2:	1f 93       	push	r17
 ae4:	cf 93       	push	r28
 ae6:	df 93       	push	r29
 ae8:	ec 01       	movw	r28, r24
 aea:	16 2f       	mov	r17, r22
	uint8_t tempTX_Head;
	bool TXBuffer_FreeSpace;
	USART_Buffer_t * TXbufPtr;

	TXbufPtr = &usart_data->buffer;
	TXBuffer_FreeSpace = USART_TXBuffer_FreeSpace(usart_data);
 aec:	0e 94 67 05 	call	0xace	; 0xace <USART_TXBuffer_FreeSpace>


	if(TXBuffer_FreeSpace)
 af0:	88 23       	and	r24, r24
 af2:	79 f0       	breq	.+30     	; 0xb12 <USART_TXBuffer_PutByte+0x30>
	{
	  	tempTX_Head = TXbufPtr->TX_Head;
 af4:	9d 85       	ldd	r25, Y+13	; 0x0d
	  	TXbufPtr->TX[tempTX_Head]= data;
 af6:	fe 01       	movw	r30, r28
 af8:	e9 0f       	add	r30, r25
 afa:	f1 1d       	adc	r31, r1
 afc:	17 83       	std	Z+7, r17	; 0x07
		/* Advance buffer head. */
		TXbufPtr->TX_Head = (tempTX_Head + 1) & USART_TX_BUFFER_MASK;
 afe:	9f 5f       	subi	r25, 0xFF	; 255
 b00:	93 70       	andi	r25, 0x03	; 3
 b02:	9d 87       	std	Y+13, r25	; 0x0d

		/* Enable DRE interrupt. */
		tempCTRLA = usart_data->usart->CTRLA;
 b04:	e8 81       	ld	r30, Y
 b06:	f9 81       	ldd	r31, Y+1	; 0x01
 b08:	93 81       	ldd	r25, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | usart_data->dreIntLevel;
 b0a:	9c 7f       	andi	r25, 0xFC	; 252
 b0c:	2a 81       	ldd	r18, Y+2	; 0x02
 b0e:	92 2b       	or	r25, r18
		usart_data->usart->CTRLA = tempCTRLA;
 b10:	93 83       	std	Z+3, r25	; 0x03
	}
	return TXBuffer_FreeSpace;
}
 b12:	df 91       	pop	r29
 b14:	cf 91       	pop	r28
 b16:	1f 91       	pop	r17
 b18:	08 95       	ret

00000b1a <USART_RXBufferData_Available>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
 b1a:	fc 01       	movw	r30, r24
 b1c:	23 85       	ldd	r18, Z+11	; 0x0b
	uint8_t tempTail = usart_data->buffer.RX_Tail;
 b1e:	94 85       	ldd	r25, Z+12	; 0x0c

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
 b20:	81 e0       	ldi	r24, 0x01	; 1
 b22:	29 13       	cpse	r18, r25
 b24:	01 c0       	rjmp	.+2      	; 0xb28 <USART_RXBufferData_Available+0xe>
 b26:	80 e0       	ldi	r24, 0x00	; 0
}
 b28:	08 95       	ret

00000b2a <USART_RXBuffer_GetByte>:
 *  \param usart_data       The USART_data_t struct instance.
 *
 *  \return         Received data.
 */
uint8_t USART_RXBuffer_GetByte(USART_data_t * usart_data)
{
 b2a:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
 b2c:	a4 85       	ldd	r26, Z+12	; 0x0c
 b2e:	a8 0f       	add	r26, r24
 b30:	b9 2f       	mov	r27, r25
 b32:	b1 1d       	adc	r27, r1
 b34:	13 96       	adiw	r26, 0x03	; 3
 b36:	8c 91       	ld	r24, X

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
 b38:	94 85       	ldd	r25, Z+12	; 0x0c
 b3a:	9f 5f       	subi	r25, 0xFF	; 255
 b3c:	93 70       	andi	r25, 0x03	; 3
 b3e:	94 87       	std	Z+12, r25	; 0x0c

	return ans;
}
 b40:	08 95       	ret

00000b42 <USART_RXComplete>:
 *  Stores received data in RX software buffer.
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
bool USART_RXComplete(USART_data_t * usart_data)
{
 b42:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
 b44:	83 85       	ldd	r24, Z+11	; 0x0b
 b46:	8f 5f       	subi	r24, 0xFF	; 255
 b48:	83 70       	andi	r24, 0x03	; 3

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
 b4a:	24 85       	ldd	r18, Z+12	; 0x0c
	uint8_t data = usart_data->usart->DATA;
 b4c:	a0 81       	ld	r26, Z
 b4e:	b1 81       	ldd	r27, Z+1	; 0x01
 b50:	9c 91       	ld	r25, X

	if (tempRX_Head == tempRX_Tail) {
 b52:	82 17       	cp	r24, r18
 b54:	49 f0       	breq	.+18     	; 0xb68 <USART_RXComplete+0x26>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
 b56:	a3 85       	ldd	r26, Z+11	; 0x0b
 b58:	ae 0f       	add	r26, r30
 b5a:	bf 2f       	mov	r27, r31
 b5c:	b1 1d       	adc	r27, r1
 b5e:	13 96       	adiw	r26, 0x03	; 3
 b60:	9c 93       	st	X, r25
		usart_data->buffer.RX_Head = tempRX_Head;
 b62:	83 87       	std	Z+11, r24	; 0x0b
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
 b64:	81 e0       	ldi	r24, 0x01	; 1
 b66:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
 b68:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
 b6a:	08 95       	ret

00000b6c <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
 b6c:	cf 93       	push	r28
 b6e:	df 93       	push	r29
 b70:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
 b72:	86 85       	ldd	r24, Z+14	; 0x0e
	if (bufPtr->TX_Head == tempTX_Tail){
 b74:	95 85       	ldd	r25, Z+13	; 0x0d
 b76:	a0 81       	ld	r26, Z
 b78:	b1 81       	ldd	r27, Z+1	; 0x01
 b7a:	98 13       	cpse	r25, r24
 b7c:	09 c0       	rjmp	.+18     	; 0xb90 <USART_DataRegEmpty+0x24>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
 b7e:	13 96       	adiw	r26, 0x03	; 3
 b80:	8c 91       	ld	r24, X
 b82:	13 97       	sbiw	r26, 0x03	; 3
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
 b84:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
 b86:	13 96       	adiw	r26, 0x03	; 3
 b88:	8c 93       	st	X, r24
		usart_data->usart->DATA = data;

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
	}
}
 b8a:	df 91       	pop	r29
 b8c:	cf 91       	pop	r28
 b8e:	08 95       	ret
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
		usart_data->usart->CTRLA = tempCTRLA;

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
 b90:	c6 85       	ldd	r28, Z+14	; 0x0e
 b92:	ce 0f       	add	r28, r30
 b94:	df 2f       	mov	r29, r31
 b96:	d1 1d       	adc	r29, r1
 b98:	8f 81       	ldd	r24, Y+7	; 0x07
		usart_data->usart->DATA = data;
 b9a:	8c 93       	st	X, r24

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
 b9c:	86 85       	ldd	r24, Z+14	; 0x0e
 b9e:	8f 5f       	subi	r24, 0xFF	; 255
 ba0:	83 70       	andi	r24, 0x03	; 3
 ba2:	86 87       	std	Z+14, r24	; 0x0e
	}
}
 ba4:	f2 cf       	rjmp	.-28     	; 0xb8a <USART_DataRegEmpty+0x1e>

00000ba6 <USART_NineBits_PutChar>:
 *
 *  \param usart      The USART module.
 *  \param data       The data to send.
 */
void USART_NineBits_PutChar(USART_t * usart, uint16_t data)
{
 ba6:	fc 01       	movw	r30, r24
	if(data & 0x0100) {
		usart->CTRLB |= USART_TXB8_bm;
 ba8:	84 81       	ldd	r24, Z+4	; 0x04
 *  \param usart      The USART module.
 *  \param data       The data to send.
 */
void USART_NineBits_PutChar(USART_t * usart, uint16_t data)
{
	if(data & 0x0100) {
 baa:	70 ff       	sbrs	r23, 0
 bac:	04 c0       	rjmp	.+8      	; 0xbb6 <USART_NineBits_PutChar+0x10>
		usart->CTRLB |= USART_TXB8_bm;
 bae:	81 60       	ori	r24, 0x01	; 1
	}else {
		usart->CTRLB &= ~USART_TXB8_bm;
 bb0:	84 83       	std	Z+4, r24	; 0x04
	}

	usart->DATA = (data & 0x00FF);
 bb2:	60 83       	st	Z, r22
}
 bb4:	08 95       	ret
void USART_NineBits_PutChar(USART_t * usart, uint16_t data)
{
	if(data & 0x0100) {
		usart->CTRLB |= USART_TXB8_bm;
	}else {
		usart->CTRLB &= ~USART_TXB8_bm;
 bb6:	8e 7f       	andi	r24, 0xFE	; 254
 bb8:	fb cf       	rjmp	.-10     	; 0xbb0 <USART_NineBits_PutChar+0xa>

00000bba <USART_NineBits_GetChar>:
 *  \param usart      The USART module.
 *
 *  \retval           Received data.
 */
uint16_t USART_NineBits_GetChar(USART_t * usart)
{
 bba:	fc 01       	movw	r30, r24
	if(usart->CTRLB & USART_RXB8_bm) {
 bbc:	84 81       	ldd	r24, Z+4	; 0x04
 bbe:	80 ff       	sbrs	r24, 0
 bc0:	04 c0       	rjmp	.+8      	; 0xbca <USART_NineBits_GetChar+0x10>
		return(0x0100 | usart->DATA);
 bc2:	80 81       	ld	r24, Z
 bc4:	90 e0       	ldi	r25, 0x00	; 0
 bc6:	91 60       	ori	r25, 0x01	; 1
 bc8:	08 95       	ret
	}else {
		return(usart->DATA);
 bca:	80 81       	ld	r24, Z
 bcc:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 bce:	08 95       	ret

00000bd0 <platform_init>:
#include "hal.h"
#include "xmega_hal.h"

void platform_init(void)
{  
    OSC.XOSCCTRL = 0x00;
 bd0:	10 92 52 00 	sts	0x0052, r1	; 0x800052 <__TEXT_REGION_LENGTH__+0x7de052>
    OSC.PLLCTRL = 0x00;
 bd4:	10 92 55 00 	sts	0x0055, r1	; 0x800055 <__TEXT_REGION_LENGTH__+0x7de055>
    OSC.CTRL |= OSC_XOSCEN_bm;
 bd8:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <__TEXT_REGION_LENGTH__+0x7de050>
 bdc:	88 60       	ori	r24, 0x08	; 8
 bde:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x7de050>
    
    //wait for clock
    while((OSC.STATUS & OSC_XOSCRDY_bm) == 0);
 be2:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7de051>
 be6:	83 ff       	sbrs	r24, 3
 be8:	fc cf       	rjmp	.-8      	; 0xbe2 <platform_init+0x12>
    
    //Switch clock source
    CCP = CCP_IOREG_gc;
 bea:	88 ed       	ldi	r24, 0xD8	; 216
 bec:	84 bf       	out	0x34, r24	; 52
    CLK.CTRL = CLK_SCLKSEL_XOSC_gc;    
 bee:	83 e0       	ldi	r24, 0x03	; 3
 bf0:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x7de040>
    
    //Turn off other sources besides external    
    OSC.CTRL = OSC_XOSCEN_bm;
 bf4:	88 e0       	ldi	r24, 0x08	; 8
 bf6:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x7de050>
    
 #if PLATFORM == CW303
    PORTA.DIRSET = PIN5_bm | PIN6_bm;
    PORTA.OUTSET = PIN5_bm | PIN6_bm;
 #endif
}
 bfa:	08 95       	ret

00000bfc <main>:
	return 0x00;
}

int main(void)
{
    platform_init();
 bfc:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <platform_init>
    init_uart();
 c00:	0e 94 17 05 	call	0xa2e	; 0xa2e <init_uart0>
    trigger_setup();
 c04:	81 e0       	ldi	r24, 0x01	; 1
 c06:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x7de601>
    
    
	simpleserial_init();
 c0a:	0e 94 b9 03 	call	0x772	; 0x772 <simpleserial_init>
    simpleserial_addcmd('k', 16,  get_key);
 c0e:	43 e1       	ldi	r20, 0x13	; 19
 c10:	51 e0       	ldi	r21, 0x01	; 1
 c12:	60 e1       	ldi	r22, 0x10	; 16
 c14:	70 e0       	ldi	r23, 0x00	; 0
 c16:	8b e6       	ldi	r24, 0x6B	; 107
 c18:	0e 94 b6 03 	call	0x76c	; 0x76c <simpleserial_addcmd>
    simpleserial_addcmd('p', 32,  get_pt);
 c1c:	43 e1       	ldi	r20, 0x13	; 19
 c1e:	53 e0       	ldi	r21, 0x03	; 3
 c20:	60 e2       	ldi	r22, 0x20	; 32
 c22:	70 e0       	ldi	r23, 0x00	; 0
 c24:	80 e7       	ldi	r24, 0x70	; 112
 c26:	0e 94 b6 03 	call	0x76c	; 0x76c <simpleserial_addcmd>
    simpleserial_addcmd('x',  0,   reset);
 c2a:	45 e1       	ldi	r20, 0x15	; 21
 c2c:	51 e0       	ldi	r21, 0x01	; 1
 c2e:	70 e0       	ldi	r23, 0x00	; 0
 c30:	60 e0       	ldi	r22, 0x00	; 0
 c32:	88 e7       	ldi	r24, 0x78	; 120
 c34:	0e 94 b6 03 	call	0x76c	; 0x76c <simpleserial_addcmd>
    while(1)
        simpleserial_get();
 c38:	0e 94 54 04 	call	0x8a8	; 0x8a8 <simpleserial_get>
 c3c:	fd cf       	rjmp	.-6      	; 0xc38 <main+0x3c>

00000c3e <_exit>:
 c3e:	f8 94       	cli

00000c40 <__stop_program>:
 c40:	ff cf       	rjmp	.-2      	; 0xc40 <__stop_program>
