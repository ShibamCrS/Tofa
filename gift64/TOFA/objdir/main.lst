   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__CCP__ = 0x34
   7               	__tmp_reg__ = 0
   8               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
  11               		.cfi_sections	.debug_frame
  12               	.global	get_key
  14               	get_key:
  15               	.LFB13:
  16               		.file 1 "main.c"
   1:main.c        **** #include <stdio.h>
   2:main.c        **** #include <stdlib.h>
   3:main.c        **** #include <string.h>
   4:main.c        **** #include <stdint.h>
   5:main.c        **** #include "gift64.h"
   6:main.c        **** #include "hal.h"
   7:main.c        **** #include "simpleserial.h"
   8:main.c        **** 
   9:main.c        **** 
  10:main.c        **** 
  11:main.c        **** 
  12:main.c        **** uint8_t msg_copy[16],msg1_copy[16];
  13:main.c        **** uint8_t K[32] = { 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 15, 14, 13, 12, 11, 10, 9, 
  14:main.c        **** 
  15:main.c        **** uint8_t get_key(uint8_t* k)
  16:main.c        **** {
  17               		.loc 1 16 0
  18               		.cfi_startproc
  19               	.LVL0:
  20               	/* prologue: function */
  21               	/* frame size = 0 */
  22               	/* stack size = 0 */
  23               	.L__stack_usage = 0
  17:main.c        **** 	//ignore the input k and use pre-defined key
  18:main.c        **** 
  19:main.c        **** 	return 0x00;
  20:main.c        **** }
  24               		.loc 1 20 0
  25 0000 80E0      		ldi r24,0
  26               	.LVL1:
  27               	/* epilogue start */
  28 0002 0895      		ret
  29               		.cfi_endproc
  30               	.LFE13:
  32               	.global	reset
  34               	reset:
  35               	.LFB18:
  36               		.cfi_startproc
  37               	/* prologue: function */
  38               	/* frame size = 0 */
  39               	/* stack size = 0 */
  40               	.L__stack_usage = 0
  41 0004 80E0      		ldi r24,0
  42               	/* epilogue start */
  43 0006 0895      		ret
  44               		.cfi_endproc
  45               	.LFE18:
  47               	.global	enc64
  49               	enc64:
  50               	.LFB12:
  51               		.file 2 "gift64.h"
   1:gift64.h      **** #include "hal.h"
   2:gift64.h      **** #include "simpleserial.h"
   3:gift64.h      **** //Sbox
   4:gift64.h      **** const uint8_t GIFT_S[16] = { 1,10, 4,12, 6,15, 3, 9, 2,13,11, 7, 5, 0, 8,14};
   5:gift64.h      **** const uint8_t GIFT_S_inv[16] = {13, 0, 8, 6, 2,12, 4,11,14, 7, 1,10, 3, 9,15, 5};
   6:gift64.h      **** 
   7:gift64.h      **** 
   8:gift64.h      **** //bit permutation
   9:gift64.h      **** const uint8_t GIFT_P[]={
  10:gift64.h      **** /* Block size = 64 */
  11:gift64.h      ****   0, 17, 34, 51, 48,  1, 18, 35, 32, 49,  2, 19, 16, 33, 50,  3,
  12:gift64.h      ****   4, 21, 38, 55, 52,  5, 22, 39, 36, 53,  6, 23, 20, 37, 54,  7,
  13:gift64.h      ****   8, 25, 42, 59, 56,  9, 26, 43, 40, 57, 10, 27, 24, 41, 58, 11,
  14:gift64.h      ****  12, 29, 46, 63, 60, 13, 30, 47, 44, 61, 14, 31, 28, 45, 62, 15
  15:gift64.h      **** };
  16:gift64.h      **** 
  17:gift64.h      **** const uint8_t GIFT_P_inv[]={
  18:gift64.h      **** /* Block size = 64 */
  19:gift64.h      ****   0,  5, 10, 15, 16, 21, 26, 31, 32, 37, 42, 47, 48, 53, 58, 63,
  20:gift64.h      ****  12,  1,  6, 11, 28, 17, 22, 27, 44, 33, 38, 43, 60, 49, 54, 59,
  21:gift64.h      ****   8, 13,  2,  7, 24, 29, 18, 23, 40, 45, 34, 39, 56, 61, 50, 55,
  22:gift64.h      ****   4,  9, 14,  3, 20, 25, 30, 19, 36, 41, 46, 35, 52, 57, 62, 51
  23:gift64.h      **** };
  24:gift64.h      **** 
  25:gift64.h      **** 
  26:gift64.h      **** // round constants
  27:gift64.h      **** const uint8_t GIFT_RC[62] = {
  28:gift64.h      ****     0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3E, 0x3D, 0x3B, 0x37, 0x2F,
  29:gift64.h      ****     0x1E, 0x3C, 0x39, 0x33, 0x27, 0x0E, 0x1D, 0x3A, 0x35, 0x2B,
  30:gift64.h      ****     0x16, 0x2C, 0x18, 0x30, 0x21, 0x02, 0x05, 0x0B, 0x17, 0x2E,
  31:gift64.h      ****     0x1C, 0x38, 0x31, 0x23, 0x06, 0x0D, 0x1B, 0x36, 0x2D, 0x1A,
  32:gift64.h      ****     0x34, 0x29, 0x12, 0x24, 0x08, 0x11, 0x22, 0x04, 0x09, 0x13,
  33:gift64.h      ****     0x26, 0x0c, 0x19, 0x32, 0x25, 0x0a, 0x15, 0x2a, 0x14, 0x28,
  34:gift64.h      ****     0x10, 0x20
  35:gift64.h      **** };
  36:gift64.h      **** 
  37:gift64.h      **** 
  38:gift64.h      **** void enc64(uint8_t* input, uint8_t* masterkey, int no_of_rounds, bool print_details){
  52               		.loc 2 38 0
  53               		.cfi_startproc
  54               	.LVL2:
  55               		.loc 2 38 0
  56 0008 2F92      		push r2
  57               	.LCFI0:
  58               		.cfi_def_cfa_offset 4
  59               		.cfi_offset 2, -3
  60 000a 3F92      		push r3
  61               	.LCFI1:
  62               		.cfi_def_cfa_offset 5
  63               		.cfi_offset 3, -4
  64 000c 4F92      		push r4
  65               	.LCFI2:
  66               		.cfi_def_cfa_offset 6
  67               		.cfi_offset 4, -5
  68 000e 5F92      		push r5
  69               	.LCFI3:
  70               		.cfi_def_cfa_offset 7
  71               		.cfi_offset 5, -6
  72 0010 6F92      		push r6
  73               	.LCFI4:
  74               		.cfi_def_cfa_offset 8
  75               		.cfi_offset 6, -7
  76 0012 7F92      		push r7
  77               	.LCFI5:
  78               		.cfi_def_cfa_offset 9
  79               		.cfi_offset 7, -8
  80 0014 8F92      		push r8
  81               	.LCFI6:
  82               		.cfi_def_cfa_offset 10
  83               		.cfi_offset 8, -9
  84 0016 9F92      		push r9
  85               	.LCFI7:
  86               		.cfi_def_cfa_offset 11
  87               		.cfi_offset 9, -10
  88 0018 AF92      		push r10
  89               	.LCFI8:
  90               		.cfi_def_cfa_offset 12
  91               		.cfi_offset 10, -11
  92 001a BF92      		push r11
  93               	.LCFI9:
  94               		.cfi_def_cfa_offset 13
  95               		.cfi_offset 11, -12
  96 001c CF92      		push r12
  97               	.LCFI10:
  98               		.cfi_def_cfa_offset 14
  99               		.cfi_offset 12, -13
 100 001e DF92      		push r13
 101               	.LCFI11:
 102               		.cfi_def_cfa_offset 15
 103               		.cfi_offset 13, -14
 104 0020 EF92      		push r14
 105               	.LCFI12:
 106               		.cfi_def_cfa_offset 16
 107               		.cfi_offset 14, -15
 108 0022 FF92      		push r15
 109               	.LCFI13:
 110               		.cfi_def_cfa_offset 17
 111               		.cfi_offset 15, -16
 112 0024 0F93      		push r16
 113               	.LCFI14:
 114               		.cfi_def_cfa_offset 18
 115               		.cfi_offset 16, -17
 116 0026 1F93      		push r17
 117               	.LCFI15:
 118               		.cfi_def_cfa_offset 19
 119               		.cfi_offset 17, -18
 120 0028 CF93      		push r28
 121               	.LCFI16:
 122               		.cfi_def_cfa_offset 20
 123               		.cfi_offset 28, -19
 124 002a DF93      		push r29
 125               	.LCFI17:
 126               		.cfi_def_cfa_offset 21
 127               		.cfi_offset 29, -20
 128 002c CDB7      		in r28,__SP_L__
 129 002e DEB7      		in r29,__SP_H__
 130               	.LCFI18:
 131               		.cfi_def_cfa_register 28
 132 0030 C654      		subi r28,70
 133 0032 D140      		sbci r29,1
 134               	.LCFI19:
 135               		.cfi_def_cfa_offset 347
 136 0034 CDBF      		out __SP_L__,r28
 137 0036 DEBF      		out __SP_H__,r29
 138               	/* prologue: function */
 139               	/* frame size = 326 */
 140               	/* stack size = 344 */
 141               	.L__stack_usage = 344
 142 0038 2A01      		movw r4,r20
 143               	.LVL3:
 144 003a FB01      		movw r30,r22
 145 003c 9B01      		movw r18,r22
 146               	.LVL4:
 147 003e 205E      		subi r18,-32
 148 0040 3F4F      		sbci r19,-1
 149               		.loc 2 38 0
 150 0042 DE01      		movw r26,r28
 151 0044 AF5D      		subi r26,-33
 152 0046 BE4F      		sbci r27,-2
 153               	.LVL5:
 154               	.L4:
 155               	.LBB2:
  39:gift64.h      ****     uint8_t key[32];
  40:gift64.h      ****     for (uint8_t i=0; i<32;i++){
  41:gift64.h      ****         key[i] = masterkey[i];
 156               		.loc 2 41 0 discriminator 3
 157 0048 4191      		ld r20,Z+
 158               	.LVL6:
 159 004a 4D93      		st X+,r20
 160               	.LVL7:
  40:gift64.h      ****         key[i] = masterkey[i];
 161               		.loc 2 40 0 discriminator 3
 162 004c E217      		cp r30,r18
 163 004e F307      		cpc r31,r19
 164 0050 01F4      		brne .L4
 165               	.LBE2:
 166               	.LBB3:
  42:gift64.h      ****     }
  43:gift64.h      **** 
  44:gift64.h      ****     uint8_t bits[64], perm_bits[64];
  45:gift64.h      ****     uint8_t key_bits[128];
  46:gift64.h      ****     uint8_t temp_key[32];
  47:gift64.h      ****     for (uint8_t r=0; r<no_of_rounds; r++){
 167               		.loc 2 47 0
 168 0052 20E0      		ldi r18,0
 169 0054 AC01      		movw r20,r24
 170 0056 405F      		subi r20,-16
 171 0058 5F4F      		sbci r21,-1
 172 005a CF5B      		subi r28,lo8(-321)
 173 005c DE4F      		sbci r29,hi8(-321)
 174 005e 4883      		st Y,r20
 175 0060 5983      		std Y+1,r21
 176 0062 C154      		subi r28,lo8(321)
 177 0064 D140      		sbci r29,hi8(321)
 178 0066 61E2      		ldi r22,lo8(33)
 179 0068 71E0      		ldi r23,lo8(1)
 180               	.LVL8:
 181 006a 6C0F      		add r22,r28
 182 006c 7D1F      		adc r23,r29
 183 006e 605E      		subi r22,-32
 184 0070 7F4F      		sbci r23,-1
 185 0072 CD5B      		subi r28,lo8(-323)
 186 0074 DE4F      		sbci r29,hi8(-323)
 187 0076 6883      		st Y,r22
 188 0078 7983      		std Y+1,r23
 189 007a C354      		subi r28,lo8(323)
 190 007c D140      		sbci r29,hi8(323)
 191               	.LVL9:
 192               	.L5:
 193               		.loc 2 47 0 is_stmt 0 discriminator 1
 194 007e 622E      		mov r6,r18
 195 0080 712C      		mov r7,__zero_reg__
 196 0082 6414      		cp r6,r4
 197 0084 7504      		cpc r7,r5
 198 0086 04F0      		brlt .L25
 199               	/* epilogue start */
 200               	.LBE3:
  48:gift64.h      ****     
  49:gift64.h      ****     if(r==23) trigger_high();
  50:gift64.h      **** 
  51:gift64.h      ****         //SubCells
  52:gift64.h      ****         for (uint8_t i=0; i<16; i++){
  53:gift64.h      ****             input[i] = GIFT_S[input[i]];
  54:gift64.h      ****         }
  55:gift64.h      ****     if(r==23) trigger_low();
  56:gift64.h      **** 
  57:gift64.h      ****         //PermBits
  58:gift64.h      ****         //input to bits
  59:gift64.h      ****         for (uint8_t i=0; i<16; i++){
  60:gift64.h      ****             for (uint8_t j=0; j<4; j++){
  61:gift64.h      ****                 bits[4*i+j] = (input[i] >> j) & 0x1;
  62:gift64.h      ****             }
  63:gift64.h      ****         }
  64:gift64.h      ****         //permute the bits
  65:gift64.h      ****         for (uint8_t i=0; i<64; i++){
  66:gift64.h      ****             perm_bits[GIFT_P[i]] = bits[i];
  67:gift64.h      ****         }
  68:gift64.h      ****         //perm_bits to input
  69:gift64.h      ****         for (uint8_t i=0; i<16; i++){
  70:gift64.h      ****             input[i]=0;
  71:gift64.h      ****             for (uint8_t j=0; j<4; j++){
  72:gift64.h      ****                  input[i] ^= perm_bits[4*i+j] << j;
  73:gift64.h      ****             }
  74:gift64.h      ****         }
  75:gift64.h      ****          
  76:gift64.h      **** 
  77:gift64.h      ****         //AddRoundKey
  78:gift64.h      ****         //input to bits
  79:gift64.h      ****         for (uint8_t i=0; i<16; i++){
  80:gift64.h      ****             for (uint8_t j=0; j<4; j++){
  81:gift64.h      ****                 bits[4*i+j] = (input[i] >> j) & 0x1;
  82:gift64.h      ****             }
  83:gift64.h      ****         }
  84:gift64.h      ****         //key to key_bits
  85:gift64.h      ****         for (uint8_t i=0; i<32; i++){
  86:gift64.h      ****             for (int j=0; j<4; j++){
  87:gift64.h      ****                 key_bits[4*i+j] = (key[i] >> j) & 0x1;
  88:gift64.h      ****             }
  89:gift64.h      ****         }
  90:gift64.h      **** 
  91:gift64.h      ****         //add round key
  92:gift64.h      ****         uint8_t kbc=0;  //key_bit_counter
  93:gift64.h      ****         for (uint8_t  i=0; i<16; i++){
  94:gift64.h      ****             bits[4*i] ^= key_bits[kbc];
  95:gift64.h      ****             bits[4*i+1] ^= key_bits[kbc+16];
  96:gift64.h      ****             kbc++;
  97:gift64.h      ****         }
  98:gift64.h      **** 
  99:gift64.h      ****         //add constant
 100:gift64.h      ****         bits[3] ^= GIFT_RC[r] & 0x1;
 101:gift64.h      ****         bits[7] ^= (GIFT_RC[r]>>1) & 0x1;
 102:gift64.h      ****         bits[11] ^= (GIFT_RC[r]>>2) & 0x1;
 103:gift64.h      ****         bits[15] ^= (GIFT_RC[r]>>3) & 0x1;
 104:gift64.h      ****         bits[19] ^= (GIFT_RC[r]>>4) & 0x1;
 105:gift64.h      ****         bits[23] ^= (GIFT_RC[r]>>5) & 0x1;
 106:gift64.h      ****         bits[63] ^= 1;
 107:gift64.h      **** 
 108:gift64.h      ****         //bits to input
 109:gift64.h      ****         for (uint8_t  i=0; i<16; i++){
 110:gift64.h      ****             input[i]=0;
 111:gift64.h      ****             for (uint8_t  j=0; j<4; j++){
 112:gift64.h      ****                  input[i] ^= bits[4*i+j] << j;
 113:gift64.h      ****             }
 114:gift64.h      ****         }
 115:gift64.h      **** 
 116:gift64.h      ****         //key update
 117:gift64.h      ****         //entire key>>32
 118:gift64.h      ****         for(uint8_t  i=0; i<32; i++){
 119:gift64.h      ****             temp_key[i] = key[(i+8)%32];
 120:gift64.h      ****         }
 121:gift64.h      ****         for(uint8_t i=0; i<24; i++) key[i] = temp_key[i];
 122:gift64.h      ****         //k0>>12
 123:gift64.h      ****         key[24] = temp_key[27];
 124:gift64.h      ****         key[25] = temp_key[24];
 125:gift64.h      ****         key[26] = temp_key[25];
 126:gift64.h      ****         key[27] = temp_key[26];
 127:gift64.h      ****         //k1>>2
 128:gift64.h      ****         key[28] = ((temp_key[28]&0xc)>>2) ^ ((temp_key[29]&0x3)<<2);
 129:gift64.h      ****         key[29] = ((temp_key[29]&0xc)>>2) ^ ((temp_key[30]&0x3)<<2);
 130:gift64.h      ****         key[30] = ((temp_key[30]&0xc)>>2) ^ ((temp_key[31]&0x3)<<2);
 131:gift64.h      ****         key[31] = ((temp_key[31]&0xc)>>2) ^ ((temp_key[28]&0x3)<<2);
 132:gift64.h      ****     }
 133:gift64.h      ****    
 134:gift64.h      **** 
 135:gift64.h      ****     return;
 136:gift64.h      **** }
 201               		.loc 2 136 0 is_stmt 1
 202 0088 CA5B      		subi r28,-70
 203 008a DE4F      		sbci r29,-2
 204 008c CDBF      		out __SP_L__,r28
 205 008e DEBF      		out __SP_H__,r29
 206 0090 DF91      		pop r29
 207 0092 CF91      		pop r28
 208 0094 1F91      		pop r17
 209 0096 0F91      		pop r16
 210 0098 FF90      		pop r15
 211 009a EF90      		pop r14
 212 009c DF90      		pop r13
 213 009e CF90      		pop r12
 214 00a0 BF90      		pop r11
 215 00a2 AF90      		pop r10
 216 00a4 9F90      		pop r9
 217 00a6 8F90      		pop r8
 218 00a8 7F90      		pop r7
 219 00aa 6F90      		pop r6
 220 00ac 5F90      		pop r5
 221 00ae 4F90      		pop r4
 222               	.LVL10:
 223 00b0 3F90      		pop r3
 224 00b2 2F90      		pop r2
 225 00b4 0895      		ret
 226               	.LVL11:
 227               	.L25:
 228               	.LBB21:
 229               	.LBB4:
  49:gift64.h      **** 
 230               		.loc 2 49 0
 231 00b6 2731      		cpi r18,lo8(23)
 232 00b8 01F4      		brne .L6
  49:gift64.h      **** 
 233               		.loc 2 49 0 is_stmt 0 discriminator 1
 234 00ba 71E0      		ldi r23,lo8(1)
 235 00bc 7093 0506 		sts 1541,r23
 236               	.L6:
 237 00c0 4C01      		movw r8,r24
 238               	.LBE4:
 239               	.LBE21:
  38:gift64.h      ****     uint8_t key[32];
 240               		.loc 2 38 0 is_stmt 1 discriminator 3
 241 00c2 AC01      		movw r20,r24
 242               	.LVL12:
 243               	.L7:
 244               	.LBB22:
 245               	.LBB20:
 246               	.LBB5:
  53:gift64.h      ****         }
 247               		.loc 2 53 0 discriminator 3
 248 00c4 DA01      		movw r26,r20
 249 00c6 ED91      		ld r30,X+
 250 00c8 AD01      		movw r20,r26
 251               	.LVL13:
 252 00ca 1197      		sbiw r26,1
 253 00cc F0E0      		ldi r31,0
 254 00ce E050      		subi r30,lo8(-(GIFT_S))
 255 00d0 F040      		sbci r31,hi8(-(GIFT_S))
 256 00d2 6081      		ld r22,Z
 257 00d4 6C93      		st X,r22
 258               	.LVL14:
  52:gift64.h      ****             input[i] = GIFT_S[input[i]];
 259               		.loc 2 52 0 discriminator 3
 260 00d6 CF5B      		subi r28,lo8(-321)
 261 00d8 DE4F      		sbci r29,hi8(-321)
 262 00da E880      		ld r14,Y
 263 00dc F980      		ldd r15,Y+1
 264 00de C154      		subi r28,lo8(321)
 265 00e0 D140      		sbci r29,hi8(321)
 266 00e2 4E15      		cp r20,r14
 267 00e4 5F05      		cpc r21,r15
 268 00e6 01F4      		brne .L7
 269               	.LBE5:
  55:gift64.h      **** 
 270               		.loc 2 55 0
 271 00e8 2731      		cpi r18,lo8(23)
 272 00ea 01F4      		brne .L8
  55:gift64.h      **** 
 273               		.loc 2 55 0 is_stmt 0 discriminator 1
 274 00ec FF24      		clr r15
 275 00ee F394      		inc r15
 276 00f0 F092 0606 		sts 1542,r15
 277               	.L8:
 278 00f4 FE01      		movw r30,r28
 279 00f6 EF53      		subi r30,63
 280 00f8 FF4F      		sbci r31,-1
 281               	.LBB6:
 282               	.LBB7:
  61:gift64.h      ****             }
 283               		.loc 2 61 0 is_stmt 1
 284 00fa 8F01      		movw r16,r30
 285 00fc CB5B      		subi r28,lo8(-325)
 286 00fe DE4F      		sbci r29,hi8(-325)
 287 0100 8883      		st Y,r24
 288 0102 9983      		std Y+1,r25
 289 0104 C554      		subi r28,lo8(325)
 290 0106 D140      		sbci r29,hi8(325)
 291               	.L10:
 292               	.LVL15:
 293 0108 CB5B      		subi r28,lo8(-325)
 294 010a DE4F      		sbci r29,hi8(-325)
 295 010c A881      		ld r26,Y
 296 010e B981      		ldd r27,Y+1
 297 0110 C554      		subi r28,lo8(325)
 298 0112 D140      		sbci r29,hi8(325)
 299 0114 ED90      		ld r14,X+
 300 0116 CB5B      		subi r28,lo8(-325)
 301 0118 DE4F      		sbci r29,hi8(-325)
 302 011a A883      		st Y,r26
 303 011c B983      		std Y+1,r27
 304 011e C554      		subi r28,lo8(325)
 305 0120 D140      		sbci r29,hi8(325)
 306               	.LVL16:
 307 0122 F12C      		mov r15,__zero_reg__
 308 0124 5801      		movw r10,r16
 309 0126 70E0      		ldi r23,0
 310 0128 60E0      		ldi r22,0
 311               	.LVL17:
 312               	.L9:
  61:gift64.h      ****             }
 313               		.loc 2 61 0 is_stmt 0 discriminator 3
 314 012a 6701      		movw r12,r14
 315 012c 062E      		mov r0,r22
 316 012e 00C0      		rjmp 2f
 317               		1:
 318 0130 D594      		asr r13
 319 0132 C794      		ror r12
 320               		2:
 321 0134 0A94      		dec r0
 322 0136 02F4      		brpl 1b
 323 0138 3C2D      		mov r19,r12
 324 013a 3170      		andi r19,lo8(1)
 325 013c D501      		movw r26,r10
 326 013e 3D93      		st X+,r19
 327 0140 5D01      		movw r10,r26
 328               	.LVL18:
 329 0142 6F5F      		subi r22,-1
 330 0144 7F4F      		sbci r23,-1
 331               	.LVL19:
  60:gift64.h      ****                 bits[4*i+j] = (input[i] >> j) & 0x1;
 332               		.loc 2 60 0 is_stmt 1 discriminator 3
 333 0146 6430      		cpi r22,4
 334 0148 7105      		cpc r23,__zero_reg__
 335 014a 01F4      		brne .L9
 336               	.LVL20:
 337 014c 0C5F      		subi r16,-4
 338 014e 1F4F      		sbci r17,-1
 339               	.LBE7:
  59:gift64.h      ****             for (uint8_t j=0; j<4; j++){
 340               		.loc 2 59 0 discriminator 2
 341 0150 CB5B      		subi r28,lo8(-325)
 342 0152 DE4F      		sbci r29,hi8(-325)
 343 0154 E880      		ld r14,Y
 344 0156 F980      		ldd r15,Y+1
 345 0158 C554      		subi r28,lo8(325)
 346 015a D140      		sbci r29,hi8(325)
 347 015c E416      		cp r14,r20
 348 015e F506      		cpc r15,r21
 349 0160 01F4      		brne .L10
 350 0162 40E0      		ldi r20,lo8(GIFT_P)
 351 0164 50E0      		ldi r21,hi8(GIFT_P)
 352               	.LVL21:
  59:gift64.h      ****             for (uint8_t j=0; j<4; j++){
 353               		.loc 2 59 0 is_stmt 0
 354 0166 8F01      		movw r16,r30
 355               	.LVL22:
 356               	.L12:
 357               	.LBE6:
 358               	.LBB8:
  66:gift64.h      ****         }
 359               		.loc 2 66 0 is_stmt 1 discriminator 3
 360 0168 DA01      		movw r26,r20
 361 016a 6D91      		ld r22,X+
 362 016c AD01      		movw r20,r26
 363               	.LVL23:
 364 016e D801      		movw r26,r16
 365 0170 FD90      		ld r15,X+
 366 0172 8D01      		movw r16,r26
 367 0174 A1E8      		ldi r26,lo8(-127)
 368 0176 B0E0      		ldi r27,0
 369 0178 AC0F      		add r26,r28
 370 017a BD1F      		adc r27,r29
 371 017c A60F      		add r26,r22
 372 017e B11D      		adc r27,__zero_reg__
 373 0180 FC92      		st X,r15
 374               	.LVL24:
  65:gift64.h      ****             perm_bits[GIFT_P[i]] = bits[i];
 375               		.loc 2 65 0 discriminator 3
 376 0182 B0E0      		ldi r27,hi8(GIFT_P+64)
 377 0184 4030      		cpi r20,lo8(GIFT_P+64)
 378 0186 5B07      		cpc r21,r27
 379 0188 01F4      		brne .L12
 380 018a AE01      		movw r20,r28
 381               	.LVL25:
 382 018c 4F57      		subi r20,127
 383 018e 5F4F      		sbci r21,-1
 384 0190 7A01      		movw r14,r20
  65:gift64.h      ****             perm_bits[GIFT_P[i]] = bits[i];
 385               		.loc 2 65 0 is_stmt 0
 386 0192 BC01      		movw r22,r24
 387               	.L14:
 388               	.LVL26:
 389               	.LBE8:
 390               	.LBB9:
  70:gift64.h      ****             for (uint8_t j=0; j<4; j++){
 391               		.loc 2 70 0 is_stmt 1
 392 0194 DB01      		movw r26,r22
 393 0196 1D92      		st X+,__zero_reg__
 394 0198 BD01      		movw r22,r26
 395               	.LVL27:
 396 019a 6701      		movw r12,r14
 397 019c 10E0      		ldi r17,0
 398 019e 00E0      		ldi r16,0
 399 01a0 B12C      		mov r11,__zero_reg__
 400               	.LVL28:
 401               	.L13:
 402               	.LBB10:
  72:gift64.h      ****             }
 403               		.loc 2 72 0 discriminator 3
 404 01a2 D601      		movw r26,r12
 405 01a4 4D91      		ld r20,X+
 406 01a6 6D01      		movw r12,r26
 407 01a8 002E      		mov r0,r16
 408 01aa 00C0      		rjmp 2f
 409               		1:
 410 01ac 440F      		lsl r20
 411               		2:
 412 01ae 0A94      		dec r0
 413 01b0 02F4      		brpl 1b
 414 01b2 B426      		eor r11,r20
 415               	.LVL29:
 416 01b4 0F5F      		subi r16,-1
 417 01b6 1F4F      		sbci r17,-1
 418               	.LVL30:
  71:gift64.h      ****                  input[i] ^= perm_bits[4*i+j] << j;
 419               		.loc 2 71 0 discriminator 3
 420 01b8 0430      		cpi r16,4
 421 01ba 1105      		cpc r17,__zero_reg__
 422 01bc 01F4      		brne .L13
 423 01be AB01      		movw r20,r22
 424 01c0 4150      		subi r20,1
 425 01c2 5109      		sbc r21,__zero_reg__
 426 01c4 DA01      		movw r26,r20
 427 01c6 BC92      		st X,r11
 428               	.LVL31:
 429 01c8 B4E0      		ldi r27,4
 430 01ca EB0E      		add r14,r27
 431 01cc F11C      		adc r15,__zero_reg__
 432               	.LBE10:
  69:gift64.h      ****             input[i]=0;
 433               		.loc 2 69 0 discriminator 2
 434 01ce CB5B      		subi r28,lo8(-325)
 435 01d0 DE4F      		sbci r29,hi8(-325)
 436 01d2 4881      		ld r20,Y
 437 01d4 5981      		ldd r21,Y+1
 438 01d6 C554      		subi r28,lo8(325)
 439 01d8 D140      		sbci r29,hi8(325)
 440 01da 6417      		cp r22,r20
 441 01dc 7507      		cpc r23,r21
 442 01de 01F4      		brne .L14
 443 01e0 BF01      		movw r22,r30
 444               	.LVL32:
 445 01e2 7C01      		movw r14,r24
 446               	.LVL33:
 447               	.L15:
 448               	.LBE9:
 449               	.LBB11:
 450               	.LBB12:
  81:gift64.h      ****             }
 451               		.loc 2 81 0
 452 01e4 D701      		movw r26,r14
 453 01e6 0D91      		ld r16,X+
 454 01e8 7D01      		movw r14,r26
 455               	.LVL34:
 456 01ea 10E0      		ldi r17,0
 457 01ec 5B01      		movw r10,r22
 458 01ee 50E0      		ldi r21,0
 459 01f0 40E0      		ldi r20,0
 460               	.LVL35:
 461               	.L16:
  81:gift64.h      ****             }
 462               		.loc 2 81 0 is_stmt 0 discriminator 3
 463 01f2 6801      		movw r12,r16
 464 01f4 042E      		mov r0,r20
 465 01f6 00C0      		rjmp 2f
 466               		1:
 467 01f8 D594      		asr r13
 468 01fa C794      		ror r12
 469               		2:
 470 01fc 0A94      		dec r0
 471 01fe 02F4      		brpl 1b
 472 0200 AC2D      		mov r26,r12
 473 0202 A170      		andi r26,lo8(1)
 474 0204 CA2E      		mov r12,r26
 475 0206 D501      		movw r26,r10
 476 0208 CD92      		st X+,r12
 477 020a 5D01      		movw r10,r26
 478               	.LVL36:
 479 020c 4F5F      		subi r20,-1
 480 020e 5F4F      		sbci r21,-1
 481               	.LVL37:
  80:gift64.h      ****                 bits[4*i+j] = (input[i] >> j) & 0x1;
 482               		.loc 2 80 0 is_stmt 1 discriminator 3
 483 0210 4430      		cpi r20,4
 484 0212 5105      		cpc r21,__zero_reg__
 485 0214 01F4      		brne .L16
 486               	.LVL38:
 487 0216 6C5F      		subi r22,-4
 488 0218 7F4F      		sbci r23,-1
 489               	.LBE12:
  79:gift64.h      ****             for (uint8_t j=0; j<4; j++){
 490               		.loc 2 79 0 discriminator 2
 491 021a CB5B      		subi r28,lo8(-325)
 492 021c DE4F      		sbci r29,hi8(-325)
 493 021e 4881      		ld r20,Y
 494 0220 5981      		ldd r21,Y+1
 495 0222 C554      		subi r28,lo8(325)
 496 0224 D140      		sbci r29,hi8(325)
 497               	.LVL39:
 498 0226 E416      		cp r14,r20
 499 0228 F506      		cpc r15,r21
 500 022a 01F4      		brne .L15
 501 022c AE01      		movw r20,r28
 502 022e 4F5F      		subi r20,-1
 503 0230 5F4F      		sbci r21,-1
  79:gift64.h      ****             for (uint8_t j=0; j<4; j++){
 504               		.loc 2 79 0 is_stmt 0
 505 0232 6A01      		movw r12,r20
 506 0234 8E01      		movw r16,r28
 507 0236 0F5D      		subi r16,-33
 508 0238 1E4F      		sbci r17,-2
 509               	.LVL40:
 510               	.L17:
 511               	.LBE11:
 512               	.LBB13:
 513               	.LBB14:
  87:gift64.h      ****             }
 514               		.loc 2 87 0 is_stmt 1
 515 023a D801      		movw r26,r16
 516 023c 2D90      		ld r2,X+
 517 023e 8D01      		movw r16,r26
 518 0240 312C      		mov r3,__zero_reg__
 519 0242 5601      		movw r10,r12
  86:gift64.h      ****                 key_bits[4*i+j] = (key[i] >> j) & 0x1;
 520               		.loc 2 86 0
 521 0244 70E0      		ldi r23,0
 522 0246 60E0      		ldi r22,0
 523               	.LVL41:
 524               	.L18:
  87:gift64.h      ****             }
 525               		.loc 2 87 0 discriminator 3
 526 0248 7101      		movw r14,r2
 527 024a 062E      		mov r0,r22
 528 024c 00C0      		rjmp 2f
 529               		1:
 530 024e F594      		asr r15
 531 0250 E794      		ror r14
 532               		2:
 533 0252 0A94      		dec r0
 534 0254 02F4      		brpl 1b
 535 0256 BE2D      		mov r27,r14
 536 0258 B170      		andi r27,lo8(1)
 537 025a EB2E      		mov r14,r27
 538 025c D501      		movw r26,r10
 539 025e ED92      		st X+,r14
 540 0260 5D01      		movw r10,r26
  86:gift64.h      ****                 key_bits[4*i+j] = (key[i] >> j) & 0x1;
 541               		.loc 2 86 0 discriminator 3
 542 0262 6F5F      		subi r22,-1
 543 0264 7F4F      		sbci r23,-1
 544               	.LVL42:
 545 0266 6430      		cpi r22,4
 546 0268 7105      		cpc r23,__zero_reg__
 547 026a 01F4      		brne .L18
 548               	.LVL43:
 549 026c B4E0      		ldi r27,4
 550 026e CB0E      		add r12,r27
 551 0270 D11C      		adc r13,__zero_reg__
 552               	.LBE14:
  85:gift64.h      ****             for (int j=0; j<4; j++){
 553               		.loc 2 85 0 discriminator 2
 554 0272 CD5B      		subi r28,lo8(-323)
 555 0274 DE4F      		sbci r29,hi8(-323)
 556 0276 E880      		ld r14,Y
 557 0278 F980      		ldd r15,Y+1
 558 027a C354      		subi r28,lo8(323)
 559 027c D140      		sbci r29,hi8(323)
 560 027e E016      		cp r14,r16
 561 0280 F106      		cpc r15,r17
 562 0282 01F4      		brne .L17
 563 0284 8F01      		movw r16,r30
 564 0286 005C      		subi r16,-64
 565 0288 1F4F      		sbci r17,-1
  85:gift64.h      ****             for (int j=0; j<4; j++){
 566               		.loc 2 85 0 is_stmt 0
 567 028a BF01      		movw r22,r30
 568               	.LVL44:
 569               	.L20:
 570               	.LBE13:
 571               	.LBB15:
  94:gift64.h      ****             bits[4*i+1] ^= key_bits[kbc+16];
 572               		.loc 2 94 0 is_stmt 1 discriminator 3
 573 028c DA01      		movw r26,r20
 574 028e ED90      		ld r14,X+
 575 0290 AD01      		movw r20,r26
 576 0292 DB01      		movw r26,r22
 577 0294 FC90      		ld r15,X
 578 0296 FE24      		eor r15,r14
 579 0298 FC92      		st X,r15
  95:gift64.h      ****             kbc++;
 580               		.loc 2 95 0 discriminator 3
 581 029a 1196      		adiw r26,1
 582 029c FC90      		ld r15,X
 583 029e DA01      		movw r26,r20
 584 02a0 1F96      		adiw r26,15
 585 02a2 EC90      		ld r14,X
 586 02a4 FE24      		eor r15,r14
 587 02a6 DB01      		movw r26,r22
 588 02a8 1196      		adiw r26,1
 589 02aa FC92      		st X,r15
 590 02ac 6C5F      		subi r22,-4
 591 02ae 7F4F      		sbci r23,-1
  93:gift64.h      ****             bits[4*i] ^= key_bits[kbc];
 592               		.loc 2 93 0 discriminator 3
 593 02b0 0617      		cp r16,r22
 594 02b2 1707      		cpc r17,r23
 595 02b4 01F4      		brne .L20
 596               	.LBE15:
 100:gift64.h      ****         bits[7] ^= (GIFT_RC[r]>>1) & 0x1;
 597               		.loc 2 100 0
 598 02b6 A301      		movw r20,r6
 599 02b8 4050      		subi r20,lo8(-(GIFT_RC))
 600 02ba 5040      		sbci r21,hi8(-(GIFT_RC))
 601 02bc DA01      		movw r26,r20
 602 02be 4C91      		ld r20,X
 603 02c0 642F      		mov r22,r20
 604 02c2 6170      		andi r22,lo8(1)
 605 02c4 5381      		ldd r21,Z+3
 606 02c6 5627      		eor r21,r22
 607 02c8 5383      		std Z+3,r21
 101:gift64.h      ****         bits[11] ^= (GIFT_RC[r]>>2) & 0x1;
 608               		.loc 2 101 0
 609 02ca 41FB      		bst r20,1
 610 02cc 5527      		clr r21
 611 02ce 50F9      		bld r21,0
 612 02d0 6781      		ldd r22,Z+7
 613 02d2 5627      		eor r21,r22
 614 02d4 5783      		std Z+7,r21
 102:gift64.h      ****         bits[15] ^= (GIFT_RC[r]>>3) & 0x1;
 615               		.loc 2 102 0
 616 02d6 42FB      		bst r20,2
 617 02d8 5527      		clr r21
 618 02da 50F9      		bld r21,0
 619 02dc 6385      		ldd r22,Z+11
 620 02de 5627      		eor r21,r22
 621 02e0 5387      		std Z+11,r21
 103:gift64.h      ****         bits[19] ^= (GIFT_RC[r]>>4) & 0x1;
 622               		.loc 2 103 0
 623 02e2 43FB      		bst r20,3
 624 02e4 5527      		clr r21
 625 02e6 50F9      		bld r21,0
 626 02e8 6785      		ldd r22,Z+15
 627 02ea 5627      		eor r21,r22
 628 02ec 5787      		std Z+15,r21
 104:gift64.h      ****         bits[23] ^= (GIFT_RC[r]>>5) & 0x1;
 629               		.loc 2 104 0
 630 02ee 44FB      		bst r20,4
 631 02f0 5527      		clr r21
 632 02f2 50F9      		bld r21,0
 633 02f4 6389      		ldd r22,Z+19
 634 02f6 5627      		eor r21,r22
 635 02f8 538B      		std Z+19,r21
 105:gift64.h      ****         bits[63] ^= 1;
 636               		.loc 2 105 0
 637 02fa 45FB      		bst r20,5
 638 02fc 4427      		clr r20
 639 02fe 40F9      		bld r20,0
 640 0300 5789      		ldd r21,Z+23
 641 0302 4527      		eor r20,r21
 642 0304 478B      		std Z+23,r20
 106:gift64.h      **** 
 643               		.loc 2 106 0
 644 0306 47AD      		ldd r20,Z+63
 645 0308 B1E0      		ldi r27,lo8(1)
 646 030a 4B27      		eor r20,r27
 647 030c 47AF      		std Z+63,r20
 648               	.LVL45:
 649               	.L22:
 650               	.LBB16:
 110:gift64.h      ****             for (uint8_t  j=0; j<4; j++){
 651               		.loc 2 110 0
 652 030e D401      		movw r26,r8
 653 0310 1D92      		st X+,__zero_reg__
 654 0312 4D01      		movw r8,r26
 655               	.LVL46:
 656 0314 8F01      		movw r16,r30
 657 0316 70E0      		ldi r23,0
 658 0318 60E0      		ldi r22,0
 659 031a F12C      		mov r15,__zero_reg__
 660               	.LVL47:
 661               	.L21:
 662               	.LBB17:
 112:gift64.h      ****             }
 663               		.loc 2 112 0 discriminator 3
 664 031c D801      		movw r26,r16
 665 031e 4D91      		ld r20,X+
 666 0320 8D01      		movw r16,r26
 667 0322 062E      		mov r0,r22
 668 0324 00C0      		rjmp 2f
 669               		1:
 670 0326 440F      		lsl r20
 671               		2:
 672 0328 0A94      		dec r0
 673 032a 02F4      		brpl 1b
 674 032c F426      		eor r15,r20
 675               	.LVL48:
 676 032e 6F5F      		subi r22,-1
 677 0330 7F4F      		sbci r23,-1
 678               	.LVL49:
 111:gift64.h      ****                  input[i] ^= bits[4*i+j] << j;
 679               		.loc 2 111 0 discriminator 3
 680 0332 6430      		cpi r22,4
 681 0334 7105      		cpc r23,__zero_reg__
 682 0336 01F4      		brne .L21
 683 0338 A401      		movw r20,r8
 684 033a 4150      		subi r20,1
 685 033c 5109      		sbc r21,__zero_reg__
 686 033e DA01      		movw r26,r20
 687 0340 FC92      		st X,r15
 688               	.LVL50:
 689 0342 3496      		adiw r30,4
 690               	.LBE17:
 109:gift64.h      ****             input[i]=0;
 691               		.loc 2 109 0 discriminator 2
 692 0344 CB5B      		subi r28,lo8(-325)
 693 0346 DE4F      		sbci r29,hi8(-325)
 694 0348 E880      		ld r14,Y
 695 034a F980      		ldd r15,Y+1
 696 034c C554      		subi r28,lo8(325)
 697 034e D140      		sbci r29,hi8(325)
 698 0350 8E14      		cp r8,r14
 699 0352 9F04      		cpc r9,r15
 700 0354 01F4      		brne .L22
 701 0356 6E01      		movw r12,r28
 702 0358 31E0      		ldi r19,1
 703 035a C30E      		add r12,r19
 704 035c D31E      		adc r13,r19
 109:gift64.h      ****             input[i]=0;
 705               		.loc 2 109 0 is_stmt 0
 706 035e 8601      		movw r16,r12
 707 0360 48E0      		ldi r20,lo8(8)
 708 0362 50E0      		ldi r21,0
 709 0364 F601      		movw r30,r12
 710               	.LVL51:
 711               	.L23:
 712               	.LBE16:
 713               	.LBB18:
 119:gift64.h      ****         }
 714               		.loc 2 119 0 is_stmt 1 discriminator 3
 715 0366 BA01      		movw r22,r20
 716 0368 6F71      		andi r22,31
 717 036a 7727      		clr r23
 718 036c A1E2      		ldi r26,lo8(33)
 719 036e B1E0      		ldi r27,lo8(1)
 720 0370 AC0F      		add r26,r28
 721 0372 BD1F      		adc r27,r29
 722 0374 6A0F      		add r22,r26
 723 0376 7B1F      		adc r23,r27
 724 0378 DB01      		movw r26,r22
 725 037a 6C91      		ld r22,X
 726 037c D801      		movw r26,r16
 727 037e 6D93      		st X+,r22
 728 0380 8D01      		movw r16,r26
 729               	.LVL52:
 730 0382 4F5F      		subi r20,-1
 731 0384 5F4F      		sbci r21,-1
 732               	.LVL53:
 118:gift64.h      ****             temp_key[i] = key[(i+8)%32];
 733               		.loc 2 118 0 discriminator 3
 734 0386 4832      		cpi r20,40
 735 0388 5105      		cpc r21,__zero_reg__
 736 038a 01F4      		brne .L23
 737 038c B601      		movw r22,r12
 738 038e 685E      		subi r22,-24
 739 0390 7F4F      		sbci r23,-1
 118:gift64.h      ****             temp_key[i] = key[(i+8)%32];
 740               		.loc 2 118 0 is_stmt 0
 741 0392 AE01      		movw r20,r28
 742               	.LVL54:
 743 0394 4F5D      		subi r20,-33
 744 0396 5E4F      		sbci r21,-2
 745               	.L24:
 746               	.LBE18:
 747               	.LBB19:
 121:gift64.h      ****         //k0>>12
 748               		.loc 2 121 0 is_stmt 1 discriminator 3
 749 0398 D601      		movw r26,r12
 750 039a 1D91      		ld r17,X+
 751 039c 6D01      		movw r12,r26
 752 039e DA01      		movw r26,r20
 753 03a0 1D93      		st X+,r17
 754 03a2 AD01      		movw r20,r26
 755               	.LVL55:
 756 03a4 6C15      		cp r22,r12
 757 03a6 7D05      		cpc r23,r13
 758 03a8 01F4      		brne .L24
 759               	.LBE19:
 123:gift64.h      ****         key[25] = temp_key[24];
 760               		.loc 2 123 0 discriminator 2
 761 03aa 438D      		ldd r20,Z+27
 762 03ac C75C      		subi r28,lo8(-313)
 763 03ae DE4F      		sbci r29,hi8(-313)
 764 03b0 4883      		st Y,r20
 765 03b2 C953      		subi r28,lo8(313)
 766 03b4 D140      		sbci r29,hi8(313)
 124:gift64.h      ****         key[26] = temp_key[25];
 767               		.loc 2 124 0 discriminator 2
 768 03b6 408D      		ldd r20,Z+24
 769 03b8 C65C      		subi r28,lo8(-314)
 770 03ba DE4F      		sbci r29,hi8(-314)
 771 03bc 4883      		st Y,r20
 772 03be CA53      		subi r28,lo8(314)
 773 03c0 D140      		sbci r29,hi8(314)
 125:gift64.h      ****         key[27] = temp_key[26];
 774               		.loc 2 125 0 discriminator 2
 775 03c2 418D      		ldd r20,Z+25
 776 03c4 C55C      		subi r28,lo8(-315)
 777 03c6 DE4F      		sbci r29,hi8(-315)
 778 03c8 4883      		st Y,r20
 779 03ca CB53      		subi r28,lo8(315)
 780 03cc D140      		sbci r29,hi8(315)
 126:gift64.h      ****         //k1>>2
 781               		.loc 2 126 0 discriminator 2
 782 03ce 428D      		ldd r20,Z+26
 783 03d0 C45C      		subi r28,lo8(-316)
 784 03d2 DE4F      		sbci r29,hi8(-316)
 785 03d4 4883      		st Y,r20
 786 03d6 CC53      		subi r28,lo8(316)
 787 03d8 D140      		sbci r29,hi8(316)
 128:gift64.h      ****         key[29] = ((temp_key[29]&0xc)>>2) ^ ((temp_key[30]&0x3)<<2);
 788               		.loc 2 128 0 discriminator 2
 789 03da A48D      		ldd r26,Z+28
 790 03dc B0E0      		ldi r27,0
 791 03de 458D      		ldd r20,Z+29
 792 03e0 50E0      		ldi r21,0
 793 03e2 BD01      		movw r22,r26
 794 03e4 7595      		asr r23
 795 03e6 6795      		ror r22
 796 03e8 7595      		asr r23
 797 03ea 6795      		ror r22
 798 03ec 6370      		andi r22,lo8(3)
 799 03ee 8A01      		movw r16,r20
 800 03f0 000F      		lsl r16
 801 03f2 111F      		rol r17
 802 03f4 000F      		lsl r16
 803 03f6 111F      		rol r17
 804 03f8 0C70      		andi r16,lo8(12)
 805 03fa 602B      		or r22,r16
 806 03fc C35C      		subi r28,lo8(-317)
 807 03fe DE4F      		sbci r29,hi8(-317)
 808 0400 6883      		st Y,r22
 809 0402 CD53      		subi r28,lo8(317)
 810 0404 D140      		sbci r29,hi8(317)
 129:gift64.h      ****         key[30] = ((temp_key[30]&0xc)>>2) ^ ((temp_key[31]&0x3)<<2);
 811               		.loc 2 129 0 discriminator 2
 812 0406 668D      		ldd r22,Z+30
 813 0408 70E0      		ldi r23,0
 814 040a 5595      		asr r21
 815 040c 4795      		ror r20
 816 040e 5595      		asr r21
 817 0410 4795      		ror r20
 818 0412 4370      		andi r20,lo8(3)
 819 0414 8B01      		movw r16,r22
 820 0416 000F      		lsl r16
 821 0418 111F      		rol r17
 822 041a 000F      		lsl r16
 823 041c 111F      		rol r17
 824 041e 0C70      		andi r16,lo8(12)
 825 0420 402B      		or r20,r16
 826 0422 C25C      		subi r28,lo8(-318)
 827 0424 DE4F      		sbci r29,hi8(-318)
 828 0426 4883      		st Y,r20
 829 0428 CE53      		subi r28,lo8(318)
 830 042a D140      		sbci r29,hi8(318)
 130:gift64.h      ****         key[31] = ((temp_key[31]&0xc)>>2) ^ ((temp_key[28]&0x3)<<2);
 831               		.loc 2 130 0 discriminator 2
 832 042c 478D      		ldd r20,Z+31
 833 042e 50E0      		ldi r21,0
 834 0430 7595      		asr r23
 835 0432 6795      		ror r22
 836 0434 7595      		asr r23
 837 0436 6795      		ror r22
 838 0438 6370      		andi r22,lo8(3)
 839 043a FA01      		movw r30,r20
 840 043c EE0F      		lsl r30
 841 043e FF1F      		rol r31
 842 0440 EE0F      		lsl r30
 843 0442 FF1F      		rol r31
 844 0444 EC70      		andi r30,lo8(12)
 845 0446 6E2B      		or r22,r30
 846 0448 C15C      		subi r28,lo8(-319)
 847 044a DE4F      		sbci r29,hi8(-319)
 848 044c 6883      		st Y,r22
 849 044e CF53      		subi r28,lo8(319)
 850 0450 D140      		sbci r29,hi8(319)
 131:gift64.h      ****     }
 851               		.loc 2 131 0 discriminator 2
 852 0452 5595      		asr r21
 853 0454 4795      		ror r20
 854 0456 5595      		asr r21
 855 0458 4795      		ror r20
 856 045a 4370      		andi r20,lo8(3)
 857 045c AA0F      		lsl r26
 858 045e BB1F      		rol r27
 859 0460 AA0F      		lsl r26
 860 0462 BB1F      		rol r27
 861 0464 AC70      		andi r26,lo8(12)
 862 0466 4A2B      		or r20,r26
 863 0468 C05C      		subi r28,lo8(-320)
 864 046a DE4F      		sbci r29,hi8(-320)
 865 046c 4883      		st Y,r20
 866 046e C054      		subi r28,lo8(320)
 867 0470 D140      		sbci r29,hi8(320)
 868               	.LBE20:
  47:gift64.h      ****     
 869               		.loc 2 47 0 discriminator 2
 870 0472 2F5F      		subi r18,lo8(-(1))
 871               	.LVL56:
 872 0474 00C0      		rjmp .L5
 873               	.LBE22:
 874               		.cfi_endproc
 875               	.LFE12:
 877               	.global	get_pt
 879               	get_pt:
 880               	.LFB14:
  21:main.c        **** 
  22:main.c        **** 
  23:main.c        **** uint8_t get_pt(uint8_t* pt)
  24:main.c        **** {
 881               		.loc 1 24 0
 882               		.cfi_startproc
 883               	.LVL57:
 884 0476 CF93      		push r28
 885               	.LCFI20:
 886               		.cfi_def_cfa_offset 4
 887               		.cfi_offset 28, -3
 888 0478 DF93      		push r29
 889               	.LCFI21:
 890               		.cfi_def_cfa_offset 5
 891               		.cfi_offset 29, -4
 892               	/* prologue: function */
 893               	/* frame size = 0 */
 894               	/* stack size = 2 */
 895               	.L__stack_usage = 2
 896               	.LVL58:
 897 047a C0E0      		ldi r28,lo8(msg_copy)
 898 047c D0E0      		ldi r29,hi8(msg_copy)
 899 047e 9C01      		movw r18,r24
 900 0480 205F      		subi r18,-16
 901 0482 3F4F      		sbci r19,-1
 902               		.loc 1 24 0
 903 0484 FE01      		movw r30,r28
 904               	.LVL59:
 905               	.L43:
 906               	.LBB23:
  25:main.c        **** 
  26:main.c        ****     for(int i=0; i < 16; i++){
  27:main.c        ****         msg_copy[i]=pt[i]; 
 907               		.loc 1 27 0 discriminator 3
 908 0486 DC01      		movw r26,r24
 909 0488 4D91      		ld r20,X+
 910 048a CD01      		movw r24,r26
 911               	.LVL60:
 912 048c 4193      		st Z+,r20
 913               	.LVL61:
  26:main.c        ****         msg_copy[i]=pt[i]; 
 914               		.loc 1 26 0 discriminator 3
 915 048e A217      		cp r26,r18
 916 0490 B307      		cpc r27,r19
 917 0492 01F4      		brne .L43
 918               	.LBE23:
  28:main.c        ****     }
  29:main.c        ****     
  30:main.c        ****     //trigger_high();
  31:main.c        ****     enc64(msg_copy,K,28,1);
 919               		.loc 1 31 0
 920 0494 21E0      		ldi r18,lo8(1)
 921               	.LVL62:
 922 0496 4CE1      		ldi r20,lo8(28)
 923 0498 50E0      		ldi r21,0
 924 049a 60E0      		ldi r22,lo8(K)
 925 049c 70E0      		ldi r23,hi8(K)
 926 049e 80E0      		ldi r24,lo8(msg_copy)
 927 04a0 90E0      		ldi r25,hi8(msg_copy)
 928               	.LVL63:
 929 04a2 0E94 0000 		call enc64
 930               	.LVL64:
 931 04a6 E0E0      		ldi r30,lo8(msg1_copy+16)
 932 04a8 F0E0      		ldi r31,hi8(msg1_copy+16)
 933               	.LVL65:
 934               	.L44:
 935               	.LBB24:
  32:main.c        ****     //trigger_low();
  33:main.c        ****     
  34:main.c        ****     for(int i=0; i < 16; i++){
  35:main.c        ****         msg1_copy[15-i]=msg_copy[i]; 
 936               		.loc 1 35 0 discriminator 3
 937 04aa 8991      		ld r24,Y+
 938               	.LVL66:
 939 04ac 8293      		st -Z,r24
 940               	.LVL67:
  34:main.c        ****         msg1_copy[15-i]=msg_copy[i]; 
 941               		.loc 1 34 0 discriminator 3
 942 04ae B0E0      		ldi r27,hi8(msg1_copy)
 943 04b0 E030      		cpi r30,lo8(msg1_copy)
 944 04b2 FB07      		cpc r31,r27
 945 04b4 01F4      		brne .L44
 946               	.LBE24:
  36:main.c        ****     }
  37:main.c        ****     
  38:main.c        ****     
  39:main.c        ****     simpleserial_put('r', 16, msg1_copy);
 947               		.loc 1 39 0
 948 04b6 40E0      		ldi r20,lo8(msg1_copy)
 949 04b8 50E0      		ldi r21,hi8(msg1_copy)
 950 04ba 60E1      		ldi r22,lo8(16)
 951 04bc 82E7      		ldi r24,lo8(114)
 952 04be 0E94 0000 		call simpleserial_put
 953               	.LVL68:
  40:main.c        **** 
  41:main.c        ****    return 0x00;
  42:main.c        **** }
 954               		.loc 1 42 0
 955 04c2 80E0      		ldi r24,0
 956               	/* epilogue start */
 957 04c4 DF91      		pop r29
 958 04c6 CF91      		pop r28
 959               	.LVL69:
 960 04c8 0895      		ret
 961               		.cfi_endproc
 962               	.LFE14:
 964               		.section	.text.startup,"ax",@progbits
 965               	.global	main
 967               	main:
 968               	.LFB16:
  43:main.c        **** 
  44:main.c        **** uint8_t reset(uint8_t* x)
  45:main.c        **** {
  46:main.c        ****     // Reset key here if needed
  47:main.c        **** 	return 0x00;
  48:main.c        **** }
  49:main.c        **** 
  50:main.c        **** int main(void)
  51:main.c        **** {
 969               		.loc 1 51 0
 970               		.cfi_startproc
 971               	/* prologue: function */
 972               	/* frame size = 0 */
 973               	/* stack size = 0 */
 974               	.L__stack_usage = 0
  52:main.c        ****     platform_init();
 975               		.loc 1 52 0
 976 0000 0E94 0000 		call platform_init
 977               	.LVL70:
  53:main.c        ****     init_uart();
 978               		.loc 1 53 0
 979 0004 0E94 0000 		call init_uart0
 980               	.LVL71:
  54:main.c        ****     trigger_setup();
 981               		.loc 1 54 0
 982 0008 81E0      		ldi r24,lo8(1)
 983 000a 8093 0106 		sts 1537,r24
  55:main.c        ****     
  56:main.c        ****     
  57:main.c        **** 	simpleserial_init();
 984               		.loc 1 57 0
 985 000e 0E94 0000 		call simpleserial_init
 986               	.LVL72:
  58:main.c        ****     simpleserial_addcmd('k', 16,  get_key);
 987               		.loc 1 58 0
 988 0012 40E0      		ldi r20,lo8(gs(get_key))
 989 0014 50E0      		ldi r21,hi8(gs(get_key))
 990 0016 60E1      		ldi r22,lo8(16)
 991 0018 70E0      		ldi r23,0
 992 001a 8BE6      		ldi r24,lo8(107)
 993 001c 0E94 0000 		call simpleserial_addcmd
 994               	.LVL73:
  59:main.c        ****     simpleserial_addcmd('p', 16,  get_pt);
 995               		.loc 1 59 0
 996 0020 40E0      		ldi r20,lo8(gs(get_pt))
 997 0022 50E0      		ldi r21,hi8(gs(get_pt))
 998 0024 60E1      		ldi r22,lo8(16)
 999 0026 70E0      		ldi r23,0
 1000 0028 80E7      		ldi r24,lo8(112)
 1001 002a 0E94 0000 		call simpleserial_addcmd
 1002               	.LVL74:
  60:main.c        ****     simpleserial_addcmd('x',  0,   reset);
 1003               		.loc 1 60 0
 1004 002e 40E0      		ldi r20,lo8(gs(reset))
 1005 0030 50E0      		ldi r21,hi8(gs(reset))
 1006 0032 70E0      		ldi r23,0
 1007 0034 60E0      		ldi r22,0
 1008 0036 88E7      		ldi r24,lo8(120)
 1009 0038 0E94 0000 		call simpleserial_addcmd
 1010               	.LVL75:
 1011               	.L48:
  61:main.c        ****     while(1)
  62:main.c        ****         simpleserial_get();
 1012               		.loc 1 62 0 discriminator 1
 1013 003c 0E94 0000 		call simpleserial_get
 1014               	.LVL76:
 1015 0040 00C0      		rjmp .L48
 1016               		.cfi_endproc
 1017               	.LFE16:
 1019               	.global	K
 1020               		.data
 1023               	K:
 1024 0000 0F        		.byte	15
 1025 0001 0E        		.byte	14
 1026 0002 0D        		.byte	13
 1027 0003 0C        		.byte	12
 1028 0004 0B        		.byte	11
 1029 0005 0A        		.byte	10
 1030 0006 09        		.byte	9
 1031 0007 08        		.byte	8
 1032 0008 07        		.byte	7
 1033 0009 06        		.byte	6
 1034 000a 05        		.byte	5
 1035 000b 04        		.byte	4
 1036 000c 03        		.byte	3
 1037 000d 02        		.byte	2
 1038 000e 01        		.byte	1
 1039 000f 00        		.byte	0
 1040 0010 0F        		.byte	15
 1041 0011 0E        		.byte	14
 1042 0012 0D        		.byte	13
 1043 0013 0C        		.byte	12
 1044 0014 0B        		.byte	11
 1045 0015 0A        		.byte	10
 1046 0016 09        		.byte	9
 1047 0017 08        		.byte	8
 1048 0018 07        		.byte	7
 1049 0019 06        		.byte	6
 1050 001a 05        		.byte	5
 1051 001b 04        		.byte	4
 1052 001c 03        		.byte	3
 1053 001d 02        		.byte	2
 1054 001e 01        		.byte	1
 1055 001f 00        		.byte	0
 1056               		.comm	msg1_copy,16,1
 1057               		.comm	msg_copy,16,1
 1058               	.global	GIFT_RC
 1059               		.section	.rodata
 1062               	GIFT_RC:
 1063 0000 01        		.byte	1
 1064 0001 03        		.byte	3
 1065 0002 07        		.byte	7
 1066 0003 0F        		.byte	15
 1067 0004 1F        		.byte	31
 1068 0005 3E        		.byte	62
 1069 0006 3D        		.byte	61
 1070 0007 3B        		.byte	59
 1071 0008 37        		.byte	55
 1072 0009 2F        		.byte	47
 1073 000a 1E        		.byte	30
 1074 000b 3C        		.byte	60
 1075 000c 39        		.byte	57
 1076 000d 33        		.byte	51
 1077 000e 27        		.byte	39
 1078 000f 0E        		.byte	14
 1079 0010 1D        		.byte	29
 1080 0011 3A        		.byte	58
 1081 0012 35        		.byte	53
 1082 0013 2B        		.byte	43
 1083 0014 16        		.byte	22
 1084 0015 2C        		.byte	44
 1085 0016 18        		.byte	24
 1086 0017 30        		.byte	48
 1087 0018 21        		.byte	33
 1088 0019 02        		.byte	2
 1089 001a 05        		.byte	5
 1090 001b 0B        		.byte	11
 1091 001c 17        		.byte	23
 1092 001d 2E        		.byte	46
 1093 001e 1C        		.byte	28
 1094 001f 38        		.byte	56
 1095 0020 31        		.byte	49
 1096 0021 23        		.byte	35
 1097 0022 06        		.byte	6
 1098 0023 0D        		.byte	13
 1099 0024 1B        		.byte	27
 1100 0025 36        		.byte	54
 1101 0026 2D        		.byte	45
 1102 0027 1A        		.byte	26
 1103 0028 34        		.byte	52
 1104 0029 29        		.byte	41
 1105 002a 12        		.byte	18
 1106 002b 24        		.byte	36
 1107 002c 08        		.byte	8
 1108 002d 11        		.byte	17
 1109 002e 22        		.byte	34
 1110 002f 04        		.byte	4
 1111 0030 09        		.byte	9
 1112 0031 13        		.byte	19
 1113 0032 26        		.byte	38
 1114 0033 0C        		.byte	12
 1115 0034 19        		.byte	25
 1116 0035 32        		.byte	50
 1117 0036 25        		.byte	37
 1118 0037 0A        		.byte	10
 1119 0038 15        		.byte	21
 1120 0039 2A        		.byte	42
 1121 003a 14        		.byte	20
 1122 003b 28        		.byte	40
 1123 003c 10        		.byte	16
 1124 003d 20        		.byte	32
 1125               	.global	GIFT_P_inv
 1128               	GIFT_P_inv:
 1129 003e 00        		.byte	0
 1130 003f 05        		.byte	5
 1131 0040 0A        		.byte	10
 1132 0041 0F        		.byte	15
 1133 0042 10        		.byte	16
 1134 0043 15        		.byte	21
 1135 0044 1A        		.byte	26
 1136 0045 1F        		.byte	31
 1137 0046 20        		.byte	32
 1138 0047 25        		.byte	37
 1139 0048 2A        		.byte	42
 1140 0049 2F        		.byte	47
 1141 004a 30        		.byte	48
 1142 004b 35        		.byte	53
 1143 004c 3A        		.byte	58
 1144 004d 3F        		.byte	63
 1145 004e 0C        		.byte	12
 1146 004f 01        		.byte	1
 1147 0050 06        		.byte	6
 1148 0051 0B        		.byte	11
 1149 0052 1C        		.byte	28
 1150 0053 11        		.byte	17
 1151 0054 16        		.byte	22
 1152 0055 1B        		.byte	27
 1153 0056 2C        		.byte	44
 1154 0057 21        		.byte	33
 1155 0058 26        		.byte	38
 1156 0059 2B        		.byte	43
 1157 005a 3C        		.byte	60
 1158 005b 31        		.byte	49
 1159 005c 36        		.byte	54
 1160 005d 3B        		.byte	59
 1161 005e 08        		.byte	8
 1162 005f 0D        		.byte	13
 1163 0060 02        		.byte	2
 1164 0061 07        		.byte	7
 1165 0062 18        		.byte	24
 1166 0063 1D        		.byte	29
 1167 0064 12        		.byte	18
 1168 0065 17        		.byte	23
 1169 0066 28        		.byte	40
 1170 0067 2D        		.byte	45
 1171 0068 22        		.byte	34
 1172 0069 27        		.byte	39
 1173 006a 38        		.byte	56
 1174 006b 3D        		.byte	61
 1175 006c 32        		.byte	50
 1176 006d 37        		.byte	55
 1177 006e 04        		.byte	4
 1178 006f 09        		.byte	9
 1179 0070 0E        		.byte	14
 1180 0071 03        		.byte	3
 1181 0072 14        		.byte	20
 1182 0073 19        		.byte	25
 1183 0074 1E        		.byte	30
 1184 0075 13        		.byte	19
 1185 0076 24        		.byte	36
 1186 0077 29        		.byte	41
 1187 0078 2E        		.byte	46
 1188 0079 23        		.byte	35
 1189 007a 34        		.byte	52
 1190 007b 39        		.byte	57
 1191 007c 3E        		.byte	62
 1192 007d 33        		.byte	51
 1193               	.global	GIFT_P
 1196               	GIFT_P:
 1197 007e 00        		.byte	0
 1198 007f 11        		.byte	17
 1199 0080 22        		.byte	34
 1200 0081 33        		.byte	51
 1201 0082 30        		.byte	48
 1202 0083 01        		.byte	1
 1203 0084 12        		.byte	18
 1204 0085 23        		.byte	35
 1205 0086 20        		.byte	32
 1206 0087 31        		.byte	49
 1207 0088 02        		.byte	2
 1208 0089 13        		.byte	19
 1209 008a 10        		.byte	16
 1210 008b 21        		.byte	33
 1211 008c 32        		.byte	50
 1212 008d 03        		.byte	3
 1213 008e 04        		.byte	4
 1214 008f 15        		.byte	21
 1215 0090 26        		.byte	38
 1216 0091 37        		.byte	55
 1217 0092 34        		.byte	52
 1218 0093 05        		.byte	5
 1219 0094 16        		.byte	22
 1220 0095 27        		.byte	39
 1221 0096 24        		.byte	36
 1222 0097 35        		.byte	53
 1223 0098 06        		.byte	6
 1224 0099 17        		.byte	23
 1225 009a 14        		.byte	20
 1226 009b 25        		.byte	37
 1227 009c 36        		.byte	54
 1228 009d 07        		.byte	7
 1229 009e 08        		.byte	8
 1230 009f 19        		.byte	25
 1231 00a0 2A        		.byte	42
 1232 00a1 3B        		.byte	59
 1233 00a2 38        		.byte	56
 1234 00a3 09        		.byte	9
 1235 00a4 1A        		.byte	26
 1236 00a5 2B        		.byte	43
 1237 00a6 28        		.byte	40
 1238 00a7 39        		.byte	57
 1239 00a8 0A        		.byte	10
 1240 00a9 1B        		.byte	27
 1241 00aa 18        		.byte	24
 1242 00ab 29        		.byte	41
 1243 00ac 3A        		.byte	58
 1244 00ad 0B        		.byte	11
 1245 00ae 0C        		.byte	12
 1246 00af 1D        		.byte	29
 1247 00b0 2E        		.byte	46
 1248 00b1 3F        		.byte	63
 1249 00b2 3C        		.byte	60
 1250 00b3 0D        		.byte	13
 1251 00b4 1E        		.byte	30
 1252 00b5 2F        		.byte	47
 1253 00b6 2C        		.byte	44
 1254 00b7 3D        		.byte	61
 1255 00b8 0E        		.byte	14
 1256 00b9 1F        		.byte	31
 1257 00ba 1C        		.byte	28
 1258 00bb 2D        		.byte	45
 1259 00bc 3E        		.byte	62
 1260 00bd 0F        		.byte	15
 1261               	.global	GIFT_S_inv
 1264               	GIFT_S_inv:
 1265 00be 0D        		.byte	13
 1266 00bf 00        		.byte	0
 1267 00c0 08        		.byte	8
 1268 00c1 06        		.byte	6
 1269 00c2 02        		.byte	2
 1270 00c3 0C        		.byte	12
 1271 00c4 04        		.byte	4
 1272 00c5 0B        		.byte	11
 1273 00c6 0E        		.byte	14
 1274 00c7 07        		.byte	7
 1275 00c8 01        		.byte	1
 1276 00c9 0A        		.byte	10
 1277 00ca 03        		.byte	3
 1278 00cb 09        		.byte	9
 1279 00cc 0F        		.byte	15
 1280 00cd 05        		.byte	5
 1281               	.global	GIFT_S
 1284               	GIFT_S:
 1285 00ce 01        		.byte	1
 1286 00cf 0A        		.byte	10
 1287 00d0 04        		.byte	4
 1288 00d1 0C        		.byte	12
 1289 00d2 06        		.byte	6
 1290 00d3 0F        		.byte	15
 1291 00d4 03        		.byte	3
 1292 00d5 09        		.byte	9
 1293 00d6 02        		.byte	2
 1294 00d7 0D        		.byte	13
 1295 00d8 0B        		.byte	11
 1296 00d9 07        		.byte	7
 1297 00da 05        		.byte	5
 1298 00db 00        		.byte	0
 1299 00dc 08        		.byte	8
 1300 00dd 0E        		.byte	14
 1301               		.text
 1302               	.Letext0:
 1303               		.file 3 "/usr/lib/avr/include/stdint.h"
 1304               		.file 4 "/usr/lib/gcc/avr/7.3.0/include/stddef.h"
 1305               		.file 5 "/usr/lib/avr/include/stdio.h"
 1306               		.file 6 "/usr/lib/avr/include/stdlib.h"
 1307               		.file 7 "/usr/lib/avr/include/avr/iox128d3.h"
 1308               		.file 8 "dependencies/hal/hal.h"
 1309               		.file 9 "dependencies/hal/xmega/uart.h"
 1310               		.file 10 "dependencies/simpleserial/simpleserial.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc1mKGBD.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc1mKGBD.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc1mKGBD.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc1mKGBD.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/cc1mKGBD.s:6      *ABS*:0000000000000034 __CCP__
     /tmp/cc1mKGBD.s:7      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc1mKGBD.s:8      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc1mKGBD.s:14     .text:0000000000000000 get_key
     /tmp/cc1mKGBD.s:34     .text:0000000000000004 reset
     /tmp/cc1mKGBD.s:49     .text:0000000000000008 enc64
     /tmp/cc1mKGBD.s:1284   .rodata:00000000000000ce GIFT_S
     /tmp/cc1mKGBD.s:1196   .rodata:000000000000007e GIFT_P
     /tmp/cc1mKGBD.s:1062   .rodata:0000000000000000 GIFT_RC
     /tmp/cc1mKGBD.s:879    .text:0000000000000476 get_pt
                            *COM*:0000000000000010 msg_copy
     /tmp/cc1mKGBD.s:1023   .data:0000000000000000 K
                            *COM*:0000000000000010 msg1_copy
     /tmp/cc1mKGBD.s:967    .text.startup:0000000000000000 main
     /tmp/cc1mKGBD.s:1128   .rodata:000000000000003e GIFT_P_inv
     /tmp/cc1mKGBD.s:1264   .rodata:00000000000000be GIFT_S_inv

UNDEFINED SYMBOLS
simpleserial_put
platform_init
init_uart0
simpleserial_init
simpleserial_addcmd
simpleserial_get
__do_copy_data
__do_clear_bss
