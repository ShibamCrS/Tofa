
main-CWLITEXMEGA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cbe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010e  00802000  00000cbe  00000d52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000e2  0080210e  0080210e  00000e60  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000e60  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e74  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003d68  00000000  00000000  00000f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000028ec  00000000  00000000  00004cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c95  00000000  00000000  000075b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000388  00000000  00000000  00008248  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001f64  00000000  00000000  000085d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001148  00000000  00000000  0000a534  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000b67c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__ctors_end>
   4:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
   8:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
   c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  10:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  14:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  18:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  1c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  20:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  24:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  28:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  2c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  30:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  34:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  38:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  3c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  40:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  44:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  48:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  4c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  50:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  54:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  58:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  5c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  60:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  64:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  68:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  6c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  70:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  74:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  78:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  7c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  80:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  84:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  88:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  8c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  90:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  94:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  98:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  9c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  a0:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  a4:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  a8:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  ac:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  b0:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  b4:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  b8:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  bc:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  c0:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  c4:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  c8:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  cc:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  d0:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  d4:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  d8:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  dc:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  e0:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  e4:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  e8:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  ec:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  f0:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  f4:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  f8:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  fc:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 100:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 104:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 108:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 10c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 110:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 114:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 118:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 11c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 120:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 124:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 128:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 12c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 130:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 134:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 138:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 13c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 140:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 144:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 148:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 14c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 150:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 154:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 158:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 15c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 160:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 164:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 168:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 16c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 170:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 174:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 178:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 17c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 180:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 184:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 188:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 18c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 190:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 194:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 198:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 19c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 1a0:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 1a4:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 1a8:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 1ac:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 1b0:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 1b4:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 1b8:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 1bc:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 1c0:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 1c4:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>

000001c8 <__trampolines_start>:
 1c8:	0c 94 3b 04 	jmp	0x876	; 0x876 <ss_num_commands>
 1cc:	0c 94 13 01 	jmp	0x226	; 0x226 <get_key>
 1d0:	0c 94 4d 03 	jmp	0x69a	; 0x69a <get_pt>
 1d4:	0c 94 15 01 	jmp	0x22a	; 0x22a <reset>
 1d8:	0c 94 4f 04 	jmp	0x89e	; 0x89e <ss_get_commands>
 1dc:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <check_version>

000001e0 <__ctors_end>:
 1e0:	11 24       	eor	r1, r1
 1e2:	1f be       	out	0x3f, r1	; 63
 1e4:	cf ef       	ldi	r28, 0xFF	; 255
 1e6:	cd bf       	out	0x3d, r28	; 61
 1e8:	df e3       	ldi	r29, 0x3F	; 63
 1ea:	de bf       	out	0x3e, r29	; 62
 1ec:	00 e0       	ldi	r16, 0x00	; 0
 1ee:	0c bf       	out	0x3c, r16	; 60

000001f0 <__do_copy_data>:
 1f0:	11 e2       	ldi	r17, 0x21	; 33
 1f2:	a0 e0       	ldi	r26, 0x00	; 0
 1f4:	b0 e2       	ldi	r27, 0x20	; 32
 1f6:	ee eb       	ldi	r30, 0xBE	; 190
 1f8:	fc e0       	ldi	r31, 0x0C	; 12
 1fa:	00 e0       	ldi	r16, 0x00	; 0
 1fc:	0b bf       	out	0x3b, r16	; 59
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <__do_copy_data+0x14>
 200:	07 90       	elpm	r0, Z+
 202:	0d 92       	st	X+, r0
 204:	ae 30       	cpi	r26, 0x0E	; 14
 206:	b1 07       	cpc	r27, r17
 208:	d9 f7       	brne	.-10     	; 0x200 <__do_copy_data+0x10>

0000020a <__do_clear_bss>:
 20a:	21 e2       	ldi	r18, 0x21	; 33
 20c:	ae e0       	ldi	r26, 0x0E	; 14
 20e:	b1 e2       	ldi	r27, 0x21	; 33
 210:	01 c0       	rjmp	.+2      	; 0x214 <.do_clear_bss_start>

00000212 <.do_clear_bss_loop>:
 212:	1d 92       	st	X+, r1

00000214 <.do_clear_bss_start>:
 214:	a0 3f       	cpi	r26, 0xF0	; 240
 216:	b2 07       	cpc	r27, r18
 218:	e1 f7       	brne	.-8      	; 0x212 <.do_clear_bss_loop>
 21a:	0e 94 3c 06 	call	0xc78	; 0xc78 <main>
 21e:	0c 94 5d 06 	jmp	0xcba	; 0xcba <_exit>

00000222 <__bad_interrupt>:
 222:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000226 <get_key>:
uint8_t get_key(uint8_t* k)
{
	//ignore the input k and use pre-defined key

	return 0x00;
}
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	08 95       	ret

0000022a <reset>:
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	08 95       	ret

0000022e <enc64>:
    0x26, 0x0c, 0x19, 0x32, 0x25, 0x0a, 0x15, 0x2a, 0x14, 0x28,
    0x10, 0x20
};


void enc64(uint8_t* input, uint8_t* masterkey, int no_of_rounds, bool print_details){
 22e:	2f 92       	push	r2
 230:	3f 92       	push	r3
 232:	4f 92       	push	r4
 234:	5f 92       	push	r5
 236:	6f 92       	push	r6
 238:	7f 92       	push	r7
 23a:	8f 92       	push	r8
 23c:	9f 92       	push	r9
 23e:	af 92       	push	r10
 240:	bf 92       	push	r11
 242:	cf 92       	push	r12
 244:	df 92       	push	r13
 246:	ef 92       	push	r14
 248:	ff 92       	push	r15
 24a:	0f 93       	push	r16
 24c:	1f 93       	push	r17
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	cd b7       	in	r28, 0x3d	; 61
 254:	de b7       	in	r29, 0x3e	; 62
 256:	c6 54       	subi	r28, 0x46	; 70
 258:	d1 40       	sbci	r29, 0x01	; 1
 25a:	cd bf       	out	0x3d, r28	; 61
 25c:	de bf       	out	0x3e, r29	; 62
 25e:	2a 01       	movw	r4, r20
 260:	fb 01       	movw	r30, r22
 262:	9b 01       	movw	r18, r22
 264:	20 5e       	subi	r18, 0xE0	; 224
 266:	3f 4f       	sbci	r19, 0xFF	; 255
 268:	de 01       	movw	r26, r28
 26a:	af 5d       	subi	r26, 0xDF	; 223
 26c:	be 4f       	sbci	r27, 0xFE	; 254
    uint8_t key[32];
    for (uint8_t i=0; i<32;i++){
        key[i] = masterkey[i];
 26e:	41 91       	ld	r20, Z+
 270:	4d 93       	st	X+, r20
};


void enc64(uint8_t* input, uint8_t* masterkey, int no_of_rounds, bool print_details){
    uint8_t key[32];
    for (uint8_t i=0; i<32;i++){
 272:	e2 17       	cp	r30, r18
 274:	f3 07       	cpc	r31, r19
 276:	d9 f7       	brne	.-10     	; 0x26e <enc64+0x40>
    }

    uint8_t bits[64], perm_bits[64];
    uint8_t key_bits[128];
    uint8_t temp_key[32];
    for (uint8_t r=0; r<no_of_rounds; r++){
 278:	20 e0       	ldi	r18, 0x00	; 0
 27a:	ac 01       	movw	r20, r24
 27c:	40 5f       	subi	r20, 0xF0	; 240
 27e:	5f 4f       	sbci	r21, 0xFF	; 255
 280:	cf 5b       	subi	r28, 0xBF	; 191
 282:	de 4f       	sbci	r29, 0xFE	; 254
 284:	48 83       	st	Y, r20
 286:	59 83       	std	Y+1, r21	; 0x01
 288:	c1 54       	subi	r28, 0x41	; 65
 28a:	d1 40       	sbci	r29, 0x01	; 1
 28c:	61 e2       	ldi	r22, 0x21	; 33
 28e:	71 e0       	ldi	r23, 0x01	; 1
 290:	6c 0f       	add	r22, r28
 292:	7d 1f       	adc	r23, r29
 294:	60 5e       	subi	r22, 0xE0	; 224
 296:	7f 4f       	sbci	r23, 0xFF	; 255
 298:	cd 5b       	subi	r28, 0xBD	; 189
 29a:	de 4f       	sbci	r29, 0xFE	; 254
 29c:	68 83       	st	Y, r22
 29e:	79 83       	std	Y+1, r23	; 0x01
 2a0:	c3 54       	subi	r28, 0x43	; 67
 2a2:	d1 40       	sbci	r29, 0x01	; 1
 2a4:	62 2e       	mov	r6, r18
 2a6:	71 2c       	mov	r7, r1
 2a8:	64 14       	cp	r6, r4
 2aa:	75 04       	cpc	r7, r5
 2ac:	bc f0       	brlt	.+46     	; 0x2dc <enc64+0xae>
        key[31] = ((temp_key[31]&0xc)>>2) ^ ((temp_key[28]&0x3)<<2);
    }
   

    return;
}
 2ae:	ca 5b       	subi	r28, 0xBA	; 186
 2b0:	de 4f       	sbci	r29, 0xFE	; 254
 2b2:	cd bf       	out	0x3d, r28	; 61
 2b4:	de bf       	out	0x3e, r29	; 62
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	1f 91       	pop	r17
 2bc:	0f 91       	pop	r16
 2be:	ff 90       	pop	r15
 2c0:	ef 90       	pop	r14
 2c2:	df 90       	pop	r13
 2c4:	cf 90       	pop	r12
 2c6:	bf 90       	pop	r11
 2c8:	af 90       	pop	r10
 2ca:	9f 90       	pop	r9
 2cc:	8f 90       	pop	r8
 2ce:	7f 90       	pop	r7
 2d0:	6f 90       	pop	r6
 2d2:	5f 90       	pop	r5
 2d4:	4f 90       	pop	r4
 2d6:	3f 90       	pop	r3
 2d8:	2f 90       	pop	r2
 2da:	08 95       	ret
    uint8_t bits[64], perm_bits[64];
    uint8_t key_bits[128];
    uint8_t temp_key[32];
    for (uint8_t r=0; r<no_of_rounds; r++){
    
    if(r==23) trigger_high();
 2dc:	27 31       	cpi	r18, 0x17	; 23
 2de:	19 f4       	brne	.+6      	; 0x2e6 <enc64+0xb8>
 2e0:	71 e0       	ldi	r23, 0x01	; 1
 2e2:	70 93 05 06 	sts	0x0605, r23	; 0x800605 <__TEXT_REGION_LENGTH__+0x7de605>
 2e6:	4c 01       	movw	r8, r24
    0x26, 0x0c, 0x19, 0x32, 0x25, 0x0a, 0x15, 0x2a, 0x14, 0x28,
    0x10, 0x20
};


void enc64(uint8_t* input, uint8_t* masterkey, int no_of_rounds, bool print_details){
 2e8:	ac 01       	movw	r20, r24
    
    if(r==23) trigger_high();

        //SubCells
        for (uint8_t i=0; i<16; i++){
            input[i] = GIFT_S[input[i]];
 2ea:	da 01       	movw	r26, r20
 2ec:	ed 91       	ld	r30, X+
 2ee:	ad 01       	movw	r20, r26
 2f0:	11 97       	sbiw	r26, 0x01	; 1
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	e2 51       	subi	r30, 0x12	; 18
 2f6:	ff 4d       	sbci	r31, 0xDF	; 223
 2f8:	60 81       	ld	r22, Z
 2fa:	6c 93       	st	X, r22
    for (uint8_t r=0; r<no_of_rounds; r++){
    
    if(r==23) trigger_high();

        //SubCells
        for (uint8_t i=0; i<16; i++){
 2fc:	cf 5b       	subi	r28, 0xBF	; 191
 2fe:	de 4f       	sbci	r29, 0xFE	; 254
 300:	e8 80       	ld	r14, Y
 302:	f9 80       	ldd	r15, Y+1	; 0x01
 304:	c1 54       	subi	r28, 0x41	; 65
 306:	d1 40       	sbci	r29, 0x01	; 1
 308:	4e 15       	cp	r20, r14
 30a:	5f 05       	cpc	r21, r15
 30c:	71 f7       	brne	.-36     	; 0x2ea <enc64+0xbc>
 30e:	fe 01       	movw	r30, r28
 310:	ef 53       	subi	r30, 0x3F	; 63
 312:	ff 4f       	sbci	r31, 0xFF	; 255
 314:	8f 01       	movw	r16, r30
 316:	cb 5b       	subi	r28, 0xBB	; 187
 318:	de 4f       	sbci	r29, 0xFE	; 254
 31a:	88 83       	st	Y, r24
 31c:	99 83       	std	Y+1, r25	; 0x01
 31e:	c5 54       	subi	r28, 0x45	; 69
 320:	d1 40       	sbci	r29, 0x01	; 1

        //PermBits
        //input to bits
        for (uint8_t i=0; i<16; i++){
            for (uint8_t j=0; j<4; j++){
                bits[4*i+j] = (input[i] >> j) & 0x1;
 322:	cb 5b       	subi	r28, 0xBB	; 187
 324:	de 4f       	sbci	r29, 0xFE	; 254
 326:	a8 81       	ld	r26, Y
 328:	b9 81       	ldd	r27, Y+1	; 0x01
 32a:	c5 54       	subi	r28, 0x45	; 69
 32c:	d1 40       	sbci	r29, 0x01	; 1
 32e:	ed 90       	ld	r14, X+
 330:	cb 5b       	subi	r28, 0xBB	; 187
 332:	de 4f       	sbci	r29, 0xFE	; 254
 334:	a8 83       	st	Y, r26
 336:	b9 83       	std	Y+1, r27	; 0x01
 338:	c5 54       	subi	r28, 0x45	; 69
 33a:	d1 40       	sbci	r29, 0x01	; 1
 33c:	f1 2c       	mov	r15, r1
 33e:	58 01       	movw	r10, r16
 340:	70 e0       	ldi	r23, 0x00	; 0
 342:	60 e0       	ldi	r22, 0x00	; 0
 344:	67 01       	movw	r12, r14
 346:	06 2e       	mov	r0, r22
 348:	02 c0       	rjmp	.+4      	; 0x34e <enc64+0x120>
 34a:	d5 94       	asr	r13
 34c:	c7 94       	ror	r12
 34e:	0a 94       	dec	r0
 350:	e2 f7       	brpl	.-8      	; 0x34a <enc64+0x11c>
 352:	3c 2d       	mov	r19, r12
 354:	31 70       	andi	r19, 0x01	; 1
 356:	d5 01       	movw	r26, r10
 358:	3d 93       	st	X+, r19
 35a:	5d 01       	movw	r10, r26
 35c:	6f 5f       	subi	r22, 0xFF	; 255
 35e:	7f 4f       	sbci	r23, 0xFF	; 255
        }

        //PermBits
        //input to bits
        for (uint8_t i=0; i<16; i++){
            for (uint8_t j=0; j<4; j++){
 360:	64 30       	cpi	r22, 0x04	; 4
 362:	71 05       	cpc	r23, r1
 364:	79 f7       	brne	.-34     	; 0x344 <enc64+0x116>
 366:	0c 5f       	subi	r16, 0xFC	; 252
 368:	1f 4f       	sbci	r17, 0xFF	; 255
            input[i] = GIFT_S[input[i]];
        }

        //PermBits
        //input to bits
        for (uint8_t i=0; i<16; i++){
 36a:	cb 5b       	subi	r28, 0xBB	; 187
 36c:	de 4f       	sbci	r29, 0xFE	; 254
 36e:	e8 80       	ld	r14, Y
 370:	f9 80       	ldd	r15, Y+1	; 0x01
 372:	c5 54       	subi	r28, 0x45	; 69
 374:	d1 40       	sbci	r29, 0x01	; 1
 376:	e4 16       	cp	r14, r20
 378:	f5 06       	cpc	r15, r21
 37a:	99 f6       	brne	.-90     	; 0x322 <enc64+0xf4>
 37c:	4e e9       	ldi	r20, 0x9E	; 158
 37e:	50 e2       	ldi	r21, 0x20	; 32
 380:	8f 01       	movw	r16, r30
                bits[4*i+j] = (input[i] >> j) & 0x1;
            }
        }
        //permute the bits
        for (uint8_t i=0; i<64; i++){
            perm_bits[GIFT_P[i]] = bits[i];
 382:	da 01       	movw	r26, r20
 384:	6d 91       	ld	r22, X+
 386:	ad 01       	movw	r20, r26
 388:	d8 01       	movw	r26, r16
 38a:	fd 90       	ld	r15, X+
 38c:	8d 01       	movw	r16, r26
 38e:	a1 e8       	ldi	r26, 0x81	; 129
 390:	b0 e0       	ldi	r27, 0x00	; 0
 392:	ac 0f       	add	r26, r28
 394:	bd 1f       	adc	r27, r29
 396:	a6 0f       	add	r26, r22
 398:	b1 1d       	adc	r27, r1
 39a:	fc 92       	st	X, r15
            for (uint8_t j=0; j<4; j++){
                bits[4*i+j] = (input[i] >> j) & 0x1;
            }
        }
        //permute the bits
        for (uint8_t i=0; i<64; i++){
 39c:	b0 e2       	ldi	r27, 0x20	; 32
 39e:	4e 3d       	cpi	r20, 0xDE	; 222
 3a0:	5b 07       	cpc	r21, r27
 3a2:	79 f7       	brne	.-34     	; 0x382 <enc64+0x154>
 3a4:	ae 01       	movw	r20, r28
 3a6:	4f 57       	subi	r20, 0x7F	; 127
 3a8:	5f 4f       	sbci	r21, 0xFF	; 255
 3aa:	7a 01       	movw	r14, r20
 3ac:	bc 01       	movw	r22, r24
            perm_bits[GIFT_P[i]] = bits[i];
        }
        //perm_bits to input
        for (uint8_t i=0; i<16; i++){
            input[i]=0;
 3ae:	db 01       	movw	r26, r22
 3b0:	1d 92       	st	X+, r1
 3b2:	bd 01       	movw	r22, r26
 3b4:	67 01       	movw	r12, r14
 3b6:	10 e0       	ldi	r17, 0x00	; 0
 3b8:	00 e0       	ldi	r16, 0x00	; 0
 3ba:	b1 2c       	mov	r11, r1
            for (uint8_t j=0; j<4; j++){
                 input[i] ^= perm_bits[4*i+j] << j;
 3bc:	d6 01       	movw	r26, r12
 3be:	4d 91       	ld	r20, X+
 3c0:	6d 01       	movw	r12, r26
 3c2:	00 2e       	mov	r0, r16
 3c4:	01 c0       	rjmp	.+2      	; 0x3c8 <enc64+0x19a>
 3c6:	44 0f       	add	r20, r20
 3c8:	0a 94       	dec	r0
 3ca:	ea f7       	brpl	.-6      	; 0x3c6 <enc64+0x198>
 3cc:	b4 26       	eor	r11, r20
 3ce:	0f 5f       	subi	r16, 0xFF	; 255
 3d0:	1f 4f       	sbci	r17, 0xFF	; 255
            perm_bits[GIFT_P[i]] = bits[i];
        }
        //perm_bits to input
        for (uint8_t i=0; i<16; i++){
            input[i]=0;
            for (uint8_t j=0; j<4; j++){
 3d2:	04 30       	cpi	r16, 0x04	; 4
 3d4:	11 05       	cpc	r17, r1
 3d6:	91 f7       	brne	.-28     	; 0x3bc <enc64+0x18e>
 3d8:	ab 01       	movw	r20, r22
 3da:	41 50       	subi	r20, 0x01	; 1
 3dc:	51 09       	sbc	r21, r1
 3de:	da 01       	movw	r26, r20
 3e0:	bc 92       	st	X, r11
 3e2:	b4 e0       	ldi	r27, 0x04	; 4
 3e4:	eb 0e       	add	r14, r27
 3e6:	f1 1c       	adc	r15, r1
        //permute the bits
        for (uint8_t i=0; i<64; i++){
            perm_bits[GIFT_P[i]] = bits[i];
        }
        //perm_bits to input
        for (uint8_t i=0; i<16; i++){
 3e8:	cb 5b       	subi	r28, 0xBB	; 187
 3ea:	de 4f       	sbci	r29, 0xFE	; 254
 3ec:	48 81       	ld	r20, Y
 3ee:	59 81       	ldd	r21, Y+1	; 0x01
 3f0:	c5 54       	subi	r28, 0x45	; 69
 3f2:	d1 40       	sbci	r29, 0x01	; 1
 3f4:	64 17       	cp	r22, r20
 3f6:	75 07       	cpc	r23, r21
 3f8:	d1 f6       	brne	.-76     	; 0x3ae <enc64+0x180>
            input[i]=0;
            for (uint8_t j=0; j<4; j++){
                 input[i] ^= perm_bits[4*i+j] << j;
            }
        }
         if(r==23) trigger_low();
 3fa:	27 31       	cpi	r18, 0x17	; 23
 3fc:	19 f4       	brne	.+6      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3fe:	51 e0       	ldi	r21, 0x01	; 1
 400:	50 93 06 06 	sts	0x0606, r21	; 0x800606 <__TEXT_REGION_LENGTH__+0x7de606>

        //AddRoundKey
        //input to bits
        for (uint8_t i=0; i<16; i++){
            for (uint8_t j=0; j<4; j++){
                bits[4*i+j] = (input[i] >> j) & 0x1;
 404:	bf 01       	movw	r22, r30
 406:	7c 01       	movw	r14, r24
 408:	d7 01       	movw	r26, r14
 40a:	0d 91       	ld	r16, X+
 40c:	7d 01       	movw	r14, r26
 40e:	10 e0       	ldi	r17, 0x00	; 0
 410:	5b 01       	movw	r10, r22
 412:	50 e0       	ldi	r21, 0x00	; 0
 414:	40 e0       	ldi	r20, 0x00	; 0
 416:	68 01       	movw	r12, r16
 418:	04 2e       	mov	r0, r20
 41a:	02 c0       	rjmp	.+4      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 41c:	d5 94       	asr	r13
 41e:	c7 94       	ror	r12
 420:	0a 94       	dec	r0
 422:	e2 f7       	brpl	.-8      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 424:	ac 2d       	mov	r26, r12
 426:	a1 70       	andi	r26, 0x01	; 1
 428:	ca 2e       	mov	r12, r26
 42a:	d5 01       	movw	r26, r10
 42c:	cd 92       	st	X+, r12
 42e:	5d 01       	movw	r10, r26
 430:	4f 5f       	subi	r20, 0xFF	; 255
 432:	5f 4f       	sbci	r21, 0xFF	; 255
         if(r==23) trigger_low();

        //AddRoundKey
        //input to bits
        for (uint8_t i=0; i<16; i++){
            for (uint8_t j=0; j<4; j++){
 434:	44 30       	cpi	r20, 0x04	; 4
 436:	51 05       	cpc	r21, r1
 438:	71 f7       	brne	.-36     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 43a:	6c 5f       	subi	r22, 0xFC	; 252
 43c:	7f 4f       	sbci	r23, 0xFF	; 255
        }
         if(r==23) trigger_low();

        //AddRoundKey
        //input to bits
        for (uint8_t i=0; i<16; i++){
 43e:	cb 5b       	subi	r28, 0xBB	; 187
 440:	de 4f       	sbci	r29, 0xFE	; 254
 442:	48 81       	ld	r20, Y
 444:	59 81       	ldd	r21, Y+1	; 0x01
 446:	c5 54       	subi	r28, 0x45	; 69
 448:	d1 40       	sbci	r29, 0x01	; 1
 44a:	e4 16       	cp	r14, r20
 44c:	f5 06       	cpc	r15, r21
 44e:	e1 f6       	brne	.-72     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 450:	ae 01       	movw	r20, r28
 452:	4f 5f       	subi	r20, 0xFF	; 255
 454:	5f 4f       	sbci	r21, 0xFF	; 255
 456:	6a 01       	movw	r12, r20
 458:	8e 01       	movw	r16, r28
 45a:	0f 5d       	subi	r16, 0xDF	; 223
 45c:	1e 4f       	sbci	r17, 0xFE	; 254
            }
        }
        //key to key_bits
        for (uint8_t i=0; i<32; i++){
            for (int j=0; j<4; j++){
                key_bits[4*i+j] = (key[i] >> j) & 0x1;
 45e:	d8 01       	movw	r26, r16
 460:	2d 90       	ld	r2, X+
 462:	8d 01       	movw	r16, r26
 464:	31 2c       	mov	r3, r1
 466:	56 01       	movw	r10, r12
                bits[4*i+j] = (input[i] >> j) & 0x1;
            }
        }
        //key to key_bits
        for (uint8_t i=0; i<32; i++){
            for (int j=0; j<4; j++){
 468:	70 e0       	ldi	r23, 0x00	; 0
 46a:	60 e0       	ldi	r22, 0x00	; 0
                key_bits[4*i+j] = (key[i] >> j) & 0x1;
 46c:	71 01       	movw	r14, r2
 46e:	06 2e       	mov	r0, r22
 470:	02 c0       	rjmp	.+4      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 472:	f5 94       	asr	r15
 474:	e7 94       	ror	r14
 476:	0a 94       	dec	r0
 478:	e2 f7       	brpl	.-8      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 47a:	be 2d       	mov	r27, r14
 47c:	b1 70       	andi	r27, 0x01	; 1
 47e:	eb 2e       	mov	r14, r27
 480:	d5 01       	movw	r26, r10
 482:	ed 92       	st	X+, r14
 484:	5d 01       	movw	r10, r26
                bits[4*i+j] = (input[i] >> j) & 0x1;
            }
        }
        //key to key_bits
        for (uint8_t i=0; i<32; i++){
            for (int j=0; j<4; j++){
 486:	6f 5f       	subi	r22, 0xFF	; 255
 488:	7f 4f       	sbci	r23, 0xFF	; 255
 48a:	64 30       	cpi	r22, 0x04	; 4
 48c:	71 05       	cpc	r23, r1
 48e:	71 f7       	brne	.-36     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 490:	b4 e0       	ldi	r27, 0x04	; 4
 492:	cb 0e       	add	r12, r27
 494:	d1 1c       	adc	r13, r1
            for (uint8_t j=0; j<4; j++){
                bits[4*i+j] = (input[i] >> j) & 0x1;
            }
        }
        //key to key_bits
        for (uint8_t i=0; i<32; i++){
 496:	cd 5b       	subi	r28, 0xBD	; 189
 498:	de 4f       	sbci	r29, 0xFE	; 254
 49a:	e8 80       	ld	r14, Y
 49c:	f9 80       	ldd	r15, Y+1	; 0x01
 49e:	c3 54       	subi	r28, 0x43	; 67
 4a0:	d1 40       	sbci	r29, 0x01	; 1
 4a2:	e0 16       	cp	r14, r16
 4a4:	f1 06       	cpc	r15, r17
 4a6:	d9 f6       	brne	.-74     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 4a8:	8f 01       	movw	r16, r30
 4aa:	00 5c       	subi	r16, 0xC0	; 192
 4ac:	1f 4f       	sbci	r17, 0xFF	; 255
 4ae:	bf 01       	movw	r22, r30
        }

        //add round key
        uint8_t kbc=0;  //key_bit_counter
        for (uint8_t  i=0; i<16; i++){
            bits[4*i] ^= key_bits[kbc];
 4b0:	da 01       	movw	r26, r20
 4b2:	ed 90       	ld	r14, X+
 4b4:	ad 01       	movw	r20, r26
 4b6:	db 01       	movw	r26, r22
 4b8:	fc 90       	ld	r15, X
 4ba:	fe 24       	eor	r15, r14
 4bc:	fc 92       	st	X, r15
            bits[4*i+1] ^= key_bits[kbc+16];
 4be:	11 96       	adiw	r26, 0x01	; 1
 4c0:	fc 90       	ld	r15, X
 4c2:	da 01       	movw	r26, r20
 4c4:	1f 96       	adiw	r26, 0x0f	; 15
 4c6:	ec 90       	ld	r14, X
 4c8:	fe 24       	eor	r15, r14
 4ca:	db 01       	movw	r26, r22
 4cc:	11 96       	adiw	r26, 0x01	; 1
 4ce:	fc 92       	st	X, r15
 4d0:	6c 5f       	subi	r22, 0xFC	; 252
 4d2:	7f 4f       	sbci	r23, 0xFF	; 255
            }
        }

        //add round key
        uint8_t kbc=0;  //key_bit_counter
        for (uint8_t  i=0; i<16; i++){
 4d4:	06 17       	cp	r16, r22
 4d6:	17 07       	cpc	r17, r23
 4d8:	59 f7       	brne	.-42     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
            bits[4*i+1] ^= key_bits[kbc+16];
            kbc++;
        }

        //add constant
        bits[3] ^= GIFT_RC[r] & 0x1;
 4da:	a3 01       	movw	r20, r6
 4dc:	40 5e       	subi	r20, 0xE0	; 224
 4de:	5f 4d       	sbci	r21, 0xDF	; 223
 4e0:	da 01       	movw	r26, r20
 4e2:	4c 91       	ld	r20, X
 4e4:	64 2f       	mov	r22, r20
 4e6:	61 70       	andi	r22, 0x01	; 1
 4e8:	53 81       	ldd	r21, Z+3	; 0x03
 4ea:	56 27       	eor	r21, r22
 4ec:	53 83       	std	Z+3, r21	; 0x03
        bits[7] ^= (GIFT_RC[r]>>1) & 0x1;
 4ee:	41 fb       	bst	r20, 1
 4f0:	55 27       	eor	r21, r21
 4f2:	50 f9       	bld	r21, 0
 4f4:	67 81       	ldd	r22, Z+7	; 0x07
 4f6:	56 27       	eor	r21, r22
 4f8:	57 83       	std	Z+7, r21	; 0x07
        bits[11] ^= (GIFT_RC[r]>>2) & 0x1;
 4fa:	42 fb       	bst	r20, 2
 4fc:	55 27       	eor	r21, r21
 4fe:	50 f9       	bld	r21, 0
 500:	63 85       	ldd	r22, Z+11	; 0x0b
 502:	56 27       	eor	r21, r22
 504:	53 87       	std	Z+11, r21	; 0x0b
        bits[15] ^= (GIFT_RC[r]>>3) & 0x1;
 506:	43 fb       	bst	r20, 3
 508:	55 27       	eor	r21, r21
 50a:	50 f9       	bld	r21, 0
 50c:	67 85       	ldd	r22, Z+15	; 0x0f
 50e:	56 27       	eor	r21, r22
 510:	57 87       	std	Z+15, r21	; 0x0f
        bits[19] ^= (GIFT_RC[r]>>4) & 0x1;
 512:	44 fb       	bst	r20, 4
 514:	55 27       	eor	r21, r21
 516:	50 f9       	bld	r21, 0
 518:	63 89       	ldd	r22, Z+19	; 0x13
 51a:	56 27       	eor	r21, r22
 51c:	53 8b       	std	Z+19, r21	; 0x13
        bits[23] ^= (GIFT_RC[r]>>5) & 0x1;
 51e:	45 fb       	bst	r20, 5
 520:	44 27       	eor	r20, r20
 522:	40 f9       	bld	r20, 0
 524:	57 89       	ldd	r21, Z+23	; 0x17
 526:	45 27       	eor	r20, r21
 528:	47 8b       	std	Z+23, r20	; 0x17
        bits[63] ^= 1;
 52a:	47 ad       	ldd	r20, Z+63	; 0x3f
 52c:	b1 e0       	ldi	r27, 0x01	; 1
 52e:	4b 27       	eor	r20, r27
 530:	47 af       	std	Z+63, r20	; 0x3f

        //bits to input
        for (uint8_t  i=0; i<16; i++){
            input[i]=0;
 532:	d4 01       	movw	r26, r8
 534:	1d 92       	st	X+, r1
 536:	4d 01       	movw	r8, r26
 538:	8f 01       	movw	r16, r30
 53a:	70 e0       	ldi	r23, 0x00	; 0
 53c:	60 e0       	ldi	r22, 0x00	; 0
 53e:	f1 2c       	mov	r15, r1
            for (uint8_t  j=0; j<4; j++){
                 input[i] ^= bits[4*i+j] << j;
 540:	d8 01       	movw	r26, r16
 542:	4d 91       	ld	r20, X+
 544:	8d 01       	movw	r16, r26
 546:	06 2e       	mov	r0, r22
 548:	01 c0       	rjmp	.+2      	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
 54a:	44 0f       	add	r20, r20
 54c:	0a 94       	dec	r0
 54e:	ea f7       	brpl	.-6      	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
 550:	f4 26       	eor	r15, r20
 552:	6f 5f       	subi	r22, 0xFF	; 255
 554:	7f 4f       	sbci	r23, 0xFF	; 255
        bits[63] ^= 1;

        //bits to input
        for (uint8_t  i=0; i<16; i++){
            input[i]=0;
            for (uint8_t  j=0; j<4; j++){
 556:	64 30       	cpi	r22, 0x04	; 4
 558:	71 05       	cpc	r23, r1
 55a:	91 f7       	brne	.-28     	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
 55c:	a4 01       	movw	r20, r8
 55e:	41 50       	subi	r20, 0x01	; 1
 560:	51 09       	sbc	r21, r1
 562:	da 01       	movw	r26, r20
 564:	fc 92       	st	X, r15
 566:	34 96       	adiw	r30, 0x04	; 4
        bits[19] ^= (GIFT_RC[r]>>4) & 0x1;
        bits[23] ^= (GIFT_RC[r]>>5) & 0x1;
        bits[63] ^= 1;

        //bits to input
        for (uint8_t  i=0; i<16; i++){
 568:	cb 5b       	subi	r28, 0xBB	; 187
 56a:	de 4f       	sbci	r29, 0xFE	; 254
 56c:	e8 80       	ld	r14, Y
 56e:	f9 80       	ldd	r15, Y+1	; 0x01
 570:	c5 54       	subi	r28, 0x45	; 69
 572:	d1 40       	sbci	r29, 0x01	; 1
 574:	8e 14       	cp	r8, r14
 576:	9f 04       	cpc	r9, r15
 578:	e1 f6       	brne	.-72     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
 57a:	6e 01       	movw	r12, r28
 57c:	31 e0       	ldi	r19, 0x01	; 1
 57e:	c3 0e       	add	r12, r19
 580:	d3 1e       	adc	r13, r19
 582:	86 01       	movw	r16, r12
 584:	48 e0       	ldi	r20, 0x08	; 8
 586:	50 e0       	ldi	r21, 0x00	; 0
 588:	f6 01       	movw	r30, r12
        }

        //key update
        //entire key>>32
        for(uint8_t  i=0; i<32; i++){
            temp_key[i] = key[(i+8)%32];
 58a:	ba 01       	movw	r22, r20
 58c:	6f 71       	andi	r22, 0x1F	; 31
 58e:	77 27       	eor	r23, r23
 590:	a1 e2       	ldi	r26, 0x21	; 33
 592:	b1 e0       	ldi	r27, 0x01	; 1
 594:	ac 0f       	add	r26, r28
 596:	bd 1f       	adc	r27, r29
 598:	6a 0f       	add	r22, r26
 59a:	7b 1f       	adc	r23, r27
 59c:	db 01       	movw	r26, r22
 59e:	6c 91       	ld	r22, X
 5a0:	d8 01       	movw	r26, r16
 5a2:	6d 93       	st	X+, r22
 5a4:	8d 01       	movw	r16, r26
 5a6:	4f 5f       	subi	r20, 0xFF	; 255
 5a8:	5f 4f       	sbci	r21, 0xFF	; 255
            }
        }

        //key update
        //entire key>>32
        for(uint8_t  i=0; i<32; i++){
 5aa:	48 32       	cpi	r20, 0x28	; 40
 5ac:	51 05       	cpc	r21, r1
 5ae:	69 f7       	brne	.-38     	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
 5b0:	b6 01       	movw	r22, r12
 5b2:	68 5e       	subi	r22, 0xE8	; 232
 5b4:	7f 4f       	sbci	r23, 0xFF	; 255
 5b6:	ae 01       	movw	r20, r28
 5b8:	4f 5d       	subi	r20, 0xDF	; 223
 5ba:	5e 4f       	sbci	r21, 0xFE	; 254
            temp_key[i] = key[(i+8)%32];
        }
        for(uint8_t i=0; i<24; i++) key[i] = temp_key[i];
 5bc:	d6 01       	movw	r26, r12
 5be:	1d 91       	ld	r17, X+
 5c0:	6d 01       	movw	r12, r26
 5c2:	da 01       	movw	r26, r20
 5c4:	1d 93       	st	X+, r17
 5c6:	ad 01       	movw	r20, r26
 5c8:	6c 15       	cp	r22, r12
 5ca:	7d 05       	cpc	r23, r13
 5cc:	b9 f7       	brne	.-18     	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
        //k0>>12
        key[24] = temp_key[27];
 5ce:	43 8d       	ldd	r20, Z+27	; 0x1b
 5d0:	c7 5c       	subi	r28, 0xC7	; 199
 5d2:	de 4f       	sbci	r29, 0xFE	; 254
 5d4:	48 83       	st	Y, r20
 5d6:	c9 53       	subi	r28, 0x39	; 57
 5d8:	d1 40       	sbci	r29, 0x01	; 1
        key[25] = temp_key[24];
 5da:	40 8d       	ldd	r20, Z+24	; 0x18
 5dc:	c6 5c       	subi	r28, 0xC6	; 198
 5de:	de 4f       	sbci	r29, 0xFE	; 254
 5e0:	48 83       	st	Y, r20
 5e2:	ca 53       	subi	r28, 0x3A	; 58
 5e4:	d1 40       	sbci	r29, 0x01	; 1
        key[26] = temp_key[25];
 5e6:	41 8d       	ldd	r20, Z+25	; 0x19
 5e8:	c5 5c       	subi	r28, 0xC5	; 197
 5ea:	de 4f       	sbci	r29, 0xFE	; 254
 5ec:	48 83       	st	Y, r20
 5ee:	cb 53       	subi	r28, 0x3B	; 59
 5f0:	d1 40       	sbci	r29, 0x01	; 1
        key[27] = temp_key[26];
 5f2:	42 8d       	ldd	r20, Z+26	; 0x1a
 5f4:	c4 5c       	subi	r28, 0xC4	; 196
 5f6:	de 4f       	sbci	r29, 0xFE	; 254
 5f8:	48 83       	st	Y, r20
 5fa:	cc 53       	subi	r28, 0x3C	; 60
 5fc:	d1 40       	sbci	r29, 0x01	; 1
        //k1>>2
        key[28] = ((temp_key[28]&0xc)>>2) ^ ((temp_key[29]&0x3)<<2);
 5fe:	a4 8d       	ldd	r26, Z+28	; 0x1c
 600:	b0 e0       	ldi	r27, 0x00	; 0
 602:	45 8d       	ldd	r20, Z+29	; 0x1d
 604:	50 e0       	ldi	r21, 0x00	; 0
 606:	bd 01       	movw	r22, r26
 608:	75 95       	asr	r23
 60a:	67 95       	ror	r22
 60c:	75 95       	asr	r23
 60e:	67 95       	ror	r22
 610:	63 70       	andi	r22, 0x03	; 3
 612:	8a 01       	movw	r16, r20
 614:	00 0f       	add	r16, r16
 616:	11 1f       	adc	r17, r17
 618:	00 0f       	add	r16, r16
 61a:	11 1f       	adc	r17, r17
 61c:	0c 70       	andi	r16, 0x0C	; 12
 61e:	60 2b       	or	r22, r16
 620:	c3 5c       	subi	r28, 0xC3	; 195
 622:	de 4f       	sbci	r29, 0xFE	; 254
 624:	68 83       	st	Y, r22
 626:	cd 53       	subi	r28, 0x3D	; 61
 628:	d1 40       	sbci	r29, 0x01	; 1
        key[29] = ((temp_key[29]&0xc)>>2) ^ ((temp_key[30]&0x3)<<2);
 62a:	66 8d       	ldd	r22, Z+30	; 0x1e
 62c:	70 e0       	ldi	r23, 0x00	; 0
 62e:	55 95       	asr	r21
 630:	47 95       	ror	r20
 632:	55 95       	asr	r21
 634:	47 95       	ror	r20
 636:	43 70       	andi	r20, 0x03	; 3
 638:	8b 01       	movw	r16, r22
 63a:	00 0f       	add	r16, r16
 63c:	11 1f       	adc	r17, r17
 63e:	00 0f       	add	r16, r16
 640:	11 1f       	adc	r17, r17
 642:	0c 70       	andi	r16, 0x0C	; 12
 644:	40 2b       	or	r20, r16
 646:	c2 5c       	subi	r28, 0xC2	; 194
 648:	de 4f       	sbci	r29, 0xFE	; 254
 64a:	48 83       	st	Y, r20
 64c:	ce 53       	subi	r28, 0x3E	; 62
 64e:	d1 40       	sbci	r29, 0x01	; 1
        key[30] = ((temp_key[30]&0xc)>>2) ^ ((temp_key[31]&0x3)<<2);
 650:	47 8d       	ldd	r20, Z+31	; 0x1f
 652:	50 e0       	ldi	r21, 0x00	; 0
 654:	75 95       	asr	r23
 656:	67 95       	ror	r22
 658:	75 95       	asr	r23
 65a:	67 95       	ror	r22
 65c:	63 70       	andi	r22, 0x03	; 3
 65e:	fa 01       	movw	r30, r20
 660:	ee 0f       	add	r30, r30
 662:	ff 1f       	adc	r31, r31
 664:	ee 0f       	add	r30, r30
 666:	ff 1f       	adc	r31, r31
 668:	ec 70       	andi	r30, 0x0C	; 12
 66a:	6e 2b       	or	r22, r30
 66c:	c1 5c       	subi	r28, 0xC1	; 193
 66e:	de 4f       	sbci	r29, 0xFE	; 254
 670:	68 83       	st	Y, r22
 672:	cf 53       	subi	r28, 0x3F	; 63
 674:	d1 40       	sbci	r29, 0x01	; 1
        key[31] = ((temp_key[31]&0xc)>>2) ^ ((temp_key[28]&0x3)<<2);
 676:	55 95       	asr	r21
 678:	47 95       	ror	r20
 67a:	55 95       	asr	r21
 67c:	47 95       	ror	r20
 67e:	43 70       	andi	r20, 0x03	; 3
 680:	aa 0f       	add	r26, r26
 682:	bb 1f       	adc	r27, r27
 684:	aa 0f       	add	r26, r26
 686:	bb 1f       	adc	r27, r27
 688:	ac 70       	andi	r26, 0x0C	; 12
 68a:	4a 2b       	or	r20, r26
 68c:	c0 5c       	subi	r28, 0xC0	; 192
 68e:	de 4f       	sbci	r29, 0xFE	; 254
 690:	48 83       	st	Y, r20
 692:	c0 54       	subi	r28, 0x40	; 64
 694:	d1 40       	sbci	r29, 0x01	; 1
    }

    uint8_t bits[64], perm_bits[64];
    uint8_t key_bits[128];
    uint8_t temp_key[32];
    for (uint8_t r=0; r<no_of_rounds; r++){
 696:	2f 5f       	subi	r18, 0xFF	; 255
 698:	05 ce       	rjmp	.-1014   	; 0x2a4 <enc64+0x76>

0000069a <get_pt>:


uint8_t get_pt(uint8_t* pt)
{
 69a:	cf 93       	push	r28
 69c:	df 93       	push	r29
 69e:	c0 ee       	ldi	r28, 0xE0	; 224
 6a0:	d1 e2       	ldi	r29, 0x21	; 33
 6a2:	9c 01       	movw	r18, r24
 6a4:	20 5f       	subi	r18, 0xF0	; 240
 6a6:	3f 4f       	sbci	r19, 0xFF	; 255
 6a8:	fe 01       	movw	r30, r28

    for(int i=0; i < 16; i++){
        msg_copy[i]=pt[i]; 
 6aa:	dc 01       	movw	r26, r24
 6ac:	4d 91       	ld	r20, X+
 6ae:	cd 01       	movw	r24, r26
 6b0:	41 93       	st	Z+, r20


uint8_t get_pt(uint8_t* pt)
{

    for(int i=0; i < 16; i++){
 6b2:	a2 17       	cp	r26, r18
 6b4:	b3 07       	cpc	r27, r19
 6b6:	c9 f7       	brne	.-14     	; 0x6aa <get_pt+0x10>
        msg_copy[i]=pt[i]; 
    }
    
    //trigger_high();
    enc64(msg_copy,K,28,1);
 6b8:	21 e0       	ldi	r18, 0x01	; 1
 6ba:	4c e1       	ldi	r20, 0x1C	; 28
 6bc:	50 e0       	ldi	r21, 0x00	; 0
 6be:	60 e0       	ldi	r22, 0x00	; 0
 6c0:	70 e2       	ldi	r23, 0x20	; 32
 6c2:	80 ee       	ldi	r24, 0xE0	; 224
 6c4:	91 e2       	ldi	r25, 0x21	; 33
 6c6:	0e 94 17 01 	call	0x22e	; 0x22e <enc64>
 6ca:	e0 ee       	ldi	r30, 0xE0	; 224
 6cc:	f1 e2       	ldi	r31, 0x21	; 33
    //trigger_low();
    
    for(int i=0; i < 16; i++){
        msg1_copy[15-i]=msg_copy[i]; 
 6ce:	89 91       	ld	r24, Y+
 6d0:	82 93       	st	-Z, r24
    
    //trigger_high();
    enc64(msg_copy,K,28,1);
    //trigger_low();
    
    for(int i=0; i < 16; i++){
 6d2:	b1 e2       	ldi	r27, 0x21	; 33
 6d4:	e0 3d       	cpi	r30, 0xD0	; 208
 6d6:	fb 07       	cpc	r31, r27
 6d8:	d1 f7       	brne	.-12     	; 0x6ce <get_pt+0x34>
        msg1_copy[15-i]=msg_copy[i]; 
    }
    
    
    simpleserial_put('r', 16, msg1_copy);
 6da:	40 ed       	ldi	r20, 0xD0	; 208
 6dc:	51 e2       	ldi	r21, 0x21	; 33
 6de:	60 e1       	ldi	r22, 0x10	; 16
 6e0:	82 e7       	ldi	r24, 0x72	; 114
 6e2:	0e 94 0c 04 	call	0x818	; 0x818 <simpleserial_put>

   return 0x00;
}
 6e6:	80 e0       	ldi	r24, 0x00	; 0
 6e8:	df 91       	pop	r29
 6ea:	cf 91       	pop	r28
 6ec:	08 95       	ret

000006ee <check_version>:
// Callback function for "v" command.
// This can exist in v1.0 as long as we don't actually send back an ack ("z")
uint8_t check_version(uint8_t *v, uint8_t len)
{
	return SS_VER;
}
 6ee:	81 e0       	ldi	r24, 0x01	; 1
 6f0:	08 95       	ret

000006f2 <ss_crc>:
//#define SS_VER_2_0 2


#define CRC 0xA6
uint8_t ss_crc(uint8_t *buf, uint8_t len)
{
 6f2:	fc 01       	movw	r30, r24
	unsigned int k = 0;
	uint8_t crc = 0x00;
 6f4:	80 e0       	ldi	r24, 0x00	; 0
	while (len--) {
		crc ^= *buf++;
		for (k = 0; k < 8; k++) {
			crc = crc & 0x80 ? (crc << 1) ^ 0xA6: crc << 1;
 6f6:	46 ea       	ldi	r20, 0xA6	; 166
#define CRC 0xA6
uint8_t ss_crc(uint8_t *buf, uint8_t len)
{
	unsigned int k = 0;
	uint8_t crc = 0x00;
	while (len--) {
 6f8:	61 50       	subi	r22, 0x01	; 1
 6fa:	08 f4       	brcc	.+2      	; 0x6fe <ss_crc+0xc>
			crc = crc & 0x80 ? (crc << 1) ^ 0xA6: crc << 1;
		}
	}
	return crc;

}
 6fc:	08 95       	ret
uint8_t ss_crc(uint8_t *buf, uint8_t len)
{
	unsigned int k = 0;
	uint8_t crc = 0x00;
	while (len--) {
		crc ^= *buf++;
 6fe:	91 91       	ld	r25, Z+
 700:	98 27       	eor	r25, r24
 702:	28 e0       	ldi	r18, 0x08	; 8
 704:	30 e0       	ldi	r19, 0x00	; 0
		for (k = 0; k < 8; k++) {
			crc = crc & 0x80 ? (crc << 1) ^ 0xA6: crc << 1;
 706:	97 ff       	sbrs	r25, 7
 708:	07 c0       	rjmp	.+14     	; 0x718 <ss_crc+0x26>
 70a:	99 0f       	add	r25, r25
 70c:	94 27       	eor	r25, r20
 70e:	21 50       	subi	r18, 0x01	; 1
 710:	31 09       	sbc	r19, r1
 712:	89 2f       	mov	r24, r25
{
	unsigned int k = 0;
	uint8_t crc = 0x00;
	while (len--) {
		crc ^= *buf++;
		for (k = 0; k < 8; k++) {
 714:	c1 f7       	brne	.-16     	; 0x706 <ss_crc+0x14>
 716:	f0 cf       	rjmp	.-32     	; 0x6f8 <ss_crc+0x6>
			crc = crc & 0x80 ? (crc << 1) ^ 0xA6: crc << 1;
 718:	99 0f       	add	r25, r25
 71a:	f9 cf       	rjmp	.-14     	; 0x70e <ss_crc+0x1c>

0000071c <hex_decode>:
	'0', '1', '2', '3', '4', '5', '6', '7',
	'8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
};

int hex_decode(int len, char* ascii_buf, uint8_t* data_buf)
{
 71c:	db 01       	movw	r26, r22
	for(int i = 0; i < len; i++)
 71e:	fa 01       	movw	r30, r20
 720:	9f 01       	movw	r18, r30
 722:	24 1b       	sub	r18, r20
 724:	35 0b       	sbc	r19, r21
 726:	28 17       	cp	r18, r24
 728:	39 07       	cpc	r19, r25
 72a:	1c f0       	brlt	.+6      	; 0x732 <hex_decode+0x16>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
		else
			return 1;
	}

	return 0;
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	80 e0       	ldi	r24, 0x00	; 0
}
 730:	08 95       	ret

int hex_decode(int len, char* ascii_buf, uint8_t* data_buf)
{
	for(int i = 0; i < len; i++)
	{
		char n_hi = ascii_buf[2*i];
 732:	2c 91       	ld	r18, X
		char n_lo = ascii_buf[2*i+1];
 734:	11 96       	adiw	r26, 0x01	; 1
 736:	3c 91       	ld	r19, X
 738:	11 97       	sbiw	r26, 0x01	; 1

		if(n_lo >= '0' && n_lo <= '9')
 73a:	60 ed       	ldi	r22, 0xD0	; 208
 73c:	63 0f       	add	r22, r19
 73e:	6a 30       	cpi	r22, 0x0A	; 10
 740:	68 f4       	brcc	.+26     	; 0x75c <hex_decode+0x40>
			data_buf[i] = n_lo - '0';
 742:	60 83       	st	Z, r22
		else if(n_lo >= 'a' && n_lo <= 'f')
			data_buf[i] = n_lo - 'a' + 10;
		else
			return 1;

		if(n_hi >= '0' && n_hi <= '9')
 744:	30 ed       	ldi	r19, 0xD0	; 208
 746:	32 0f       	add	r19, r18
 748:	3a 30       	cpi	r19, 0x0A	; 10
 74a:	c0 f4       	brcc	.+48     	; 0x77c <hex_decode+0x60>
			data_buf[i] |= (n_hi - '0') << 4;
 74c:	22 95       	swap	r18
 74e:	20 7f       	andi	r18, 0xF0	; 240
		else if(n_hi >= 'A' && n_hi <= 'F')
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
		else if(n_hi >= 'a' && n_hi <= 'f')
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 750:	30 81       	ld	r19, Z
 752:	23 2b       	or	r18, r19
 754:	20 83       	st	Z, r18
 756:	31 96       	adiw	r30, 0x01	; 1
 758:	12 96       	adiw	r26, 0x02	; 2
 75a:	e2 cf       	rjmp	.-60     	; 0x720 <hex_decode+0x4>
		char n_hi = ascii_buf[2*i];
		char n_lo = ascii_buf[2*i+1];

		if(n_lo >= '0' && n_lo <= '9')
			data_buf[i] = n_lo - '0';
		else if(n_lo >= 'A' && n_lo <= 'F')
 75c:	6f eb       	ldi	r22, 0xBF	; 191
 75e:	63 0f       	add	r22, r19
 760:	66 30       	cpi	r22, 0x06	; 6
 762:	18 f4       	brcc	.+6      	; 0x76a <hex_decode+0x4e>
			data_buf[i] = n_lo - 'A' + 10;
 764:	37 53       	subi	r19, 0x37	; 55
		else if(n_lo >= 'a' && n_lo <= 'f')
			data_buf[i] = n_lo - 'a' + 10;
 766:	30 83       	st	Z, r19
 768:	ed cf       	rjmp	.-38     	; 0x744 <hex_decode+0x28>

		if(n_lo >= '0' && n_lo <= '9')
			data_buf[i] = n_lo - '0';
		else if(n_lo >= 'A' && n_lo <= 'F')
			data_buf[i] = n_lo - 'A' + 10;
		else if(n_lo >= 'a' && n_lo <= 'f')
 76a:	6f e9       	ldi	r22, 0x9F	; 159
 76c:	63 0f       	add	r22, r19
 76e:	66 30       	cpi	r22, 0x06	; 6
 770:	18 f0       	brcs	.+6      	; 0x778 <hex_decode+0x5c>
			data_buf[i] = n_lo - 'a' + 10;
		else
			return 1;
 772:	81 e0       	ldi	r24, 0x01	; 1
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	08 95       	ret
		if(n_lo >= '0' && n_lo <= '9')
			data_buf[i] = n_lo - '0';
		else if(n_lo >= 'A' && n_lo <= 'F')
			data_buf[i] = n_lo - 'A' + 10;
		else if(n_lo >= 'a' && n_lo <= 'f')
			data_buf[i] = n_lo - 'a' + 10;
 778:	37 55       	subi	r19, 0x57	; 87
 77a:	f5 cf       	rjmp	.-22     	; 0x766 <hex_decode+0x4a>
		else
			return 1;

		if(n_hi >= '0' && n_hi <= '9')
			data_buf[i] |= (n_hi - '0') << 4;
		else if(n_hi >= 'A' && n_hi <= 'F')
 77c:	3f eb       	ldi	r19, 0xBF	; 191
 77e:	32 0f       	add	r19, r18
 780:	36 30       	cpi	r19, 0x06	; 6
 782:	40 f4       	brcc	.+16     	; 0x794 <hex_decode+0x78>
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 784:	27 53       	subi	r18, 0x37	; 55
 786:	33 0b       	sbc	r19, r19
		else if(n_hi >= 'a' && n_hi <= 'f')
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 788:	64 e0       	ldi	r22, 0x04	; 4
 78a:	22 0f       	add	r18, r18
 78c:	33 1f       	adc	r19, r19
 78e:	6a 95       	dec	r22
 790:	e1 f7       	brne	.-8      	; 0x78a <hex_decode+0x6e>
 792:	de cf       	rjmp	.-68     	; 0x750 <hex_decode+0x34>

		if(n_hi >= '0' && n_hi <= '9')
			data_buf[i] |= (n_hi - '0') << 4;
		else if(n_hi >= 'A' && n_hi <= 'F')
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
		else if(n_hi >= 'a' && n_hi <= 'f')
 794:	3f e9       	ldi	r19, 0x9F	; 159
 796:	32 0f       	add	r19, r18
 798:	36 30       	cpi	r19, 0x06	; 6
 79a:	58 f7       	brcc	.-42     	; 0x772 <hex_decode+0x56>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 79c:	27 55       	subi	r18, 0x57	; 87
 79e:	33 0b       	sbc	r19, r19
 7a0:	f3 cf       	rjmp	.-26     	; 0x788 <hex_decode+0x6c>

000007a2 <simpleserial_addcmd_flags>:
	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
}

int simpleserial_addcmd_flags(char c, unsigned int len, uint8_t (*fp)(uint8_t*, uint8_t), uint8_t fl)
{
	if(num_commands >= MAX_SS_CMDS)
 7a2:	a0 91 ce 21 	lds	r26, 0x21CE	; 0x8021ce <num_commands>
 7a6:	b0 91 cf 21 	lds	r27, 0x21CF	; 0x8021cf <num_commands+0x1>
 7aa:	a0 32       	cpi	r26, 0x20	; 32
 7ac:	b1 05       	cpc	r27, r1
 7ae:	cc f4       	brge	.+50     	; 0x7e2 <simpleserial_addcmd_flags+0x40>
		return 1;

	if(len >= MAX_SS_LEN)
 7b0:	60 3c       	cpi	r22, 0xC0	; 192
 7b2:	71 05       	cpc	r23, r1
 7b4:	b0 f4       	brcc	.+44     	; 0x7e2 <simpleserial_addcmd_flags+0x40>
		return 1;

	commands[num_commands].c   = c;
 7b6:	96 e0       	ldi	r25, 0x06	; 6
 7b8:	9a 9f       	mul	r25, r26
 7ba:	f0 01       	movw	r30, r0
 7bc:	9b 9f       	mul	r25, r27
 7be:	f0 0d       	add	r31, r0
 7c0:	11 24       	eor	r1, r1
 7c2:	e2 5f       	subi	r30, 0xF2	; 242
 7c4:	fe 4d       	sbci	r31, 0xDE	; 222
 7c6:	80 83       	st	Z, r24
	commands[num_commands].len = len;
 7c8:	61 83       	std	Z+1, r22	; 0x01
 7ca:	72 83       	std	Z+2, r23	; 0x02
	commands[num_commands].fp  = fp;
 7cc:	43 83       	std	Z+3, r20	; 0x03
 7ce:	54 83       	std	Z+4, r21	; 0x04
	commands[num_commands].flags = fl;
 7d0:	25 83       	std	Z+5, r18	; 0x05
	num_commands++;
 7d2:	11 96       	adiw	r26, 0x01	; 1
 7d4:	a0 93 ce 21 	sts	0x21CE, r26	; 0x8021ce <num_commands>
 7d8:	b0 93 cf 21 	sts	0x21CF, r27	; 0x8021cf <num_commands+0x1>

	return 0;
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	80 e0       	ldi	r24, 0x00	; 0
 7e0:	08 95       	ret
}

int simpleserial_addcmd_flags(char c, unsigned int len, uint8_t (*fp)(uint8_t*, uint8_t), uint8_t fl)
{
	if(num_commands >= MAX_SS_CMDS)
		return 1;
 7e2:	81 e0       	ldi	r24, 0x01	; 1
 7e4:	90 e0       	ldi	r25, 0x00	; 0
	commands[num_commands].fp  = fp;
	commands[num_commands].flags = fl;
	num_commands++;

	return 0;
}
 7e6:	08 95       	ret

000007e8 <simpleserial_addcmd>:
    simpleserial_addcmd('y', 0, ss_num_commands);
}

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t*, uint8_t))
{
	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
 7e8:	20 e0       	ldi	r18, 0x00	; 0
 7ea:	0c 94 d1 03 	jmp	0x7a2	; 0x7a2 <simpleserial_addcmd_flags>

000007ee <simpleserial_init>:

// Set up the SimpleSerial module by preparing internal commands
// This just adds the "v" command for now...
void simpleserial_init()
{
	simpleserial_addcmd('v', 0, check_version);
 7ee:	47 e7       	ldi	r20, 0x77	; 119
 7f0:	53 e0       	ldi	r21, 0x03	; 3
 7f2:	70 e0       	ldi	r23, 0x00	; 0
 7f4:	60 e0       	ldi	r22, 0x00	; 0
 7f6:	86 e7       	ldi	r24, 0x76	; 118
 7f8:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <simpleserial_addcmd>
    simpleserial_addcmd('w', 0, ss_get_commands);
 7fc:	4f e4       	ldi	r20, 0x4F	; 79
 7fe:	54 e0       	ldi	r21, 0x04	; 4
 800:	70 e0       	ldi	r23, 0x00	; 0
 802:	60 e0       	ldi	r22, 0x00	; 0
 804:	87 e7       	ldi	r24, 0x77	; 119
 806:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <simpleserial_addcmd>
    simpleserial_addcmd('y', 0, ss_num_commands);
 80a:	4b e3       	ldi	r20, 0x3B	; 59
 80c:	54 e0       	ldi	r21, 0x04	; 4
 80e:	70 e0       	ldi	r23, 0x00	; 0
 810:	60 e0       	ldi	r22, 0x00	; 0
 812:	89 e7       	ldi	r24, 0x79	; 121
 814:	0c 94 f4 03 	jmp	0x7e8	; 0x7e8 <simpleserial_addcmd>

00000818 <simpleserial_put>:
	simpleserial_put('z', 1, ret);
#endif
}

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 818:	ef 92       	push	r14
 81a:	ff 92       	push	r15
 81c:	0f 93       	push	r16
 81e:	1f 93       	push	r17
 820:	cf 93       	push	r28
 822:	df 93       	push	r29
 824:	06 2f       	mov	r16, r22
 826:	7a 01       	movw	r14, r20
	// Write first character
	putch(c);
 828:	0e 94 92 05 	call	0xb24	; 0xb24 <output_ch_0>

	// Write each byte as two nibbles
	for(int i = 0; i < size; i++)
 82c:	e7 01       	movw	r28, r14
 82e:	10 e0       	ldi	r17, 0x00	; 0
 830:	ce 01       	movw	r24, r28
 832:	8e 19       	sub	r24, r14
 834:	9f 09       	sbc	r25, r15
 836:	80 17       	cp	r24, r16
 838:	91 07       	cpc	r25, r17
 83a:	4c f0       	brlt	.+18     	; 0x84e <simpleserial_put+0x36>
		putch(hex_lookup[output[i] >> 4 ]);
		putch(hex_lookup[output[i] & 0xF]);
	}

	// Write trailing '\n'
	putch('\n');
 83c:	8a e0       	ldi	r24, 0x0A	; 10
}
 83e:	df 91       	pop	r29
 840:	cf 91       	pop	r28
 842:	1f 91       	pop	r17
 844:	0f 91       	pop	r16
 846:	ff 90       	pop	r15
 848:	ef 90       	pop	r14
		putch(hex_lookup[output[i] >> 4 ]);
		putch(hex_lookup[output[i] & 0xF]);
	}

	// Write trailing '\n'
	putch('\n');
 84a:	0c 94 92 05 	jmp	0xb24	; 0xb24 <output_ch_0>
	putch(c);

	// Write each byte as two nibbles
	for(int i = 0; i < size; i++)
	{
		putch(hex_lookup[output[i] >> 4 ]);
 84e:	e9 91       	ld	r30, Y+
 850:	e2 95       	swap	r30
 852:	ef 70       	andi	r30, 0x0F	; 15
 854:	f0 e0       	ldi	r31, 0x00	; 0
 856:	e2 50       	subi	r30, 0x02	; 2
 858:	ff 4d       	sbci	r31, 0xDF	; 223
 85a:	80 81       	ld	r24, Z
 85c:	0e 94 92 05 	call	0xb24	; 0xb24 <output_ch_0>
		putch(hex_lookup[output[i] & 0xF]);
 860:	fe 01       	movw	r30, r28
 862:	31 97       	sbiw	r30, 0x01	; 1
 864:	e0 81       	ld	r30, Z
 866:	ef 70       	andi	r30, 0x0F	; 15
 868:	f0 e0       	ldi	r31, 0x00	; 0
 86a:	e2 50       	subi	r30, 0x02	; 2
 86c:	ff 4d       	sbci	r31, 0xDF	; 223
 86e:	80 81       	ld	r24, Z
 870:	0e 94 92 05 	call	0xb24	; 0xb24 <output_ch_0>
 874:	dd cf       	rjmp	.-70     	; 0x830 <simpleserial_put+0x18>

00000876 <ss_num_commands>:
{
	return SS_VER;
}

uint8_t ss_num_commands(uint8_t *x, uint8_t len)
{
 876:	cf 93       	push	r28
 878:	df 93       	push	r29
 87a:	1f 92       	push	r1
 87c:	cd b7       	in	r28, 0x3d	; 61
 87e:	de b7       	in	r29, 0x3e	; 62
    uint8_t ncmds = num_commands & 0xFF;
 880:	80 91 ce 21 	lds	r24, 0x21CE	; 0x8021ce <num_commands>
 884:	89 83       	std	Y+1, r24	; 0x01
    simpleserial_put('r', 0x01, &ncmds);
 886:	ae 01       	movw	r20, r28
 888:	4f 5f       	subi	r20, 0xFF	; 255
 88a:	5f 4f       	sbci	r21, 0xFF	; 255
 88c:	61 e0       	ldi	r22, 0x01	; 1
 88e:	82 e7       	ldi	r24, 0x72	; 114
 890:	0e 94 0c 04 	call	0x818	; 0x818 <simpleserial_put>
    return 0x00;
}
 894:	80 e0       	ldi	r24, 0x00	; 0
 896:	0f 90       	pop	r0
 898:	df 91       	pop	r29
 89a:	cf 91       	pop	r28
 89c:	08 95       	ret

0000089e <ss_get_commands>:
    uint8_t len;
    uint8_t flags;
} ss_cmd_repr;

uint8_t ss_get_commands(uint8_t *x, uint8_t len)
{
 89e:	cf 93       	push	r28
 8a0:	df 93       	push	r29
 8a2:	cd b7       	in	r28, 0x3d	; 61
 8a4:	de b7       	in	r29, 0x3e	; 62
 8a6:	c0 56       	subi	r28, 0x60	; 96
 8a8:	d1 09       	sbc	r29, r1
 8aa:	cd bf       	out	0x3d, r28	; 61
 8ac:	de bf       	out	0x3e, r29	; 62
    ss_cmd_repr repr_cmd_buf[MAX_SS_CMDS];
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8ae:	20 91 ce 21 	lds	r18, 0x21CE	; 0x8021ce <num_commands>
 8b2:	30 91 cf 21 	lds	r19, 0x21CF	; 0x8021cf <num_commands+0x1>
 8b6:	b9 01       	movw	r22, r18
 8b8:	77 27       	eor	r23, r23
 8ba:	40 e0       	ldi	r20, 0x00	; 0
        repr_cmd_buf[i].c = commands[i].c;
 8bc:	56 e0       	ldi	r21, 0x06	; 6
} ss_cmd_repr;

uint8_t ss_get_commands(uint8_t *x, uint8_t len)
{
    ss_cmd_repr repr_cmd_buf[MAX_SS_CMDS];
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8be:	84 2f       	mov	r24, r20
 8c0:	90 e0       	ldi	r25, 0x00	; 0
 8c2:	86 17       	cp	r24, r22
 8c4:	97 07       	cpc	r25, r23
 8c6:	8c f0       	brlt	.+34     	; 0x8ea <ss_get_commands+0x4c>
        repr_cmd_buf[i].c = commands[i].c;
        repr_cmd_buf[i].len = commands[i].len;
        repr_cmd_buf[i].flags = commands[i].flags;
    }

    simpleserial_put('r', num_commands * 0x03, &repr_cmd_buf);
 8c8:	62 2f       	mov	r22, r18
 8ca:	66 0f       	add	r22, r22
 8cc:	62 0f       	add	r22, r18
 8ce:	ae 01       	movw	r20, r28
 8d0:	4f 5f       	subi	r20, 0xFF	; 255
 8d2:	5f 4f       	sbci	r21, 0xFF	; 255
 8d4:	82 e7       	ldi	r24, 0x72	; 114
 8d6:	0e 94 0c 04 	call	0x818	; 0x818 <simpleserial_put>
    return 0x00;
}
 8da:	80 e0       	ldi	r24, 0x00	; 0
 8dc:	c0 5a       	subi	r28, 0xA0	; 160
 8de:	df 4f       	sbci	r29, 0xFF	; 255
 8e0:	cd bf       	out	0x3d, r28	; 61
 8e2:	de bf       	out	0x3e, r29	; 62
 8e4:	df 91       	pop	r29
 8e6:	cf 91       	pop	r28
 8e8:	08 95       	ret

uint8_t ss_get_commands(uint8_t *x, uint8_t len)
{
    ss_cmd_repr repr_cmd_buf[MAX_SS_CMDS];
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
        repr_cmd_buf[i].c = commands[i].c;
 8ea:	fc 01       	movw	r30, r24
 8ec:	ee 0f       	add	r30, r30
 8ee:	ff 1f       	adc	r31, r31
 8f0:	e8 0f       	add	r30, r24
 8f2:	f9 1f       	adc	r31, r25
 8f4:	a1 e0       	ldi	r26, 0x01	; 1
 8f6:	b0 e0       	ldi	r27, 0x00	; 0
 8f8:	ac 0f       	add	r26, r28
 8fa:	bd 1f       	adc	r27, r29
 8fc:	ea 0f       	add	r30, r26
 8fe:	fb 1f       	adc	r31, r27
 900:	58 9f       	mul	r21, r24
 902:	d0 01       	movw	r26, r0
 904:	59 9f       	mul	r21, r25
 906:	b0 0d       	add	r27, r0
 908:	11 24       	eor	r1, r1
 90a:	a2 5f       	subi	r26, 0xF2	; 242
 90c:	be 4d       	sbci	r27, 0xDE	; 222
 90e:	8c 91       	ld	r24, X
 910:	80 83       	st	Z, r24
        repr_cmd_buf[i].len = commands[i].len;
 912:	11 96       	adiw	r26, 0x01	; 1
 914:	8c 91       	ld	r24, X
 916:	11 97       	sbiw	r26, 0x01	; 1
 918:	81 83       	std	Z+1, r24	; 0x01
        repr_cmd_buf[i].flags = commands[i].flags;
 91a:	15 96       	adiw	r26, 0x05	; 5
 91c:	8c 91       	ld	r24, X
 91e:	82 83       	std	Z+2, r24	; 0x02
} ss_cmd_repr;

uint8_t ss_get_commands(uint8_t *x, uint8_t len)
{
    ss_cmd_repr repr_cmd_buf[MAX_SS_CMDS];
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 920:	4f 5f       	subi	r20, 0xFF	; 255
 922:	cd cf       	rjmp	.-102    	; 0x8be <ss_get_commands+0x20>

00000924 <simpleserial_get>:

	return 0;
}

void simpleserial_get(void)
{
 924:	af 92       	push	r10
 926:	bf 92       	push	r11
 928:	cf 92       	push	r12
 92a:	df 92       	push	r13
 92c:	ef 92       	push	r14
 92e:	ff 92       	push	r15
 930:	0f 93       	push	r16
 932:	1f 93       	push	r17
 934:	cf 93       	push	r28
 936:	df 93       	push	r29
 938:	cd b7       	in	r28, 0x3d	; 61
 93a:	de b7       	in	r29, 0x3e	; 62
 93c:	c1 54       	subi	r28, 0x41	; 65
 93e:	d2 40       	sbci	r29, 0x02	; 2
 940:	cd bf       	out	0x3d, r28	; 61
 942:	de bf       	out	0x3e, r29	; 62
	char ascii_buf[2*MAX_SS_LEN];
	uint8_t data_buf[MAX_SS_LEN];
	char c;

	// Find which command we're receiving
	c = getch();
 944:	0e 94 8b 05 	call	0xb16	; 0xb16 <input_ch_0>

	int cmd;
	for(cmd = 0; cmd < num_commands; cmd++)
 948:	40 91 ce 21 	lds	r20, 0x21CE	; 0x8021ce <num_commands>
 94c:	50 91 cf 21 	lds	r21, 0x21CF	; 0x8021cf <num_commands+0x1>
 950:	2e e0       	ldi	r18, 0x0E	; 14
 952:	31 e2       	ldi	r19, 0x21	; 33
 954:	10 e0       	ldi	r17, 0x00	; 0
 956:	00 e0       	ldi	r16, 0x00	; 0
 958:	04 17       	cp	r16, r20
 95a:	15 07       	cpc	r17, r21
 95c:	94 f0       	brlt	.+36     	; 0x982 <simpleserial_get+0x5e>
		if(commands[cmd].c == c)
			break;
	}

	// If we didn't find a match, give up right away
	if(cmd == num_commands)
 95e:	40 17       	cp	r20, r16
 960:	51 07       	cpc	r21, r17
 962:	b1 f4       	brne	.+44     	; 0x990 <simpleserial_get+0x6c>

	// Acknowledge (if version is 1.1)
#if SS_VER == SS_VER_1_1
	simpleserial_put('z', 1, ret);
#endif
}
 964:	cf 5b       	subi	r28, 0xBF	; 191
 966:	dd 4f       	sbci	r29, 0xFD	; 253
 968:	cd bf       	out	0x3d, r28	; 61
 96a:	de bf       	out	0x3e, r29	; 62
 96c:	df 91       	pop	r29
 96e:	cf 91       	pop	r28
 970:	1f 91       	pop	r17
 972:	0f 91       	pop	r16
 974:	ff 90       	pop	r15
 976:	ef 90       	pop	r14
 978:	df 90       	pop	r13
 97a:	cf 90       	pop	r12
 97c:	bf 90       	pop	r11
 97e:	af 90       	pop	r10
 980:	08 95       	ret
 982:	2a 5f       	subi	r18, 0xFA	; 250
 984:	3f 4f       	sbci	r19, 0xFF	; 255
	c = getch();

	int cmd;
	for(cmd = 0; cmd < num_commands; cmd++)
	{
		if(commands[cmd].c == c)
 986:	f9 01       	movw	r30, r18
 988:	36 97       	sbiw	r30, 0x06	; 6
 98a:	90 81       	ld	r25, Z
 98c:	98 13       	cpse	r25, r24
 98e:	7e c0       	rjmp	.+252    	; 0xa8c <simpleserial_get+0x168>
	// If we didn't find a match, give up right away
	if(cmd == num_commands)
		return;

	// If flag CMD_FLAG_LEN is set, the next byte indicates the sent length
	if ((commands[cmd].flags & CMD_FLAG_LEN) != 0)
 990:	26 e0       	ldi	r18, 0x06	; 6
 992:	20 9f       	mul	r18, r16
 994:	c0 01       	movw	r24, r0
 996:	21 9f       	mul	r18, r17
 998:	90 0d       	add	r25, r0
 99a:	11 24       	eor	r1, r1
 99c:	9c 01       	movw	r18, r24
 99e:	22 5f       	subi	r18, 0xF2	; 242
 9a0:	3e 4d       	sbci	r19, 0xDE	; 222
 9a2:	69 01       	movw	r12, r18
 9a4:	d9 01       	movw	r26, r18
 9a6:	15 96       	adiw	r26, 0x05	; 5
 9a8:	8c 91       	ld	r24, X
 9aa:	fe 01       	movw	r30, r28
 9ac:	31 96       	adiw	r30, 0x01	; 1
 9ae:	7f 01       	movw	r14, r30
 9b0:	80 ff       	sbrs	r24, 0
 9b2:	20 c0       	rjmp	.+64     	; 0x9f4 <simpleserial_get+0xd0>
	{
		uint8_t l = 0;
 9b4:	cf 57       	subi	r28, 0x7F	; 127
 9b6:	de 4f       	sbci	r29, 0xFE	; 254
 9b8:	18 82       	st	Y, r1
 9ba:	c1 58       	subi	r28, 0x81	; 129
 9bc:	d1 40       	sbci	r29, 0x01	; 1
		char buff[2];
		buff[0] = getch();
 9be:	0e 94 8b 05 	call	0xb16	; 0xb16 <input_ch_0>
 9c2:	89 83       	std	Y+1, r24	; 0x01
		buff[1] = getch();
 9c4:	0e 94 8b 05 	call	0xb16	; 0xb16 <input_ch_0>
 9c8:	8a 83       	std	Y+2, r24	; 0x02
		if (hex_decode(1, buff, &l))
 9ca:	ae 01       	movw	r20, r28
 9cc:	4f 57       	subi	r20, 0x7F	; 127
 9ce:	5e 4f       	sbci	r21, 0xFE	; 254
 9d0:	b7 01       	movw	r22, r14
 9d2:	81 e0       	ldi	r24, 0x01	; 1
 9d4:	90 e0       	ldi	r25, 0x00	; 0
 9d6:	0e 94 8e 03 	call	0x71c	; 0x71c <hex_decode>
 9da:	89 2b       	or	r24, r25
 9dc:	19 f6       	brne	.-122    	; 0x964 <simpleserial_get+0x40>
			return;
		commands[cmd].len = l;
 9de:	cf 57       	subi	r28, 0x7F	; 127
 9e0:	de 4f       	sbci	r29, 0xFE	; 254
 9e2:	88 81       	ld	r24, Y
 9e4:	c1 58       	subi	r28, 0x81	; 129
 9e6:	d1 40       	sbci	r29, 0x01	; 1
 9e8:	90 e0       	ldi	r25, 0x00	; 0
 9ea:	d6 01       	movw	r26, r12
 9ec:	11 96       	adiw	r26, 0x01	; 1
 9ee:	8d 93       	st	X+, r24
 9f0:	9c 93       	st	X, r25
 9f2:	12 97       	sbiw	r26, 0x02	; 2

	// Find which command we're receiving
	c = getch();

	int cmd;
	for(cmd = 0; cmd < num_commands; cmd++)
 9f4:	67 01       	movw	r12, r14
			return;
		commands[cmd].len = l;
	}

	// Receive characters until we fill the ASCII buffer
	for(int i = 0; i < 2*commands[cmd].len; i++)
 9f6:	26 e0       	ldi	r18, 0x06	; 6
 9f8:	20 9f       	mul	r18, r16
 9fa:	c0 01       	movw	r24, r0
 9fc:	21 9f       	mul	r18, r17
 9fe:	90 0d       	add	r25, r0
 a00:	11 24       	eor	r1, r1
 a02:	fc 01       	movw	r30, r24
 a04:	e1 5f       	subi	r30, 0xF1	; 241
 a06:	fe 4d       	sbci	r31, 0xDE	; 222
 a08:	5f 01       	movw	r10, r30
 a0a:	f5 01       	movw	r30, r10
 a0c:	80 81       	ld	r24, Z
 a0e:	91 81       	ldd	r25, Z+1	; 0x01
 a10:	88 0f       	add	r24, r24
 a12:	99 1f       	adc	r25, r25
 a14:	96 01       	movw	r18, r12
 a16:	2e 19       	sub	r18, r14
 a18:	3f 09       	sbc	r19, r15
 a1a:	28 17       	cp	r18, r24
 a1c:	39 07       	cpc	r19, r25
 a1e:	c8 f1       	brcs	.+114    	; 0xa92 <simpleserial_get+0x16e>

		ascii_buf[i] = c;
	}

	// Assert that last character is \n or \r
	c = getch();
 a20:	0e 94 8b 05 	call	0xb16	; 0xb16 <input_ch_0>
	if(c != '\n' && c != '\r')
 a24:	8a 30       	cpi	r24, 0x0A	; 10
 a26:	19 f0       	breq	.+6      	; 0xa2e <simpleserial_get+0x10a>
 a28:	8d 30       	cpi	r24, 0x0D	; 13
 a2a:	09 f0       	breq	.+2      	; 0xa2e <simpleserial_get+0x10a>
 a2c:	9b cf       	rjmp	.-202    	; 0x964 <simpleserial_get+0x40>
		return;

	// ASCII buffer is full: convert to bytes
	// Check for illegal characters here
	if(hex_decode(commands[cmd].len, ascii_buf, data_buf))
 a2e:	26 e0       	ldi	r18, 0x06	; 6
 a30:	20 9f       	mul	r18, r16
 a32:	c0 01       	movw	r24, r0
 a34:	21 9f       	mul	r18, r17
 a36:	90 0d       	add	r25, r0
 a38:	11 24       	eor	r1, r1
 a3a:	8c 01       	movw	r16, r24
 a3c:	02 5f       	subi	r16, 0xF2	; 242
 a3e:	1e 4d       	sbci	r17, 0xDE	; 222
 a40:	d8 01       	movw	r26, r16
 a42:	11 96       	adiw	r26, 0x01	; 1
 a44:	dc 90       	ld	r13, X
 a46:	11 97       	sbiw	r26, 0x01	; 1
 a48:	ae 01       	movw	r20, r28
 a4a:	4f 57       	subi	r20, 0x7F	; 127
 a4c:	5e 4f       	sbci	r21, 0xFE	; 254
 a4e:	b7 01       	movw	r22, r14
 a50:	8d 2d       	mov	r24, r13
 a52:	12 96       	adiw	r26, 0x02	; 2
 a54:	9c 91       	ld	r25, X
 a56:	0e 94 8e 03 	call	0x71c	; 0x71c <hex_decode>
 a5a:	89 2b       	or	r24, r25
 a5c:	09 f0       	breq	.+2      	; 0xa60 <simpleserial_get+0x13c>
 a5e:	82 cf       	rjmp	.-252    	; 0x964 <simpleserial_get+0x40>
		return;

	// Callback
	uint8_t ret[1];
	ret[0] = commands[cmd].fp(data_buf, commands[cmd].len);
 a60:	d8 01       	movw	r26, r16
 a62:	13 96       	adiw	r26, 0x03	; 3
 a64:	ed 91       	ld	r30, X+
 a66:	fc 91       	ld	r31, X
 a68:	6d 2d       	mov	r22, r13
 a6a:	ce 01       	movw	r24, r28
 a6c:	8f 57       	subi	r24, 0x7F	; 127
 a6e:	9e 4f       	sbci	r25, 0xFE	; 254
 a70:	19 95       	eicall
 a72:	cf 5b       	subi	r28, 0xBF	; 191
 a74:	dd 4f       	sbci	r29, 0xFD	; 253
 a76:	88 83       	st	Y, r24
 a78:	c1 54       	subi	r28, 0x41	; 65
 a7a:	d2 40       	sbci	r29, 0x02	; 2

	// Acknowledge (if version is 1.1)
#if SS_VER == SS_VER_1_1
	simpleserial_put('z', 1, ret);
 a7c:	ae 01       	movw	r20, r28
 a7e:	4f 5b       	subi	r20, 0xBF	; 191
 a80:	5d 4f       	sbci	r21, 0xFD	; 253
 a82:	61 e0       	ldi	r22, 0x01	; 1
 a84:	8a e7       	ldi	r24, 0x7A	; 122
 a86:	0e 94 0c 04 	call	0x818	; 0x818 <simpleserial_put>
 a8a:	6c cf       	rjmp	.-296    	; 0x964 <simpleserial_get+0x40>

	// Find which command we're receiving
	c = getch();

	int cmd;
	for(cmd = 0; cmd < num_commands; cmd++)
 a8c:	0f 5f       	subi	r16, 0xFF	; 255
 a8e:	1f 4f       	sbci	r17, 0xFF	; 255
 a90:	63 cf       	rjmp	.-314    	; 0x958 <simpleserial_get+0x34>
	}

	// Receive characters until we fill the ASCII buffer
	for(int i = 0; i < 2*commands[cmd].len; i++)
	{
		c = getch();
 a92:	0e 94 8b 05 	call	0xb16	; 0xb16 <input_ch_0>

		// Check for early \n
		if(c == '\n' || c == '\r')
 a96:	8a 30       	cpi	r24, 0x0A	; 10
 a98:	09 f4       	brne	.+2      	; 0xa9c <simpleserial_get+0x178>
 a9a:	64 cf       	rjmp	.-312    	; 0x964 <simpleserial_get+0x40>
 a9c:	8d 30       	cpi	r24, 0x0D	; 13
 a9e:	09 f4       	brne	.+2      	; 0xaa2 <simpleserial_get+0x17e>
 aa0:	61 cf       	rjmp	.-318    	; 0x964 <simpleserial_get+0x40>
			return;

		ascii_buf[i] = c;
 aa2:	d6 01       	movw	r26, r12
 aa4:	8d 93       	st	X+, r24
 aa6:	6d 01       	movw	r12, r26
 aa8:	b0 cf       	rjmp	.-160    	; 0xa0a <simpleserial_get+0xe6>

00000aaa <init_uart0>:
   )
   {
/* This PORT setting is only valid to USARTC0 if other USARTs is used a
	 * different PORT and/or pins is used. */
	/* PIN3 (TXD0) as output. */
	PORTC.DIRSET = PIN3_bm;
 aaa:	e0 e4       	ldi	r30, 0x40	; 64
 aac:	f6 e0       	ldi	r31, 0x06	; 6
 aae:	88 e0       	ldi	r24, 0x08	; 8
 ab0:	81 83       	std	Z+1, r24	; 0x01

	/* PC2 (RXD0) as input. */
	PORTC.DIRCLR = PIN2_bm;
 ab2:	84 e0       	ldi	r24, 0x04	; 4
 ab4:	82 83       	std	Z+2, r24	; 0x02

	/* USARTC0, 8 Data bits, No Parity, 1 Stop bit. */
	USART_Format_Set(&USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
 ab6:	e0 ea       	ldi	r30, 0xA0	; 160
 ab8:	f8 e0       	ldi	r31, 0x08	; 8
 aba:	83 e0       	ldi	r24, 0x03	; 3
 abc:	85 83       	std	Z+5, r24	; 0x05
	 *                 = 12
	 */
	#if SS_VER==SS_VER_2_0
	USART_Baudrate_Set(&USART, 1, 0);
	#else
	USART_Baudrate_Set(&USART, 11, 0);
 abe:	8b e0       	ldi	r24, 0x0B	; 11
 ac0:	86 83       	std	Z+6, r24	; 0x06
 ac2:	17 82       	std	Z+7, r1	; 0x07
	#endif

	/* Enable both RX and TX. */
	USART_Rx_Enable(&USART);
 ac4:	84 81       	ldd	r24, Z+4	; 0x04
 ac6:	80 61       	ori	r24, 0x10	; 16
 ac8:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(&USART);
 aca:	84 81       	ldd	r24, Z+4	; 0x04
 acc:	88 60       	ori	r24, 0x08	; 8
 ace:	84 83       	std	Z+4, r24	; 0x04
   }
 ad0:	08 95       	ret

00000ad2 <input_ch_w_timeout_0>:
unsigned char									input_ch_w_timeout_0
	(
   char *					 	data,
   volatile unsigned int				timeout
   )
   {
 ad2:	cf 93       	push	r28
 ad4:	df 93       	push	r29
 ad6:	1f 92       	push	r1
 ad8:	1f 92       	push	r1
 ada:	cd b7       	in	r28, 0x3d	; 61
 adc:	de b7       	in	r29, 0x3e	; 62
 ade:	69 83       	std	Y+1, r22	; 0x01
 ae0:	7a 83       	std	Y+2, r23	; 0x02
   unsigned int				timeout_counter = 0;
 ae2:	30 e0       	ldi	r19, 0x00	; 0
 ae4:	20 e0       	ldi	r18, 0x00	; 0

   
   //check if a byte has been recieved or if the timeout has been excedded
   while (timeout_counter != timeout)
 ae6:	49 81       	ldd	r20, Y+1	; 0x01
 ae8:	5a 81       	ldd	r21, Y+2	; 0x02
 aea:	42 17       	cp	r20, r18
 aec:	53 07       	cpc	r21, r19
 aee:	11 f4       	brne	.+4      	; 0xaf4 <input_ch_w_timeout_0+0x22>
			return BYTE_REC;
			}
		timeout_counter++;
		}
		
	return TIMEOUT;
 af0:	80 e0       	ldi	r24, 0x00	; 0
 af2:	09 c0       	rjmp	.+18     	; 0xb06 <input_ch_w_timeout_0+0x34>

   
   //check if a byte has been recieved or if the timeout has been excedded
   while (timeout_counter != timeout)
		{	
		if (USART_IsRXComplete(&USART))
 af4:	40 91 a1 08 	lds	r20, 0x08A1	; 0x8008a1 <__TEXT_REGION_LENGTH__+0x7de8a1>
 af8:	47 ff       	sbrs	r20, 7
 afa:	0a c0       	rjmp	.+20     	; 0xb10 <input_ch_w_timeout_0+0x3e>
			{
			*data = USART_GetChar(&USART);
 afc:	20 91 a0 08 	lds	r18, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7de8a0>
 b00:	fc 01       	movw	r30, r24
 b02:	20 83       	st	Z, r18
			return BYTE_REC;
 b04:	81 e0       	ldi	r24, 0x01	; 1
			}
		timeout_counter++;
		}
		
	return TIMEOUT;
	}
 b06:	0f 90       	pop	r0
 b08:	0f 90       	pop	r0
 b0a:	df 91       	pop	r29
 b0c:	cf 91       	pop	r28
 b0e:	08 95       	ret
		if (USART_IsRXComplete(&USART))
			{
			*data = USART_GetChar(&USART);
			return BYTE_REC;
			}
		timeout_counter++;
 b10:	2f 5f       	subi	r18, 0xFF	; 255
 b12:	3f 4f       	sbci	r19, 0xFF	; 255
 b14:	e8 cf       	rjmp	.-48     	; 0xae6 <input_ch_w_timeout_0+0x14>

00000b16 <input_ch_0>:
	(
   void
   )
   {
   //check if a byte has been recieved or if the timeout has been excedded
   while (!USART_IsRXComplete(&USART))
 b16:	80 91 a1 08 	lds	r24, 0x08A1	; 0x8008a1 <__TEXT_REGION_LENGTH__+0x7de8a1>
 b1a:	87 ff       	sbrs	r24, 7
 b1c:	fc cf       	rjmp	.-8      	; 0xb16 <input_ch_0>
		{
		continue;		
		}		
	return USART_GetChar(&USART);;
 b1e:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7de8a0>
	}
 b22:	08 95       	ret

00000b24 <output_ch_0>:
void												output_ch_0
	(
	char							data
	)
	{
	while(!USART_IsTXDataRegisterEmpty(&USART));
 b24:	90 91 a1 08 	lds	r25, 0x08A1	; 0x8008a1 <__TEXT_REGION_LENGTH__+0x7de8a1>
 b28:	95 ff       	sbrs	r25, 5
 b2a:	fc cf       	rjmp	.-8      	; 0xb24 <output_ch_0>
	USART_PutChar(&USART, data);
 b2c:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7de8a0>
	return;
 b30:	08 95       	ret

00000b32 <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel          Data register empty interrupt level.
 */
void USART_InterruptDriver_Initialize(USART_data_t * usart_data,
                                      USART_t * usart,
                                      USART_DREINTLVL_t dreIntLevel)
{
 b32:	fc 01       	movw	r30, r24
	usart_data->usart = usart;
 b34:	60 83       	st	Z, r22
 b36:	71 83       	std	Z+1, r23	; 0x01
	usart_data->dreIntLevel = dreIntLevel;
 b38:	42 83       	std	Z+2, r20	; 0x02

	usart_data->buffer.RX_Tail = 0;
 b3a:	14 86       	std	Z+12, r1	; 0x0c
	usart_data->buffer.RX_Head = 0;
 b3c:	13 86       	std	Z+11, r1	; 0x0b
	usart_data->buffer.TX_Tail = 0;
 b3e:	16 86       	std	Z+14, r1	; 0x0e
	usart_data->buffer.TX_Head = 0;
 b40:	15 86       	std	Z+13, r1	; 0x0d
}
 b42:	08 95       	ret

00000b44 <USART_InterruptDriver_DreInterruptLevel_Set>:
 *  \param dreIntLevel        Interrupt level of the DRE interrupt.
 */
void USART_InterruptDriver_DreInterruptLevel_Set(USART_data_t * usart_data,
                                                 USART_DREINTLVL_t dreIntLevel)
{
	usart_data->dreIntLevel = dreIntLevel;
 b44:	fc 01       	movw	r30, r24
 b46:	62 83       	std	Z+2, r22	; 0x02
}
 b48:	08 95       	ret

00000b4a <USART_TXBuffer_FreeSpace>:
 *
 *  \retval true      There is data in the receive buffer.
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
 b4a:	fc 01       	movw	r30, r24
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
 b4c:	95 85       	ldd	r25, Z+13	; 0x0d
	uint8_t tempTail = usart_data->buffer.TX_Tail;
 b4e:	26 85       	ldd	r18, Z+14	; 0x0e
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
 b50:	9f 5f       	subi	r25, 0xFF	; 255
 b52:	93 70       	andi	r25, 0x03	; 3
	uint8_t tempTail = usart_data->buffer.TX_Tail;

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
 b54:	81 e0       	ldi	r24, 0x01	; 1
 b56:	92 13       	cpse	r25, r18
 b58:	01 c0       	rjmp	.+2      	; 0xb5c <USART_TXBuffer_FreeSpace+0x12>
 b5a:	80 e0       	ldi	r24, 0x00	; 0
}
 b5c:	08 95       	ret

00000b5e <USART_TXBuffer_PutByte>:
 *
 *  \param usart_data The USART_data_t struct instance.
 *  \param data       The data to send.
 */
bool USART_TXBuffer_PutByte(USART_data_t * usart_data, uint8_t data)
{
 b5e:	1f 93       	push	r17
 b60:	cf 93       	push	r28
 b62:	df 93       	push	r29
 b64:	ec 01       	movw	r28, r24
 b66:	16 2f       	mov	r17, r22
	uint8_t tempTX_Head;
	bool TXBuffer_FreeSpace;
	USART_Buffer_t * TXbufPtr;

	TXbufPtr = &usart_data->buffer;
	TXBuffer_FreeSpace = USART_TXBuffer_FreeSpace(usart_data);
 b68:	0e 94 a5 05 	call	0xb4a	; 0xb4a <USART_TXBuffer_FreeSpace>


	if(TXBuffer_FreeSpace)
 b6c:	88 23       	and	r24, r24
 b6e:	79 f0       	breq	.+30     	; 0xb8e <USART_TXBuffer_PutByte+0x30>
	{
	  	tempTX_Head = TXbufPtr->TX_Head;
 b70:	9d 85       	ldd	r25, Y+13	; 0x0d
	  	TXbufPtr->TX[tempTX_Head]= data;
 b72:	fe 01       	movw	r30, r28
 b74:	e9 0f       	add	r30, r25
 b76:	f1 1d       	adc	r31, r1
 b78:	17 83       	std	Z+7, r17	; 0x07
		/* Advance buffer head. */
		TXbufPtr->TX_Head = (tempTX_Head + 1) & USART_TX_BUFFER_MASK;
 b7a:	9f 5f       	subi	r25, 0xFF	; 255
 b7c:	93 70       	andi	r25, 0x03	; 3
 b7e:	9d 87       	std	Y+13, r25	; 0x0d

		/* Enable DRE interrupt. */
		tempCTRLA = usart_data->usart->CTRLA;
 b80:	e8 81       	ld	r30, Y
 b82:	f9 81       	ldd	r31, Y+1	; 0x01
 b84:	93 81       	ldd	r25, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | usart_data->dreIntLevel;
 b86:	9c 7f       	andi	r25, 0xFC	; 252
 b88:	2a 81       	ldd	r18, Y+2	; 0x02
 b8a:	92 2b       	or	r25, r18
		usart_data->usart->CTRLA = tempCTRLA;
 b8c:	93 83       	std	Z+3, r25	; 0x03
	}
	return TXBuffer_FreeSpace;
}
 b8e:	df 91       	pop	r29
 b90:	cf 91       	pop	r28
 b92:	1f 91       	pop	r17
 b94:	08 95       	ret

00000b96 <USART_RXBufferData_Available>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
 b96:	fc 01       	movw	r30, r24
 b98:	23 85       	ldd	r18, Z+11	; 0x0b
	uint8_t tempTail = usart_data->buffer.RX_Tail;
 b9a:	94 85       	ldd	r25, Z+12	; 0x0c

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
 b9c:	81 e0       	ldi	r24, 0x01	; 1
 b9e:	29 13       	cpse	r18, r25
 ba0:	01 c0       	rjmp	.+2      	; 0xba4 <USART_RXBufferData_Available+0xe>
 ba2:	80 e0       	ldi	r24, 0x00	; 0
}
 ba4:	08 95       	ret

00000ba6 <USART_RXBuffer_GetByte>:
 *  \param usart_data       The USART_data_t struct instance.
 *
 *  \return         Received data.
 */
uint8_t USART_RXBuffer_GetByte(USART_data_t * usart_data)
{
 ba6:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
 ba8:	a4 85       	ldd	r26, Z+12	; 0x0c
 baa:	a8 0f       	add	r26, r24
 bac:	b9 2f       	mov	r27, r25
 bae:	b1 1d       	adc	r27, r1
 bb0:	13 96       	adiw	r26, 0x03	; 3
 bb2:	8c 91       	ld	r24, X

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
 bb4:	94 85       	ldd	r25, Z+12	; 0x0c
 bb6:	9f 5f       	subi	r25, 0xFF	; 255
 bb8:	93 70       	andi	r25, 0x03	; 3
 bba:	94 87       	std	Z+12, r25	; 0x0c

	return ans;
}
 bbc:	08 95       	ret

00000bbe <USART_RXComplete>:
 *  Stores received data in RX software buffer.
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
bool USART_RXComplete(USART_data_t * usart_data)
{
 bbe:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
 bc0:	83 85       	ldd	r24, Z+11	; 0x0b
 bc2:	8f 5f       	subi	r24, 0xFF	; 255
 bc4:	83 70       	andi	r24, 0x03	; 3

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
 bc6:	24 85       	ldd	r18, Z+12	; 0x0c
	uint8_t data = usart_data->usart->DATA;
 bc8:	a0 81       	ld	r26, Z
 bca:	b1 81       	ldd	r27, Z+1	; 0x01
 bcc:	9c 91       	ld	r25, X

	if (tempRX_Head == tempRX_Tail) {
 bce:	82 17       	cp	r24, r18
 bd0:	49 f0       	breq	.+18     	; 0xbe4 <USART_RXComplete+0x26>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
 bd2:	a3 85       	ldd	r26, Z+11	; 0x0b
 bd4:	ae 0f       	add	r26, r30
 bd6:	bf 2f       	mov	r27, r31
 bd8:	b1 1d       	adc	r27, r1
 bda:	13 96       	adiw	r26, 0x03	; 3
 bdc:	9c 93       	st	X, r25
		usart_data->buffer.RX_Head = tempRX_Head;
 bde:	83 87       	std	Z+11, r24	; 0x0b
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
 be0:	81 e0       	ldi	r24, 0x01	; 1
 be2:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
 be4:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
 be6:	08 95       	ret

00000be8 <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
 be8:	cf 93       	push	r28
 bea:	df 93       	push	r29
 bec:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
 bee:	86 85       	ldd	r24, Z+14	; 0x0e
	if (bufPtr->TX_Head == tempTX_Tail){
 bf0:	95 85       	ldd	r25, Z+13	; 0x0d
 bf2:	a0 81       	ld	r26, Z
 bf4:	b1 81       	ldd	r27, Z+1	; 0x01
 bf6:	98 13       	cpse	r25, r24
 bf8:	09 c0       	rjmp	.+18     	; 0xc0c <USART_DataRegEmpty+0x24>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
 bfa:	13 96       	adiw	r26, 0x03	; 3
 bfc:	8c 91       	ld	r24, X
 bfe:	13 97       	sbiw	r26, 0x03	; 3
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
 c00:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
 c02:	13 96       	adiw	r26, 0x03	; 3
 c04:	8c 93       	st	X, r24
		usart_data->usart->DATA = data;

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
	}
}
 c06:	df 91       	pop	r29
 c08:	cf 91       	pop	r28
 c0a:	08 95       	ret
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
		usart_data->usart->CTRLA = tempCTRLA;

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
 c0c:	c6 85       	ldd	r28, Z+14	; 0x0e
 c0e:	ce 0f       	add	r28, r30
 c10:	df 2f       	mov	r29, r31
 c12:	d1 1d       	adc	r29, r1
 c14:	8f 81       	ldd	r24, Y+7	; 0x07
		usart_data->usart->DATA = data;
 c16:	8c 93       	st	X, r24

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
 c18:	86 85       	ldd	r24, Z+14	; 0x0e
 c1a:	8f 5f       	subi	r24, 0xFF	; 255
 c1c:	83 70       	andi	r24, 0x03	; 3
 c1e:	86 87       	std	Z+14, r24	; 0x0e
	}
}
 c20:	f2 cf       	rjmp	.-28     	; 0xc06 <USART_DataRegEmpty+0x1e>

00000c22 <USART_NineBits_PutChar>:
 *
 *  \param usart      The USART module.
 *  \param data       The data to send.
 */
void USART_NineBits_PutChar(USART_t * usart, uint16_t data)
{
 c22:	fc 01       	movw	r30, r24
	if(data & 0x0100) {
		usart->CTRLB |= USART_TXB8_bm;
 c24:	84 81       	ldd	r24, Z+4	; 0x04
 *  \param usart      The USART module.
 *  \param data       The data to send.
 */
void USART_NineBits_PutChar(USART_t * usart, uint16_t data)
{
	if(data & 0x0100) {
 c26:	70 ff       	sbrs	r23, 0
 c28:	04 c0       	rjmp	.+8      	; 0xc32 <USART_NineBits_PutChar+0x10>
		usart->CTRLB |= USART_TXB8_bm;
 c2a:	81 60       	ori	r24, 0x01	; 1
	}else {
		usart->CTRLB &= ~USART_TXB8_bm;
 c2c:	84 83       	std	Z+4, r24	; 0x04
	}

	usart->DATA = (data & 0x00FF);
 c2e:	60 83       	st	Z, r22
}
 c30:	08 95       	ret
void USART_NineBits_PutChar(USART_t * usart, uint16_t data)
{
	if(data & 0x0100) {
		usart->CTRLB |= USART_TXB8_bm;
	}else {
		usart->CTRLB &= ~USART_TXB8_bm;
 c32:	8e 7f       	andi	r24, 0xFE	; 254
 c34:	fb cf       	rjmp	.-10     	; 0xc2c <USART_NineBits_PutChar+0xa>

00000c36 <USART_NineBits_GetChar>:
 *  \param usart      The USART module.
 *
 *  \retval           Received data.
 */
uint16_t USART_NineBits_GetChar(USART_t * usart)
{
 c36:	fc 01       	movw	r30, r24
	if(usart->CTRLB & USART_RXB8_bm) {
 c38:	84 81       	ldd	r24, Z+4	; 0x04
 c3a:	80 ff       	sbrs	r24, 0
 c3c:	04 c0       	rjmp	.+8      	; 0xc46 <USART_NineBits_GetChar+0x10>
		return(0x0100 | usart->DATA);
 c3e:	80 81       	ld	r24, Z
 c40:	90 e0       	ldi	r25, 0x00	; 0
 c42:	91 60       	ori	r25, 0x01	; 1
 c44:	08 95       	ret
	}else {
		return(usart->DATA);
 c46:	80 81       	ld	r24, Z
 c48:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 c4a:	08 95       	ret

00000c4c <platform_init>:
#include "hal.h"
#include "xmega_hal.h"

void platform_init(void)
{  
    OSC.XOSCCTRL = 0x00;
 c4c:	10 92 52 00 	sts	0x0052, r1	; 0x800052 <__TEXT_REGION_LENGTH__+0x7de052>
    OSC.PLLCTRL = 0x00;
 c50:	10 92 55 00 	sts	0x0055, r1	; 0x800055 <__TEXT_REGION_LENGTH__+0x7de055>
    OSC.CTRL |= OSC_XOSCEN_bm;
 c54:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <__TEXT_REGION_LENGTH__+0x7de050>
 c58:	88 60       	ori	r24, 0x08	; 8
 c5a:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x7de050>
    
    //wait for clock
    while((OSC.STATUS & OSC_XOSCRDY_bm) == 0);
 c5e:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7de051>
 c62:	83 ff       	sbrs	r24, 3
 c64:	fc cf       	rjmp	.-8      	; 0xc5e <platform_init+0x12>
    
    //Switch clock source
    CCP = CCP_IOREG_gc;
 c66:	88 ed       	ldi	r24, 0xD8	; 216
 c68:	84 bf       	out	0x34, r24	; 52
    CLK.CTRL = CLK_SCLKSEL_XOSC_gc;    
 c6a:	83 e0       	ldi	r24, 0x03	; 3
 c6c:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x7de040>
    
    //Turn off other sources besides external    
    OSC.CTRL = OSC_XOSCEN_bm;
 c70:	88 e0       	ldi	r24, 0x08	; 8
 c72:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x7de050>
    
 #if PLATFORM == CW303
    PORTA.DIRSET = PIN5_bm | PIN6_bm;
    PORTA.OUTSET = PIN5_bm | PIN6_bm;
 #endif
}
 c76:	08 95       	ret

00000c78 <main>:
	return 0x00;
}

int main(void)
{
    platform_init();
 c78:	0e 94 26 06 	call	0xc4c	; 0xc4c <platform_init>
    init_uart();
 c7c:	0e 94 55 05 	call	0xaaa	; 0xaaa <init_uart0>
    trigger_setup();
 c80:	81 e0       	ldi	r24, 0x01	; 1
 c82:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x7de601>
    
    
	simpleserial_init();
 c86:	0e 94 f7 03 	call	0x7ee	; 0x7ee <simpleserial_init>
    simpleserial_addcmd('k', 16,  get_key);
 c8a:	43 e1       	ldi	r20, 0x13	; 19
 c8c:	51 e0       	ldi	r21, 0x01	; 1
 c8e:	60 e1       	ldi	r22, 0x10	; 16
 c90:	70 e0       	ldi	r23, 0x00	; 0
 c92:	8b e6       	ldi	r24, 0x6B	; 107
 c94:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <simpleserial_addcmd>
    simpleserial_addcmd('p', 16,  get_pt);
 c98:	4d e4       	ldi	r20, 0x4D	; 77
 c9a:	53 e0       	ldi	r21, 0x03	; 3
 c9c:	60 e1       	ldi	r22, 0x10	; 16
 c9e:	70 e0       	ldi	r23, 0x00	; 0
 ca0:	80 e7       	ldi	r24, 0x70	; 112
 ca2:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <simpleserial_addcmd>
    simpleserial_addcmd('x',  0,   reset);
 ca6:	45 e1       	ldi	r20, 0x15	; 21
 ca8:	51 e0       	ldi	r21, 0x01	; 1
 caa:	70 e0       	ldi	r23, 0x00	; 0
 cac:	60 e0       	ldi	r22, 0x00	; 0
 cae:	88 e7       	ldi	r24, 0x78	; 120
 cb0:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <simpleserial_addcmd>
    while(1)
        simpleserial_get();
 cb4:	0e 94 92 04 	call	0x924	; 0x924 <simpleserial_get>
 cb8:	fd cf       	rjmp	.-6      	; 0xcb4 <main+0x3c>

00000cba <_exit>:
 cba:	f8 94       	cli

00000cbc <__stop_program>:
 cbc:	ff cf       	rjmp	.-2      	; 0xcbc <__stop_program>
