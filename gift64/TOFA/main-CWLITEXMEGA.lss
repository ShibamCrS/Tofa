
main-CWLITEXMEGA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cc0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010e  00802000  00000cc0  00000d54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000e2  0080210e  0080210e  00000e62  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000e62  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e74  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003d68  00000000  00000000  00000f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000028ec  00000000  00000000  00004cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c8d  00000000  00000000  000075b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000388  00000000  00000000  00008240  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001f64  00000000  00000000  000085c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000115a  00000000  00000000  0000a52c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000b686  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__ctors_end>
   4:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
   8:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
   c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  10:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  14:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  18:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  1c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  20:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  24:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  28:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  2c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  30:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  34:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  38:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  3c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  40:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  44:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  48:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  4c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  50:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  54:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  58:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  5c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  60:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  64:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  68:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  6c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  70:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  74:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  78:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  7c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  80:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  84:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  88:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  8c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  90:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  94:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  98:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  9c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  a0:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  a4:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  a8:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  ac:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  b0:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  b4:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  b8:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  bc:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  c0:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  c4:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  c8:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  cc:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  d0:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  d4:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  d8:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  dc:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  e0:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  e4:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  e8:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  ec:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  f0:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  f4:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  f8:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
  fc:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 100:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 104:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 108:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 10c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 110:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 114:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 118:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 11c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 120:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 124:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 128:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 12c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 130:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 134:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 138:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 13c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 140:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 144:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 148:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 14c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 150:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 154:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 158:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 15c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 160:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 164:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 168:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 16c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 170:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 174:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 178:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 17c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 180:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 184:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 188:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 18c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 190:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 194:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 198:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 19c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 1a0:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 1a4:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 1a8:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 1ac:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 1b0:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 1b4:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 1b8:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 1bc:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 1c0:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
 1c4:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>

000001c8 <__trampolines_start>:
 1c8:	0c 94 3c 04 	jmp	0x878	; 0x878 <ss_num_commands>
 1cc:	0c 94 13 01 	jmp	0x226	; 0x226 <get_key>
 1d0:	0c 94 4e 03 	jmp	0x69c	; 0x69c <get_pt>
 1d4:	0c 94 15 01 	jmp	0x22a	; 0x22a <reset>
 1d8:	0c 94 50 04 	jmp	0x8a0	; 0x8a0 <ss_get_commands>
 1dc:	0c 94 78 03 	jmp	0x6f0	; 0x6f0 <check_version>

000001e0 <__ctors_end>:
 1e0:	11 24       	eor	r1, r1
 1e2:	1f be       	out	0x3f, r1	; 63
 1e4:	cf ef       	ldi	r28, 0xFF	; 255
 1e6:	cd bf       	out	0x3d, r28	; 61
 1e8:	df e3       	ldi	r29, 0x3F	; 63
 1ea:	de bf       	out	0x3e, r29	; 62
 1ec:	00 e0       	ldi	r16, 0x00	; 0
 1ee:	0c bf       	out	0x3c, r16	; 60

000001f0 <__do_copy_data>:
 1f0:	11 e2       	ldi	r17, 0x21	; 33
 1f2:	a0 e0       	ldi	r26, 0x00	; 0
 1f4:	b0 e2       	ldi	r27, 0x20	; 32
 1f6:	e0 ec       	ldi	r30, 0xC0	; 192
 1f8:	fc e0       	ldi	r31, 0x0C	; 12
 1fa:	00 e0       	ldi	r16, 0x00	; 0
 1fc:	0b bf       	out	0x3b, r16	; 59
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <__do_copy_data+0x14>
 200:	07 90       	elpm	r0, Z+
 202:	0d 92       	st	X+, r0
 204:	ae 30       	cpi	r26, 0x0E	; 14
 206:	b1 07       	cpc	r27, r17
 208:	d9 f7       	brne	.-10     	; 0x200 <__do_copy_data+0x10>

0000020a <__do_clear_bss>:
 20a:	21 e2       	ldi	r18, 0x21	; 33
 20c:	ae e0       	ldi	r26, 0x0E	; 14
 20e:	b1 e2       	ldi	r27, 0x21	; 33
 210:	01 c0       	rjmp	.+2      	; 0x214 <.do_clear_bss_start>

00000212 <.do_clear_bss_loop>:
 212:	1d 92       	st	X+, r1

00000214 <.do_clear_bss_start>:
 214:	a0 3f       	cpi	r26, 0xF0	; 240
 216:	b2 07       	cpc	r27, r18
 218:	e1 f7       	brne	.-8      	; 0x212 <.do_clear_bss_loop>
 21a:	0e 94 3d 06 	call	0xc7a	; 0xc7a <main>
 21e:	0c 94 5e 06 	jmp	0xcbc	; 0xcbc <_exit>

00000222 <__bad_interrupt>:
 222:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000226 <get_key>:
uint8_t get_key(uint8_t* k)
{
	//ignore the input k and use pre-defined key

	return 0x00;
}
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	08 95       	ret

0000022a <reset>:
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	08 95       	ret

0000022e <enc64>:
    0x26, 0x0c, 0x19, 0x32, 0x25, 0x0a, 0x15, 0x2a, 0x14, 0x28,
    0x10, 0x20
};


void enc64(uint8_t* input, uint8_t* masterkey, int no_of_rounds, bool print_details){
 22e:	2f 92       	push	r2
 230:	3f 92       	push	r3
 232:	4f 92       	push	r4
 234:	5f 92       	push	r5
 236:	6f 92       	push	r6
 238:	7f 92       	push	r7
 23a:	8f 92       	push	r8
 23c:	9f 92       	push	r9
 23e:	af 92       	push	r10
 240:	bf 92       	push	r11
 242:	cf 92       	push	r12
 244:	df 92       	push	r13
 246:	ef 92       	push	r14
 248:	ff 92       	push	r15
 24a:	0f 93       	push	r16
 24c:	1f 93       	push	r17
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	cd b7       	in	r28, 0x3d	; 61
 254:	de b7       	in	r29, 0x3e	; 62
 256:	c6 54       	subi	r28, 0x46	; 70
 258:	d1 40       	sbci	r29, 0x01	; 1
 25a:	cd bf       	out	0x3d, r28	; 61
 25c:	de bf       	out	0x3e, r29	; 62
 25e:	2a 01       	movw	r4, r20
 260:	fb 01       	movw	r30, r22
 262:	9b 01       	movw	r18, r22
 264:	20 5e       	subi	r18, 0xE0	; 224
 266:	3f 4f       	sbci	r19, 0xFF	; 255
 268:	de 01       	movw	r26, r28
 26a:	af 5d       	subi	r26, 0xDF	; 223
 26c:	be 4f       	sbci	r27, 0xFE	; 254
    uint8_t key[32];
    for (uint8_t i=0; i<32;i++){
        key[i] = masterkey[i];
 26e:	41 91       	ld	r20, Z+
 270:	4d 93       	st	X+, r20
};


void enc64(uint8_t* input, uint8_t* masterkey, int no_of_rounds, bool print_details){
    uint8_t key[32];
    for (uint8_t i=0; i<32;i++){
 272:	e2 17       	cp	r30, r18
 274:	f3 07       	cpc	r31, r19
 276:	d9 f7       	brne	.-10     	; 0x26e <enc64+0x40>
    }

    uint8_t bits[64], perm_bits[64];
    uint8_t key_bits[128];
    uint8_t temp_key[32];
    for (uint8_t r=0; r<no_of_rounds; r++){
 278:	20 e0       	ldi	r18, 0x00	; 0
 27a:	ac 01       	movw	r20, r24
 27c:	40 5f       	subi	r20, 0xF0	; 240
 27e:	5f 4f       	sbci	r21, 0xFF	; 255
 280:	cf 5b       	subi	r28, 0xBF	; 191
 282:	de 4f       	sbci	r29, 0xFE	; 254
 284:	48 83       	st	Y, r20
 286:	59 83       	std	Y+1, r21	; 0x01
 288:	c1 54       	subi	r28, 0x41	; 65
 28a:	d1 40       	sbci	r29, 0x01	; 1
 28c:	61 e2       	ldi	r22, 0x21	; 33
 28e:	71 e0       	ldi	r23, 0x01	; 1
 290:	6c 0f       	add	r22, r28
 292:	7d 1f       	adc	r23, r29
 294:	60 5e       	subi	r22, 0xE0	; 224
 296:	7f 4f       	sbci	r23, 0xFF	; 255
 298:	cd 5b       	subi	r28, 0xBD	; 189
 29a:	de 4f       	sbci	r29, 0xFE	; 254
 29c:	68 83       	st	Y, r22
 29e:	79 83       	std	Y+1, r23	; 0x01
 2a0:	c3 54       	subi	r28, 0x43	; 67
 2a2:	d1 40       	sbci	r29, 0x01	; 1
 2a4:	62 2e       	mov	r6, r18
 2a6:	71 2c       	mov	r7, r1
 2a8:	64 14       	cp	r6, r4
 2aa:	75 04       	cpc	r7, r5
 2ac:	bc f0       	brlt	.+46     	; 0x2dc <enc64+0xae>
        key[31] = ((temp_key[31]&0xc)>>2) ^ ((temp_key[28]&0x3)<<2);
    }
   

    return;
}
 2ae:	ca 5b       	subi	r28, 0xBA	; 186
 2b0:	de 4f       	sbci	r29, 0xFE	; 254
 2b2:	cd bf       	out	0x3d, r28	; 61
 2b4:	de bf       	out	0x3e, r29	; 62
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	1f 91       	pop	r17
 2bc:	0f 91       	pop	r16
 2be:	ff 90       	pop	r15
 2c0:	ef 90       	pop	r14
 2c2:	df 90       	pop	r13
 2c4:	cf 90       	pop	r12
 2c6:	bf 90       	pop	r11
 2c8:	af 90       	pop	r10
 2ca:	9f 90       	pop	r9
 2cc:	8f 90       	pop	r8
 2ce:	7f 90       	pop	r7
 2d0:	6f 90       	pop	r6
 2d2:	5f 90       	pop	r5
 2d4:	4f 90       	pop	r4
 2d6:	3f 90       	pop	r3
 2d8:	2f 90       	pop	r2
 2da:	08 95       	ret
    uint8_t bits[64], perm_bits[64];
    uint8_t key_bits[128];
    uint8_t temp_key[32];
    for (uint8_t r=0; r<no_of_rounds; r++){
    
    if(r==23) trigger_high();
 2dc:	27 31       	cpi	r18, 0x17	; 23
 2de:	19 f4       	brne	.+6      	; 0x2e6 <enc64+0xb8>
 2e0:	71 e0       	ldi	r23, 0x01	; 1
 2e2:	70 93 05 06 	sts	0x0605, r23	; 0x800605 <__TEXT_REGION_LENGTH__+0x7de605>
 2e6:	4c 01       	movw	r8, r24
    0x26, 0x0c, 0x19, 0x32, 0x25, 0x0a, 0x15, 0x2a, 0x14, 0x28,
    0x10, 0x20
};


void enc64(uint8_t* input, uint8_t* masterkey, int no_of_rounds, bool print_details){
 2e8:	ac 01       	movw	r20, r24
    
    if(r==23) trigger_high();

        //SubCells
        for (uint8_t i=0; i<16; i++){
            input[i] = GIFT_S[input[i]];
 2ea:	da 01       	movw	r26, r20
 2ec:	ed 91       	ld	r30, X+
 2ee:	ad 01       	movw	r20, r26
 2f0:	11 97       	sbiw	r26, 0x01	; 1
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	e2 51       	subi	r30, 0x12	; 18
 2f6:	ff 4d       	sbci	r31, 0xDF	; 223
 2f8:	60 81       	ld	r22, Z
 2fa:	6c 93       	st	X, r22
    for (uint8_t r=0; r<no_of_rounds; r++){
    
    if(r==23) trigger_high();

        //SubCells
        for (uint8_t i=0; i<16; i++){
 2fc:	cf 5b       	subi	r28, 0xBF	; 191
 2fe:	de 4f       	sbci	r29, 0xFE	; 254
 300:	e8 80       	ld	r14, Y
 302:	f9 80       	ldd	r15, Y+1	; 0x01
 304:	c1 54       	subi	r28, 0x41	; 65
 306:	d1 40       	sbci	r29, 0x01	; 1
 308:	4e 15       	cp	r20, r14
 30a:	5f 05       	cpc	r21, r15
 30c:	71 f7       	brne	.-36     	; 0x2ea <enc64+0xbc>
            input[i] = GIFT_S[input[i]];
        }
    if(r==23) trigger_low();
 30e:	27 31       	cpi	r18, 0x17	; 23
 310:	21 f4       	brne	.+8      	; 0x31a <enc64+0xec>
 312:	ff 24       	eor	r15, r15
 314:	f3 94       	inc	r15
 316:	f0 92 06 06 	sts	0x0606, r15	; 0x800606 <__TEXT_REGION_LENGTH__+0x7de606>
 31a:	fe 01       	movw	r30, r28
 31c:	ef 53       	subi	r30, 0x3F	; 63
 31e:	ff 4f       	sbci	r31, 0xFF	; 255

        //PermBits
        //input to bits
        for (uint8_t i=0; i<16; i++){
            for (uint8_t j=0; j<4; j++){
                bits[4*i+j] = (input[i] >> j) & 0x1;
 320:	8f 01       	movw	r16, r30
 322:	cb 5b       	subi	r28, 0xBB	; 187
 324:	de 4f       	sbci	r29, 0xFE	; 254
 326:	88 83       	st	Y, r24
 328:	99 83       	std	Y+1, r25	; 0x01
 32a:	c5 54       	subi	r28, 0x45	; 69
 32c:	d1 40       	sbci	r29, 0x01	; 1
 32e:	cb 5b       	subi	r28, 0xBB	; 187
 330:	de 4f       	sbci	r29, 0xFE	; 254
 332:	a8 81       	ld	r26, Y
 334:	b9 81       	ldd	r27, Y+1	; 0x01
 336:	c5 54       	subi	r28, 0x45	; 69
 338:	d1 40       	sbci	r29, 0x01	; 1
 33a:	ed 90       	ld	r14, X+
 33c:	cb 5b       	subi	r28, 0xBB	; 187
 33e:	de 4f       	sbci	r29, 0xFE	; 254
 340:	a8 83       	st	Y, r26
 342:	b9 83       	std	Y+1, r27	; 0x01
 344:	c5 54       	subi	r28, 0x45	; 69
 346:	d1 40       	sbci	r29, 0x01	; 1
 348:	f1 2c       	mov	r15, r1
 34a:	58 01       	movw	r10, r16
 34c:	70 e0       	ldi	r23, 0x00	; 0
 34e:	60 e0       	ldi	r22, 0x00	; 0
 350:	67 01       	movw	r12, r14
 352:	06 2e       	mov	r0, r22
 354:	02 c0       	rjmp	.+4      	; 0x35a <enc64+0x12c>
 356:	d5 94       	asr	r13
 358:	c7 94       	ror	r12
 35a:	0a 94       	dec	r0
 35c:	e2 f7       	brpl	.-8      	; 0x356 <enc64+0x128>
 35e:	3c 2d       	mov	r19, r12
 360:	31 70       	andi	r19, 0x01	; 1
 362:	d5 01       	movw	r26, r10
 364:	3d 93       	st	X+, r19
 366:	5d 01       	movw	r10, r26
 368:	6f 5f       	subi	r22, 0xFF	; 255
 36a:	7f 4f       	sbci	r23, 0xFF	; 255
    if(r==23) trigger_low();

        //PermBits
        //input to bits
        for (uint8_t i=0; i<16; i++){
            for (uint8_t j=0; j<4; j++){
 36c:	64 30       	cpi	r22, 0x04	; 4
 36e:	71 05       	cpc	r23, r1
 370:	79 f7       	brne	.-34     	; 0x350 <enc64+0x122>
 372:	0c 5f       	subi	r16, 0xFC	; 252
 374:	1f 4f       	sbci	r17, 0xFF	; 255
        }
    if(r==23) trigger_low();

        //PermBits
        //input to bits
        for (uint8_t i=0; i<16; i++){
 376:	cb 5b       	subi	r28, 0xBB	; 187
 378:	de 4f       	sbci	r29, 0xFE	; 254
 37a:	e8 80       	ld	r14, Y
 37c:	f9 80       	ldd	r15, Y+1	; 0x01
 37e:	c5 54       	subi	r28, 0x45	; 69
 380:	d1 40       	sbci	r29, 0x01	; 1
 382:	e4 16       	cp	r14, r20
 384:	f5 06       	cpc	r15, r21
 386:	99 f6       	brne	.-90     	; 0x32e <enc64+0x100>
 388:	4e e9       	ldi	r20, 0x9E	; 158
 38a:	50 e2       	ldi	r21, 0x20	; 32
 38c:	8f 01       	movw	r16, r30
                bits[4*i+j] = (input[i] >> j) & 0x1;
            }
        }
        //permute the bits
        for (uint8_t i=0; i<64; i++){
            perm_bits[GIFT_P[i]] = bits[i];
 38e:	da 01       	movw	r26, r20
 390:	6d 91       	ld	r22, X+
 392:	ad 01       	movw	r20, r26
 394:	d8 01       	movw	r26, r16
 396:	fd 90       	ld	r15, X+
 398:	8d 01       	movw	r16, r26
 39a:	a1 e8       	ldi	r26, 0x81	; 129
 39c:	b0 e0       	ldi	r27, 0x00	; 0
 39e:	ac 0f       	add	r26, r28
 3a0:	bd 1f       	adc	r27, r29
 3a2:	a6 0f       	add	r26, r22
 3a4:	b1 1d       	adc	r27, r1
 3a6:	fc 92       	st	X, r15
            for (uint8_t j=0; j<4; j++){
                bits[4*i+j] = (input[i] >> j) & 0x1;
            }
        }
        //permute the bits
        for (uint8_t i=0; i<64; i++){
 3a8:	b0 e2       	ldi	r27, 0x20	; 32
 3aa:	4e 3d       	cpi	r20, 0xDE	; 222
 3ac:	5b 07       	cpc	r21, r27
 3ae:	79 f7       	brne	.-34     	; 0x38e <enc64+0x160>
 3b0:	ae 01       	movw	r20, r28
 3b2:	4f 57       	subi	r20, 0x7F	; 127
 3b4:	5f 4f       	sbci	r21, 0xFF	; 255
 3b6:	7a 01       	movw	r14, r20
 3b8:	bc 01       	movw	r22, r24
            perm_bits[GIFT_P[i]] = bits[i];
        }
        //perm_bits to input
        for (uint8_t i=0; i<16; i++){
            input[i]=0;
 3ba:	db 01       	movw	r26, r22
 3bc:	1d 92       	st	X+, r1
 3be:	bd 01       	movw	r22, r26
 3c0:	67 01       	movw	r12, r14
 3c2:	10 e0       	ldi	r17, 0x00	; 0
 3c4:	00 e0       	ldi	r16, 0x00	; 0
 3c6:	b1 2c       	mov	r11, r1
            for (uint8_t j=0; j<4; j++){
                 input[i] ^= perm_bits[4*i+j] << j;
 3c8:	d6 01       	movw	r26, r12
 3ca:	4d 91       	ld	r20, X+
 3cc:	6d 01       	movw	r12, r26
 3ce:	00 2e       	mov	r0, r16
 3d0:	01 c0       	rjmp	.+2      	; 0x3d4 <enc64+0x1a6>
 3d2:	44 0f       	add	r20, r20
 3d4:	0a 94       	dec	r0
 3d6:	ea f7       	brpl	.-6      	; 0x3d2 <enc64+0x1a4>
 3d8:	b4 26       	eor	r11, r20
 3da:	0f 5f       	subi	r16, 0xFF	; 255
 3dc:	1f 4f       	sbci	r17, 0xFF	; 255
            perm_bits[GIFT_P[i]] = bits[i];
        }
        //perm_bits to input
        for (uint8_t i=0; i<16; i++){
            input[i]=0;
            for (uint8_t j=0; j<4; j++){
 3de:	04 30       	cpi	r16, 0x04	; 4
 3e0:	11 05       	cpc	r17, r1
 3e2:	91 f7       	brne	.-28     	; 0x3c8 <enc64+0x19a>
 3e4:	ab 01       	movw	r20, r22
 3e6:	41 50       	subi	r20, 0x01	; 1
 3e8:	51 09       	sbc	r21, r1
 3ea:	da 01       	movw	r26, r20
 3ec:	bc 92       	st	X, r11
 3ee:	b4 e0       	ldi	r27, 0x04	; 4
 3f0:	eb 0e       	add	r14, r27
 3f2:	f1 1c       	adc	r15, r1
        //permute the bits
        for (uint8_t i=0; i<64; i++){
            perm_bits[GIFT_P[i]] = bits[i];
        }
        //perm_bits to input
        for (uint8_t i=0; i<16; i++){
 3f4:	cb 5b       	subi	r28, 0xBB	; 187
 3f6:	de 4f       	sbci	r29, 0xFE	; 254
 3f8:	48 81       	ld	r20, Y
 3fa:	59 81       	ldd	r21, Y+1	; 0x01
 3fc:	c5 54       	subi	r28, 0x45	; 69
 3fe:	d1 40       	sbci	r29, 0x01	; 1
 400:	64 17       	cp	r22, r20
 402:	75 07       	cpc	r23, r21
 404:	d1 f6       	brne	.-76     	; 0x3ba <enc64+0x18c>
 406:	bf 01       	movw	r22, r30
 408:	7c 01       	movw	r14, r24

        //AddRoundKey
        //input to bits
        for (uint8_t i=0; i<16; i++){
            for (uint8_t j=0; j<4; j++){
                bits[4*i+j] = (input[i] >> j) & 0x1;
 40a:	d7 01       	movw	r26, r14
 40c:	0d 91       	ld	r16, X+
 40e:	7d 01       	movw	r14, r26
 410:	10 e0       	ldi	r17, 0x00	; 0
 412:	5b 01       	movw	r10, r22
 414:	50 e0       	ldi	r21, 0x00	; 0
 416:	40 e0       	ldi	r20, 0x00	; 0
 418:	68 01       	movw	r12, r16
 41a:	04 2e       	mov	r0, r20
 41c:	02 c0       	rjmp	.+4      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 41e:	d5 94       	asr	r13
 420:	c7 94       	ror	r12
 422:	0a 94       	dec	r0
 424:	e2 f7       	brpl	.-8      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 426:	ac 2d       	mov	r26, r12
 428:	a1 70       	andi	r26, 0x01	; 1
 42a:	ca 2e       	mov	r12, r26
 42c:	d5 01       	movw	r26, r10
 42e:	cd 92       	st	X+, r12
 430:	5d 01       	movw	r10, r26
 432:	4f 5f       	subi	r20, 0xFF	; 255
 434:	5f 4f       	sbci	r21, 0xFF	; 255
         

        //AddRoundKey
        //input to bits
        for (uint8_t i=0; i<16; i++){
            for (uint8_t j=0; j<4; j++){
 436:	44 30       	cpi	r20, 0x04	; 4
 438:	51 05       	cpc	r21, r1
 43a:	71 f7       	brne	.-36     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 43c:	6c 5f       	subi	r22, 0xFC	; 252
 43e:	7f 4f       	sbci	r23, 0xFF	; 255
        }
         

        //AddRoundKey
        //input to bits
        for (uint8_t i=0; i<16; i++){
 440:	cb 5b       	subi	r28, 0xBB	; 187
 442:	de 4f       	sbci	r29, 0xFE	; 254
 444:	48 81       	ld	r20, Y
 446:	59 81       	ldd	r21, Y+1	; 0x01
 448:	c5 54       	subi	r28, 0x45	; 69
 44a:	d1 40       	sbci	r29, 0x01	; 1
 44c:	e4 16       	cp	r14, r20
 44e:	f5 06       	cpc	r15, r21
 450:	e1 f6       	brne	.-72     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 452:	ae 01       	movw	r20, r28
 454:	4f 5f       	subi	r20, 0xFF	; 255
 456:	5f 4f       	sbci	r21, 0xFF	; 255
 458:	6a 01       	movw	r12, r20
 45a:	8e 01       	movw	r16, r28
 45c:	0f 5d       	subi	r16, 0xDF	; 223
 45e:	1e 4f       	sbci	r17, 0xFE	; 254
            }
        }
        //key to key_bits
        for (uint8_t i=0; i<32; i++){
            for (int j=0; j<4; j++){
                key_bits[4*i+j] = (key[i] >> j) & 0x1;
 460:	d8 01       	movw	r26, r16
 462:	2d 90       	ld	r2, X+
 464:	8d 01       	movw	r16, r26
 466:	31 2c       	mov	r3, r1
 468:	56 01       	movw	r10, r12
                bits[4*i+j] = (input[i] >> j) & 0x1;
            }
        }
        //key to key_bits
        for (uint8_t i=0; i<32; i++){
            for (int j=0; j<4; j++){
 46a:	70 e0       	ldi	r23, 0x00	; 0
 46c:	60 e0       	ldi	r22, 0x00	; 0
                key_bits[4*i+j] = (key[i] >> j) & 0x1;
 46e:	71 01       	movw	r14, r2
 470:	06 2e       	mov	r0, r22
 472:	02 c0       	rjmp	.+4      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 474:	f5 94       	asr	r15
 476:	e7 94       	ror	r14
 478:	0a 94       	dec	r0
 47a:	e2 f7       	brpl	.-8      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 47c:	be 2d       	mov	r27, r14
 47e:	b1 70       	andi	r27, 0x01	; 1
 480:	eb 2e       	mov	r14, r27
 482:	d5 01       	movw	r26, r10
 484:	ed 92       	st	X+, r14
 486:	5d 01       	movw	r10, r26
                bits[4*i+j] = (input[i] >> j) & 0x1;
            }
        }
        //key to key_bits
        for (uint8_t i=0; i<32; i++){
            for (int j=0; j<4; j++){
 488:	6f 5f       	subi	r22, 0xFF	; 255
 48a:	7f 4f       	sbci	r23, 0xFF	; 255
 48c:	64 30       	cpi	r22, 0x04	; 4
 48e:	71 05       	cpc	r23, r1
 490:	71 f7       	brne	.-36     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 492:	b4 e0       	ldi	r27, 0x04	; 4
 494:	cb 0e       	add	r12, r27
 496:	d1 1c       	adc	r13, r1
            for (uint8_t j=0; j<4; j++){
                bits[4*i+j] = (input[i] >> j) & 0x1;
            }
        }
        //key to key_bits
        for (uint8_t i=0; i<32; i++){
 498:	cd 5b       	subi	r28, 0xBD	; 189
 49a:	de 4f       	sbci	r29, 0xFE	; 254
 49c:	e8 80       	ld	r14, Y
 49e:	f9 80       	ldd	r15, Y+1	; 0x01
 4a0:	c3 54       	subi	r28, 0x43	; 67
 4a2:	d1 40       	sbci	r29, 0x01	; 1
 4a4:	e0 16       	cp	r14, r16
 4a6:	f1 06       	cpc	r15, r17
 4a8:	d9 f6       	brne	.-74     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 4aa:	8f 01       	movw	r16, r30
 4ac:	00 5c       	subi	r16, 0xC0	; 192
 4ae:	1f 4f       	sbci	r17, 0xFF	; 255
 4b0:	bf 01       	movw	r22, r30
        }

        //add round key
        uint8_t kbc=0;  //key_bit_counter
        for (uint8_t  i=0; i<16; i++){
            bits[4*i] ^= key_bits[kbc];
 4b2:	da 01       	movw	r26, r20
 4b4:	ed 90       	ld	r14, X+
 4b6:	ad 01       	movw	r20, r26
 4b8:	db 01       	movw	r26, r22
 4ba:	fc 90       	ld	r15, X
 4bc:	fe 24       	eor	r15, r14
 4be:	fc 92       	st	X, r15
            bits[4*i+1] ^= key_bits[kbc+16];
 4c0:	11 96       	adiw	r26, 0x01	; 1
 4c2:	fc 90       	ld	r15, X
 4c4:	da 01       	movw	r26, r20
 4c6:	1f 96       	adiw	r26, 0x0f	; 15
 4c8:	ec 90       	ld	r14, X
 4ca:	fe 24       	eor	r15, r14
 4cc:	db 01       	movw	r26, r22
 4ce:	11 96       	adiw	r26, 0x01	; 1
 4d0:	fc 92       	st	X, r15
 4d2:	6c 5f       	subi	r22, 0xFC	; 252
 4d4:	7f 4f       	sbci	r23, 0xFF	; 255
            }
        }

        //add round key
        uint8_t kbc=0;  //key_bit_counter
        for (uint8_t  i=0; i<16; i++){
 4d6:	06 17       	cp	r16, r22
 4d8:	17 07       	cpc	r17, r23
 4da:	59 f7       	brne	.-42     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
            bits[4*i+1] ^= key_bits[kbc+16];
            kbc++;
        }

        //add constant
        bits[3] ^= GIFT_RC[r] & 0x1;
 4dc:	a3 01       	movw	r20, r6
 4de:	40 5e       	subi	r20, 0xE0	; 224
 4e0:	5f 4d       	sbci	r21, 0xDF	; 223
 4e2:	da 01       	movw	r26, r20
 4e4:	4c 91       	ld	r20, X
 4e6:	64 2f       	mov	r22, r20
 4e8:	61 70       	andi	r22, 0x01	; 1
 4ea:	53 81       	ldd	r21, Z+3	; 0x03
 4ec:	56 27       	eor	r21, r22
 4ee:	53 83       	std	Z+3, r21	; 0x03
        bits[7] ^= (GIFT_RC[r]>>1) & 0x1;
 4f0:	41 fb       	bst	r20, 1
 4f2:	55 27       	eor	r21, r21
 4f4:	50 f9       	bld	r21, 0
 4f6:	67 81       	ldd	r22, Z+7	; 0x07
 4f8:	56 27       	eor	r21, r22
 4fa:	57 83       	std	Z+7, r21	; 0x07
        bits[11] ^= (GIFT_RC[r]>>2) & 0x1;
 4fc:	42 fb       	bst	r20, 2
 4fe:	55 27       	eor	r21, r21
 500:	50 f9       	bld	r21, 0
 502:	63 85       	ldd	r22, Z+11	; 0x0b
 504:	56 27       	eor	r21, r22
 506:	53 87       	std	Z+11, r21	; 0x0b
        bits[15] ^= (GIFT_RC[r]>>3) & 0x1;
 508:	43 fb       	bst	r20, 3
 50a:	55 27       	eor	r21, r21
 50c:	50 f9       	bld	r21, 0
 50e:	67 85       	ldd	r22, Z+15	; 0x0f
 510:	56 27       	eor	r21, r22
 512:	57 87       	std	Z+15, r21	; 0x0f
        bits[19] ^= (GIFT_RC[r]>>4) & 0x1;
 514:	44 fb       	bst	r20, 4
 516:	55 27       	eor	r21, r21
 518:	50 f9       	bld	r21, 0
 51a:	63 89       	ldd	r22, Z+19	; 0x13
 51c:	56 27       	eor	r21, r22
 51e:	53 8b       	std	Z+19, r21	; 0x13
        bits[23] ^= (GIFT_RC[r]>>5) & 0x1;
 520:	45 fb       	bst	r20, 5
 522:	44 27       	eor	r20, r20
 524:	40 f9       	bld	r20, 0
 526:	57 89       	ldd	r21, Z+23	; 0x17
 528:	45 27       	eor	r20, r21
 52a:	47 8b       	std	Z+23, r20	; 0x17
        bits[63] ^= 1;
 52c:	47 ad       	ldd	r20, Z+63	; 0x3f
 52e:	b1 e0       	ldi	r27, 0x01	; 1
 530:	4b 27       	eor	r20, r27
 532:	47 af       	std	Z+63, r20	; 0x3f

        //bits to input
        for (uint8_t  i=0; i<16; i++){
            input[i]=0;
 534:	d4 01       	movw	r26, r8
 536:	1d 92       	st	X+, r1
 538:	4d 01       	movw	r8, r26
 53a:	8f 01       	movw	r16, r30
 53c:	70 e0       	ldi	r23, 0x00	; 0
 53e:	60 e0       	ldi	r22, 0x00	; 0
 540:	f1 2c       	mov	r15, r1
            for (uint8_t  j=0; j<4; j++){
                 input[i] ^= bits[4*i+j] << j;
 542:	d8 01       	movw	r26, r16
 544:	4d 91       	ld	r20, X+
 546:	8d 01       	movw	r16, r26
 548:	06 2e       	mov	r0, r22
 54a:	01 c0       	rjmp	.+2      	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
 54c:	44 0f       	add	r20, r20
 54e:	0a 94       	dec	r0
 550:	ea f7       	brpl	.-6      	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
 552:	f4 26       	eor	r15, r20
 554:	6f 5f       	subi	r22, 0xFF	; 255
 556:	7f 4f       	sbci	r23, 0xFF	; 255
        bits[63] ^= 1;

        //bits to input
        for (uint8_t  i=0; i<16; i++){
            input[i]=0;
            for (uint8_t  j=0; j<4; j++){
 558:	64 30       	cpi	r22, 0x04	; 4
 55a:	71 05       	cpc	r23, r1
 55c:	91 f7       	brne	.-28     	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
 55e:	a4 01       	movw	r20, r8
 560:	41 50       	subi	r20, 0x01	; 1
 562:	51 09       	sbc	r21, r1
 564:	da 01       	movw	r26, r20
 566:	fc 92       	st	X, r15
 568:	34 96       	adiw	r30, 0x04	; 4
        bits[19] ^= (GIFT_RC[r]>>4) & 0x1;
        bits[23] ^= (GIFT_RC[r]>>5) & 0x1;
        bits[63] ^= 1;

        //bits to input
        for (uint8_t  i=0; i<16; i++){
 56a:	cb 5b       	subi	r28, 0xBB	; 187
 56c:	de 4f       	sbci	r29, 0xFE	; 254
 56e:	e8 80       	ld	r14, Y
 570:	f9 80       	ldd	r15, Y+1	; 0x01
 572:	c5 54       	subi	r28, 0x45	; 69
 574:	d1 40       	sbci	r29, 0x01	; 1
 576:	8e 14       	cp	r8, r14
 578:	9f 04       	cpc	r9, r15
 57a:	e1 f6       	brne	.-72     	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
 57c:	6e 01       	movw	r12, r28
 57e:	31 e0       	ldi	r19, 0x01	; 1
 580:	c3 0e       	add	r12, r19
 582:	d3 1e       	adc	r13, r19
 584:	86 01       	movw	r16, r12
 586:	48 e0       	ldi	r20, 0x08	; 8
 588:	50 e0       	ldi	r21, 0x00	; 0
 58a:	f6 01       	movw	r30, r12
        }

        //key update
        //entire key>>32
        for(uint8_t  i=0; i<32; i++){
            temp_key[i] = key[(i+8)%32];
 58c:	ba 01       	movw	r22, r20
 58e:	6f 71       	andi	r22, 0x1F	; 31
 590:	77 27       	eor	r23, r23
 592:	a1 e2       	ldi	r26, 0x21	; 33
 594:	b1 e0       	ldi	r27, 0x01	; 1
 596:	ac 0f       	add	r26, r28
 598:	bd 1f       	adc	r27, r29
 59a:	6a 0f       	add	r22, r26
 59c:	7b 1f       	adc	r23, r27
 59e:	db 01       	movw	r26, r22
 5a0:	6c 91       	ld	r22, X
 5a2:	d8 01       	movw	r26, r16
 5a4:	6d 93       	st	X+, r22
 5a6:	8d 01       	movw	r16, r26
 5a8:	4f 5f       	subi	r20, 0xFF	; 255
 5aa:	5f 4f       	sbci	r21, 0xFF	; 255
            }
        }

        //key update
        //entire key>>32
        for(uint8_t  i=0; i<32; i++){
 5ac:	48 32       	cpi	r20, 0x28	; 40
 5ae:	51 05       	cpc	r21, r1
 5b0:	69 f7       	brne	.-38     	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 5b2:	b6 01       	movw	r22, r12
 5b4:	68 5e       	subi	r22, 0xE8	; 232
 5b6:	7f 4f       	sbci	r23, 0xFF	; 255
 5b8:	ae 01       	movw	r20, r28
 5ba:	4f 5d       	subi	r20, 0xDF	; 223
 5bc:	5e 4f       	sbci	r21, 0xFE	; 254
            temp_key[i] = key[(i+8)%32];
        }
        for(uint8_t i=0; i<24; i++) key[i] = temp_key[i];
 5be:	d6 01       	movw	r26, r12
 5c0:	1d 91       	ld	r17, X+
 5c2:	6d 01       	movw	r12, r26
 5c4:	da 01       	movw	r26, r20
 5c6:	1d 93       	st	X+, r17
 5c8:	ad 01       	movw	r20, r26
 5ca:	6c 15       	cp	r22, r12
 5cc:	7d 05       	cpc	r23, r13
 5ce:	b9 f7       	brne	.-18     	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
        //k0>>12
        key[24] = temp_key[27];
 5d0:	43 8d       	ldd	r20, Z+27	; 0x1b
 5d2:	c7 5c       	subi	r28, 0xC7	; 199
 5d4:	de 4f       	sbci	r29, 0xFE	; 254
 5d6:	48 83       	st	Y, r20
 5d8:	c9 53       	subi	r28, 0x39	; 57
 5da:	d1 40       	sbci	r29, 0x01	; 1
        key[25] = temp_key[24];
 5dc:	40 8d       	ldd	r20, Z+24	; 0x18
 5de:	c6 5c       	subi	r28, 0xC6	; 198
 5e0:	de 4f       	sbci	r29, 0xFE	; 254
 5e2:	48 83       	st	Y, r20
 5e4:	ca 53       	subi	r28, 0x3A	; 58
 5e6:	d1 40       	sbci	r29, 0x01	; 1
        key[26] = temp_key[25];
 5e8:	41 8d       	ldd	r20, Z+25	; 0x19
 5ea:	c5 5c       	subi	r28, 0xC5	; 197
 5ec:	de 4f       	sbci	r29, 0xFE	; 254
 5ee:	48 83       	st	Y, r20
 5f0:	cb 53       	subi	r28, 0x3B	; 59
 5f2:	d1 40       	sbci	r29, 0x01	; 1
        key[27] = temp_key[26];
 5f4:	42 8d       	ldd	r20, Z+26	; 0x1a
 5f6:	c4 5c       	subi	r28, 0xC4	; 196
 5f8:	de 4f       	sbci	r29, 0xFE	; 254
 5fa:	48 83       	st	Y, r20
 5fc:	cc 53       	subi	r28, 0x3C	; 60
 5fe:	d1 40       	sbci	r29, 0x01	; 1
        //k1>>2
        key[28] = ((temp_key[28]&0xc)>>2) ^ ((temp_key[29]&0x3)<<2);
 600:	a4 8d       	ldd	r26, Z+28	; 0x1c
 602:	b0 e0       	ldi	r27, 0x00	; 0
 604:	45 8d       	ldd	r20, Z+29	; 0x1d
 606:	50 e0       	ldi	r21, 0x00	; 0
 608:	bd 01       	movw	r22, r26
 60a:	75 95       	asr	r23
 60c:	67 95       	ror	r22
 60e:	75 95       	asr	r23
 610:	67 95       	ror	r22
 612:	63 70       	andi	r22, 0x03	; 3
 614:	8a 01       	movw	r16, r20
 616:	00 0f       	add	r16, r16
 618:	11 1f       	adc	r17, r17
 61a:	00 0f       	add	r16, r16
 61c:	11 1f       	adc	r17, r17
 61e:	0c 70       	andi	r16, 0x0C	; 12
 620:	60 2b       	or	r22, r16
 622:	c3 5c       	subi	r28, 0xC3	; 195
 624:	de 4f       	sbci	r29, 0xFE	; 254
 626:	68 83       	st	Y, r22
 628:	cd 53       	subi	r28, 0x3D	; 61
 62a:	d1 40       	sbci	r29, 0x01	; 1
        key[29] = ((temp_key[29]&0xc)>>2) ^ ((temp_key[30]&0x3)<<2);
 62c:	66 8d       	ldd	r22, Z+30	; 0x1e
 62e:	70 e0       	ldi	r23, 0x00	; 0
 630:	55 95       	asr	r21
 632:	47 95       	ror	r20
 634:	55 95       	asr	r21
 636:	47 95       	ror	r20
 638:	43 70       	andi	r20, 0x03	; 3
 63a:	8b 01       	movw	r16, r22
 63c:	00 0f       	add	r16, r16
 63e:	11 1f       	adc	r17, r17
 640:	00 0f       	add	r16, r16
 642:	11 1f       	adc	r17, r17
 644:	0c 70       	andi	r16, 0x0C	; 12
 646:	40 2b       	or	r20, r16
 648:	c2 5c       	subi	r28, 0xC2	; 194
 64a:	de 4f       	sbci	r29, 0xFE	; 254
 64c:	48 83       	st	Y, r20
 64e:	ce 53       	subi	r28, 0x3E	; 62
 650:	d1 40       	sbci	r29, 0x01	; 1
        key[30] = ((temp_key[30]&0xc)>>2) ^ ((temp_key[31]&0x3)<<2);
 652:	47 8d       	ldd	r20, Z+31	; 0x1f
 654:	50 e0       	ldi	r21, 0x00	; 0
 656:	75 95       	asr	r23
 658:	67 95       	ror	r22
 65a:	75 95       	asr	r23
 65c:	67 95       	ror	r22
 65e:	63 70       	andi	r22, 0x03	; 3
 660:	fa 01       	movw	r30, r20
 662:	ee 0f       	add	r30, r30
 664:	ff 1f       	adc	r31, r31
 666:	ee 0f       	add	r30, r30
 668:	ff 1f       	adc	r31, r31
 66a:	ec 70       	andi	r30, 0x0C	; 12
 66c:	6e 2b       	or	r22, r30
 66e:	c1 5c       	subi	r28, 0xC1	; 193
 670:	de 4f       	sbci	r29, 0xFE	; 254
 672:	68 83       	st	Y, r22
 674:	cf 53       	subi	r28, 0x3F	; 63
 676:	d1 40       	sbci	r29, 0x01	; 1
        key[31] = ((temp_key[31]&0xc)>>2) ^ ((temp_key[28]&0x3)<<2);
 678:	55 95       	asr	r21
 67a:	47 95       	ror	r20
 67c:	55 95       	asr	r21
 67e:	47 95       	ror	r20
 680:	43 70       	andi	r20, 0x03	; 3
 682:	aa 0f       	add	r26, r26
 684:	bb 1f       	adc	r27, r27
 686:	aa 0f       	add	r26, r26
 688:	bb 1f       	adc	r27, r27
 68a:	ac 70       	andi	r26, 0x0C	; 12
 68c:	4a 2b       	or	r20, r26
 68e:	c0 5c       	subi	r28, 0xC0	; 192
 690:	de 4f       	sbci	r29, 0xFE	; 254
 692:	48 83       	st	Y, r20
 694:	c0 54       	subi	r28, 0x40	; 64
 696:	d1 40       	sbci	r29, 0x01	; 1
    }

    uint8_t bits[64], perm_bits[64];
    uint8_t key_bits[128];
    uint8_t temp_key[32];
    for (uint8_t r=0; r<no_of_rounds; r++){
 698:	2f 5f       	subi	r18, 0xFF	; 255
 69a:	04 ce       	rjmp	.-1016   	; 0x2a4 <enc64+0x76>

0000069c <get_pt>:


uint8_t get_pt(uint8_t* pt)
{
 69c:	cf 93       	push	r28
 69e:	df 93       	push	r29
 6a0:	c0 ee       	ldi	r28, 0xE0	; 224
 6a2:	d1 e2       	ldi	r29, 0x21	; 33
 6a4:	9c 01       	movw	r18, r24
 6a6:	20 5f       	subi	r18, 0xF0	; 240
 6a8:	3f 4f       	sbci	r19, 0xFF	; 255
 6aa:	fe 01       	movw	r30, r28

    for(int i=0; i < 16; i++){
        msg_copy[i]=pt[i]; 
 6ac:	dc 01       	movw	r26, r24
 6ae:	4d 91       	ld	r20, X+
 6b0:	cd 01       	movw	r24, r26
 6b2:	41 93       	st	Z+, r20


uint8_t get_pt(uint8_t* pt)
{

    for(int i=0; i < 16; i++){
 6b4:	a2 17       	cp	r26, r18
 6b6:	b3 07       	cpc	r27, r19
 6b8:	c9 f7       	brne	.-14     	; 0x6ac <get_pt+0x10>
        msg_copy[i]=pt[i]; 
    }
    
    //trigger_high();
    enc64(msg_copy,K,28,1);
 6ba:	21 e0       	ldi	r18, 0x01	; 1
 6bc:	4c e1       	ldi	r20, 0x1C	; 28
 6be:	50 e0       	ldi	r21, 0x00	; 0
 6c0:	60 e0       	ldi	r22, 0x00	; 0
 6c2:	70 e2       	ldi	r23, 0x20	; 32
 6c4:	80 ee       	ldi	r24, 0xE0	; 224
 6c6:	91 e2       	ldi	r25, 0x21	; 33
 6c8:	0e 94 17 01 	call	0x22e	; 0x22e <enc64>
 6cc:	e0 ee       	ldi	r30, 0xE0	; 224
 6ce:	f1 e2       	ldi	r31, 0x21	; 33
    //trigger_low();
    
    for(int i=0; i < 16; i++){
        msg1_copy[15-i]=msg_copy[i]; 
 6d0:	89 91       	ld	r24, Y+
 6d2:	82 93       	st	-Z, r24
    
    //trigger_high();
    enc64(msg_copy,K,28,1);
    //trigger_low();
    
    for(int i=0; i < 16; i++){
 6d4:	b1 e2       	ldi	r27, 0x21	; 33
 6d6:	e0 3d       	cpi	r30, 0xD0	; 208
 6d8:	fb 07       	cpc	r31, r27
 6da:	d1 f7       	brne	.-12     	; 0x6d0 <get_pt+0x34>
        msg1_copy[15-i]=msg_copy[i]; 
    }
    
    
    simpleserial_put('r', 16, msg1_copy);
 6dc:	40 ed       	ldi	r20, 0xD0	; 208
 6de:	51 e2       	ldi	r21, 0x21	; 33
 6e0:	60 e1       	ldi	r22, 0x10	; 16
 6e2:	82 e7       	ldi	r24, 0x72	; 114
 6e4:	0e 94 0d 04 	call	0x81a	; 0x81a <simpleserial_put>

   return 0x00;
}
 6e8:	80 e0       	ldi	r24, 0x00	; 0
 6ea:	df 91       	pop	r29
 6ec:	cf 91       	pop	r28
 6ee:	08 95       	ret

000006f0 <check_version>:
// Callback function for "v" command.
// This can exist in v1.0 as long as we don't actually send back an ack ("z")
uint8_t check_version(uint8_t *v, uint8_t len)
{
	return SS_VER;
}
 6f0:	81 e0       	ldi	r24, 0x01	; 1
 6f2:	08 95       	ret

000006f4 <ss_crc>:
//#define SS_VER_2_0 2


#define CRC 0xA6
uint8_t ss_crc(uint8_t *buf, uint8_t len)
{
 6f4:	fc 01       	movw	r30, r24
	unsigned int k = 0;
	uint8_t crc = 0x00;
 6f6:	80 e0       	ldi	r24, 0x00	; 0
	while (len--) {
		crc ^= *buf++;
		for (k = 0; k < 8; k++) {
			crc = crc & 0x80 ? (crc << 1) ^ 0xA6: crc << 1;
 6f8:	46 ea       	ldi	r20, 0xA6	; 166
#define CRC 0xA6
uint8_t ss_crc(uint8_t *buf, uint8_t len)
{
	unsigned int k = 0;
	uint8_t crc = 0x00;
	while (len--) {
 6fa:	61 50       	subi	r22, 0x01	; 1
 6fc:	08 f4       	brcc	.+2      	; 0x700 <ss_crc+0xc>
			crc = crc & 0x80 ? (crc << 1) ^ 0xA6: crc << 1;
		}
	}
	return crc;

}
 6fe:	08 95       	ret
uint8_t ss_crc(uint8_t *buf, uint8_t len)
{
	unsigned int k = 0;
	uint8_t crc = 0x00;
	while (len--) {
		crc ^= *buf++;
 700:	91 91       	ld	r25, Z+
 702:	98 27       	eor	r25, r24
 704:	28 e0       	ldi	r18, 0x08	; 8
 706:	30 e0       	ldi	r19, 0x00	; 0
		for (k = 0; k < 8; k++) {
			crc = crc & 0x80 ? (crc << 1) ^ 0xA6: crc << 1;
 708:	97 ff       	sbrs	r25, 7
 70a:	07 c0       	rjmp	.+14     	; 0x71a <ss_crc+0x26>
 70c:	99 0f       	add	r25, r25
 70e:	94 27       	eor	r25, r20
 710:	21 50       	subi	r18, 0x01	; 1
 712:	31 09       	sbc	r19, r1
 714:	89 2f       	mov	r24, r25
{
	unsigned int k = 0;
	uint8_t crc = 0x00;
	while (len--) {
		crc ^= *buf++;
		for (k = 0; k < 8; k++) {
 716:	c1 f7       	brne	.-16     	; 0x708 <ss_crc+0x14>
 718:	f0 cf       	rjmp	.-32     	; 0x6fa <ss_crc+0x6>
			crc = crc & 0x80 ? (crc << 1) ^ 0xA6: crc << 1;
 71a:	99 0f       	add	r25, r25
 71c:	f9 cf       	rjmp	.-14     	; 0x710 <ss_crc+0x1c>

0000071e <hex_decode>:
	'0', '1', '2', '3', '4', '5', '6', '7',
	'8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
};

int hex_decode(int len, char* ascii_buf, uint8_t* data_buf)
{
 71e:	db 01       	movw	r26, r22
	for(int i = 0; i < len; i++)
 720:	fa 01       	movw	r30, r20
 722:	9f 01       	movw	r18, r30
 724:	24 1b       	sub	r18, r20
 726:	35 0b       	sbc	r19, r21
 728:	28 17       	cp	r18, r24
 72a:	39 07       	cpc	r19, r25
 72c:	1c f0       	brlt	.+6      	; 0x734 <hex_decode+0x16>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
		else
			return 1;
	}

	return 0;
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	80 e0       	ldi	r24, 0x00	; 0
}
 732:	08 95       	ret

int hex_decode(int len, char* ascii_buf, uint8_t* data_buf)
{
	for(int i = 0; i < len; i++)
	{
		char n_hi = ascii_buf[2*i];
 734:	2c 91       	ld	r18, X
		char n_lo = ascii_buf[2*i+1];
 736:	11 96       	adiw	r26, 0x01	; 1
 738:	3c 91       	ld	r19, X
 73a:	11 97       	sbiw	r26, 0x01	; 1

		if(n_lo >= '0' && n_lo <= '9')
 73c:	60 ed       	ldi	r22, 0xD0	; 208
 73e:	63 0f       	add	r22, r19
 740:	6a 30       	cpi	r22, 0x0A	; 10
 742:	68 f4       	brcc	.+26     	; 0x75e <hex_decode+0x40>
			data_buf[i] = n_lo - '0';
 744:	60 83       	st	Z, r22
		else if(n_lo >= 'a' && n_lo <= 'f')
			data_buf[i] = n_lo - 'a' + 10;
		else
			return 1;

		if(n_hi >= '0' && n_hi <= '9')
 746:	30 ed       	ldi	r19, 0xD0	; 208
 748:	32 0f       	add	r19, r18
 74a:	3a 30       	cpi	r19, 0x0A	; 10
 74c:	c0 f4       	brcc	.+48     	; 0x77e <hex_decode+0x60>
			data_buf[i] |= (n_hi - '0') << 4;
 74e:	22 95       	swap	r18
 750:	20 7f       	andi	r18, 0xF0	; 240
		else if(n_hi >= 'A' && n_hi <= 'F')
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
		else if(n_hi >= 'a' && n_hi <= 'f')
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 752:	30 81       	ld	r19, Z
 754:	23 2b       	or	r18, r19
 756:	20 83       	st	Z, r18
 758:	31 96       	adiw	r30, 0x01	; 1
 75a:	12 96       	adiw	r26, 0x02	; 2
 75c:	e2 cf       	rjmp	.-60     	; 0x722 <hex_decode+0x4>
		char n_hi = ascii_buf[2*i];
		char n_lo = ascii_buf[2*i+1];

		if(n_lo >= '0' && n_lo <= '9')
			data_buf[i] = n_lo - '0';
		else if(n_lo >= 'A' && n_lo <= 'F')
 75e:	6f eb       	ldi	r22, 0xBF	; 191
 760:	63 0f       	add	r22, r19
 762:	66 30       	cpi	r22, 0x06	; 6
 764:	18 f4       	brcc	.+6      	; 0x76c <hex_decode+0x4e>
			data_buf[i] = n_lo - 'A' + 10;
 766:	37 53       	subi	r19, 0x37	; 55
		else if(n_lo >= 'a' && n_lo <= 'f')
			data_buf[i] = n_lo - 'a' + 10;
 768:	30 83       	st	Z, r19
 76a:	ed cf       	rjmp	.-38     	; 0x746 <hex_decode+0x28>

		if(n_lo >= '0' && n_lo <= '9')
			data_buf[i] = n_lo - '0';
		else if(n_lo >= 'A' && n_lo <= 'F')
			data_buf[i] = n_lo - 'A' + 10;
		else if(n_lo >= 'a' && n_lo <= 'f')
 76c:	6f e9       	ldi	r22, 0x9F	; 159
 76e:	63 0f       	add	r22, r19
 770:	66 30       	cpi	r22, 0x06	; 6
 772:	18 f0       	brcs	.+6      	; 0x77a <hex_decode+0x5c>
			data_buf[i] = n_lo - 'a' + 10;
		else
			return 1;
 774:	81 e0       	ldi	r24, 0x01	; 1
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	08 95       	ret
		if(n_lo >= '0' && n_lo <= '9')
			data_buf[i] = n_lo - '0';
		else if(n_lo >= 'A' && n_lo <= 'F')
			data_buf[i] = n_lo - 'A' + 10;
		else if(n_lo >= 'a' && n_lo <= 'f')
			data_buf[i] = n_lo - 'a' + 10;
 77a:	37 55       	subi	r19, 0x57	; 87
 77c:	f5 cf       	rjmp	.-22     	; 0x768 <hex_decode+0x4a>
		else
			return 1;

		if(n_hi >= '0' && n_hi <= '9')
			data_buf[i] |= (n_hi - '0') << 4;
		else if(n_hi >= 'A' && n_hi <= 'F')
 77e:	3f eb       	ldi	r19, 0xBF	; 191
 780:	32 0f       	add	r19, r18
 782:	36 30       	cpi	r19, 0x06	; 6
 784:	40 f4       	brcc	.+16     	; 0x796 <hex_decode+0x78>
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 786:	27 53       	subi	r18, 0x37	; 55
 788:	33 0b       	sbc	r19, r19
		else if(n_hi >= 'a' && n_hi <= 'f')
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 78a:	64 e0       	ldi	r22, 0x04	; 4
 78c:	22 0f       	add	r18, r18
 78e:	33 1f       	adc	r19, r19
 790:	6a 95       	dec	r22
 792:	e1 f7       	brne	.-8      	; 0x78c <hex_decode+0x6e>
 794:	de cf       	rjmp	.-68     	; 0x752 <hex_decode+0x34>

		if(n_hi >= '0' && n_hi <= '9')
			data_buf[i] |= (n_hi - '0') << 4;
		else if(n_hi >= 'A' && n_hi <= 'F')
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
		else if(n_hi >= 'a' && n_hi <= 'f')
 796:	3f e9       	ldi	r19, 0x9F	; 159
 798:	32 0f       	add	r19, r18
 79a:	36 30       	cpi	r19, 0x06	; 6
 79c:	58 f7       	brcc	.-42     	; 0x774 <hex_decode+0x56>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 79e:	27 55       	subi	r18, 0x57	; 87
 7a0:	33 0b       	sbc	r19, r19
 7a2:	f3 cf       	rjmp	.-26     	; 0x78a <hex_decode+0x6c>

000007a4 <simpleserial_addcmd_flags>:
	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
}

int simpleserial_addcmd_flags(char c, unsigned int len, uint8_t (*fp)(uint8_t*, uint8_t), uint8_t fl)
{
	if(num_commands >= MAX_SS_CMDS)
 7a4:	a0 91 ce 21 	lds	r26, 0x21CE	; 0x8021ce <num_commands>
 7a8:	b0 91 cf 21 	lds	r27, 0x21CF	; 0x8021cf <num_commands+0x1>
 7ac:	a0 32       	cpi	r26, 0x20	; 32
 7ae:	b1 05       	cpc	r27, r1
 7b0:	cc f4       	brge	.+50     	; 0x7e4 <simpleserial_addcmd_flags+0x40>
		return 1;

	if(len >= MAX_SS_LEN)
 7b2:	60 3c       	cpi	r22, 0xC0	; 192
 7b4:	71 05       	cpc	r23, r1
 7b6:	b0 f4       	brcc	.+44     	; 0x7e4 <simpleserial_addcmd_flags+0x40>
		return 1;

	commands[num_commands].c   = c;
 7b8:	96 e0       	ldi	r25, 0x06	; 6
 7ba:	9a 9f       	mul	r25, r26
 7bc:	f0 01       	movw	r30, r0
 7be:	9b 9f       	mul	r25, r27
 7c0:	f0 0d       	add	r31, r0
 7c2:	11 24       	eor	r1, r1
 7c4:	e2 5f       	subi	r30, 0xF2	; 242
 7c6:	fe 4d       	sbci	r31, 0xDE	; 222
 7c8:	80 83       	st	Z, r24
	commands[num_commands].len = len;
 7ca:	61 83       	std	Z+1, r22	; 0x01
 7cc:	72 83       	std	Z+2, r23	; 0x02
	commands[num_commands].fp  = fp;
 7ce:	43 83       	std	Z+3, r20	; 0x03
 7d0:	54 83       	std	Z+4, r21	; 0x04
	commands[num_commands].flags = fl;
 7d2:	25 83       	std	Z+5, r18	; 0x05
	num_commands++;
 7d4:	11 96       	adiw	r26, 0x01	; 1
 7d6:	a0 93 ce 21 	sts	0x21CE, r26	; 0x8021ce <num_commands>
 7da:	b0 93 cf 21 	sts	0x21CF, r27	; 0x8021cf <num_commands+0x1>

	return 0;
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	80 e0       	ldi	r24, 0x00	; 0
 7e2:	08 95       	ret
}

int simpleserial_addcmd_flags(char c, unsigned int len, uint8_t (*fp)(uint8_t*, uint8_t), uint8_t fl)
{
	if(num_commands >= MAX_SS_CMDS)
		return 1;
 7e4:	81 e0       	ldi	r24, 0x01	; 1
 7e6:	90 e0       	ldi	r25, 0x00	; 0
	commands[num_commands].fp  = fp;
	commands[num_commands].flags = fl;
	num_commands++;

	return 0;
}
 7e8:	08 95       	ret

000007ea <simpleserial_addcmd>:
    simpleserial_addcmd('y', 0, ss_num_commands);
}

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t*, uint8_t))
{
	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
 7ea:	20 e0       	ldi	r18, 0x00	; 0
 7ec:	0c 94 d2 03 	jmp	0x7a4	; 0x7a4 <simpleserial_addcmd_flags>

000007f0 <simpleserial_init>:

// Set up the SimpleSerial module by preparing internal commands
// This just adds the "v" command for now...
void simpleserial_init()
{
	simpleserial_addcmd('v', 0, check_version);
 7f0:	48 e7       	ldi	r20, 0x78	; 120
 7f2:	53 e0       	ldi	r21, 0x03	; 3
 7f4:	70 e0       	ldi	r23, 0x00	; 0
 7f6:	60 e0       	ldi	r22, 0x00	; 0
 7f8:	86 e7       	ldi	r24, 0x76	; 118
 7fa:	0e 94 f5 03 	call	0x7ea	; 0x7ea <simpleserial_addcmd>
    simpleserial_addcmd('w', 0, ss_get_commands);
 7fe:	40 e5       	ldi	r20, 0x50	; 80
 800:	54 e0       	ldi	r21, 0x04	; 4
 802:	70 e0       	ldi	r23, 0x00	; 0
 804:	60 e0       	ldi	r22, 0x00	; 0
 806:	87 e7       	ldi	r24, 0x77	; 119
 808:	0e 94 f5 03 	call	0x7ea	; 0x7ea <simpleserial_addcmd>
    simpleserial_addcmd('y', 0, ss_num_commands);
 80c:	4c e3       	ldi	r20, 0x3C	; 60
 80e:	54 e0       	ldi	r21, 0x04	; 4
 810:	70 e0       	ldi	r23, 0x00	; 0
 812:	60 e0       	ldi	r22, 0x00	; 0
 814:	89 e7       	ldi	r24, 0x79	; 121
 816:	0c 94 f5 03 	jmp	0x7ea	; 0x7ea <simpleserial_addcmd>

0000081a <simpleserial_put>:
	simpleserial_put('z', 1, ret);
#endif
}

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 81a:	ef 92       	push	r14
 81c:	ff 92       	push	r15
 81e:	0f 93       	push	r16
 820:	1f 93       	push	r17
 822:	cf 93       	push	r28
 824:	df 93       	push	r29
 826:	06 2f       	mov	r16, r22
 828:	7a 01       	movw	r14, r20
	// Write first character
	putch(c);
 82a:	0e 94 93 05 	call	0xb26	; 0xb26 <output_ch_0>

	// Write each byte as two nibbles
	for(int i = 0; i < size; i++)
 82e:	e7 01       	movw	r28, r14
 830:	10 e0       	ldi	r17, 0x00	; 0
 832:	ce 01       	movw	r24, r28
 834:	8e 19       	sub	r24, r14
 836:	9f 09       	sbc	r25, r15
 838:	80 17       	cp	r24, r16
 83a:	91 07       	cpc	r25, r17
 83c:	4c f0       	brlt	.+18     	; 0x850 <simpleserial_put+0x36>
		putch(hex_lookup[output[i] >> 4 ]);
		putch(hex_lookup[output[i] & 0xF]);
	}

	// Write trailing '\n'
	putch('\n');
 83e:	8a e0       	ldi	r24, 0x0A	; 10
}
 840:	df 91       	pop	r29
 842:	cf 91       	pop	r28
 844:	1f 91       	pop	r17
 846:	0f 91       	pop	r16
 848:	ff 90       	pop	r15
 84a:	ef 90       	pop	r14
		putch(hex_lookup[output[i] >> 4 ]);
		putch(hex_lookup[output[i] & 0xF]);
	}

	// Write trailing '\n'
	putch('\n');
 84c:	0c 94 93 05 	jmp	0xb26	; 0xb26 <output_ch_0>
	putch(c);

	// Write each byte as two nibbles
	for(int i = 0; i < size; i++)
	{
		putch(hex_lookup[output[i] >> 4 ]);
 850:	e9 91       	ld	r30, Y+
 852:	e2 95       	swap	r30
 854:	ef 70       	andi	r30, 0x0F	; 15
 856:	f0 e0       	ldi	r31, 0x00	; 0
 858:	e2 50       	subi	r30, 0x02	; 2
 85a:	ff 4d       	sbci	r31, 0xDF	; 223
 85c:	80 81       	ld	r24, Z
 85e:	0e 94 93 05 	call	0xb26	; 0xb26 <output_ch_0>
		putch(hex_lookup[output[i] & 0xF]);
 862:	fe 01       	movw	r30, r28
 864:	31 97       	sbiw	r30, 0x01	; 1
 866:	e0 81       	ld	r30, Z
 868:	ef 70       	andi	r30, 0x0F	; 15
 86a:	f0 e0       	ldi	r31, 0x00	; 0
 86c:	e2 50       	subi	r30, 0x02	; 2
 86e:	ff 4d       	sbci	r31, 0xDF	; 223
 870:	80 81       	ld	r24, Z
 872:	0e 94 93 05 	call	0xb26	; 0xb26 <output_ch_0>
 876:	dd cf       	rjmp	.-70     	; 0x832 <simpleserial_put+0x18>

00000878 <ss_num_commands>:
{
	return SS_VER;
}

uint8_t ss_num_commands(uint8_t *x, uint8_t len)
{
 878:	cf 93       	push	r28
 87a:	df 93       	push	r29
 87c:	1f 92       	push	r1
 87e:	cd b7       	in	r28, 0x3d	; 61
 880:	de b7       	in	r29, 0x3e	; 62
    uint8_t ncmds = num_commands & 0xFF;
 882:	80 91 ce 21 	lds	r24, 0x21CE	; 0x8021ce <num_commands>
 886:	89 83       	std	Y+1, r24	; 0x01
    simpleserial_put('r', 0x01, &ncmds);
 888:	ae 01       	movw	r20, r28
 88a:	4f 5f       	subi	r20, 0xFF	; 255
 88c:	5f 4f       	sbci	r21, 0xFF	; 255
 88e:	61 e0       	ldi	r22, 0x01	; 1
 890:	82 e7       	ldi	r24, 0x72	; 114
 892:	0e 94 0d 04 	call	0x81a	; 0x81a <simpleserial_put>
    return 0x00;
}
 896:	80 e0       	ldi	r24, 0x00	; 0
 898:	0f 90       	pop	r0
 89a:	df 91       	pop	r29
 89c:	cf 91       	pop	r28
 89e:	08 95       	ret

000008a0 <ss_get_commands>:
    uint8_t len;
    uint8_t flags;
} ss_cmd_repr;

uint8_t ss_get_commands(uint8_t *x, uint8_t len)
{
 8a0:	cf 93       	push	r28
 8a2:	df 93       	push	r29
 8a4:	cd b7       	in	r28, 0x3d	; 61
 8a6:	de b7       	in	r29, 0x3e	; 62
 8a8:	c0 56       	subi	r28, 0x60	; 96
 8aa:	d1 09       	sbc	r29, r1
 8ac:	cd bf       	out	0x3d, r28	; 61
 8ae:	de bf       	out	0x3e, r29	; 62
    ss_cmd_repr repr_cmd_buf[MAX_SS_CMDS];
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8b0:	20 91 ce 21 	lds	r18, 0x21CE	; 0x8021ce <num_commands>
 8b4:	30 91 cf 21 	lds	r19, 0x21CF	; 0x8021cf <num_commands+0x1>
 8b8:	b9 01       	movw	r22, r18
 8ba:	77 27       	eor	r23, r23
 8bc:	40 e0       	ldi	r20, 0x00	; 0
        repr_cmd_buf[i].c = commands[i].c;
 8be:	56 e0       	ldi	r21, 0x06	; 6
} ss_cmd_repr;

uint8_t ss_get_commands(uint8_t *x, uint8_t len)
{
    ss_cmd_repr repr_cmd_buf[MAX_SS_CMDS];
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8c0:	84 2f       	mov	r24, r20
 8c2:	90 e0       	ldi	r25, 0x00	; 0
 8c4:	86 17       	cp	r24, r22
 8c6:	97 07       	cpc	r25, r23
 8c8:	8c f0       	brlt	.+34     	; 0x8ec <ss_get_commands+0x4c>
        repr_cmd_buf[i].c = commands[i].c;
        repr_cmd_buf[i].len = commands[i].len;
        repr_cmd_buf[i].flags = commands[i].flags;
    }

    simpleserial_put('r', num_commands * 0x03, &repr_cmd_buf);
 8ca:	62 2f       	mov	r22, r18
 8cc:	66 0f       	add	r22, r22
 8ce:	62 0f       	add	r22, r18
 8d0:	ae 01       	movw	r20, r28
 8d2:	4f 5f       	subi	r20, 0xFF	; 255
 8d4:	5f 4f       	sbci	r21, 0xFF	; 255
 8d6:	82 e7       	ldi	r24, 0x72	; 114
 8d8:	0e 94 0d 04 	call	0x81a	; 0x81a <simpleserial_put>
    return 0x00;
}
 8dc:	80 e0       	ldi	r24, 0x00	; 0
 8de:	c0 5a       	subi	r28, 0xA0	; 160
 8e0:	df 4f       	sbci	r29, 0xFF	; 255
 8e2:	cd bf       	out	0x3d, r28	; 61
 8e4:	de bf       	out	0x3e, r29	; 62
 8e6:	df 91       	pop	r29
 8e8:	cf 91       	pop	r28
 8ea:	08 95       	ret

uint8_t ss_get_commands(uint8_t *x, uint8_t len)
{
    ss_cmd_repr repr_cmd_buf[MAX_SS_CMDS];
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
        repr_cmd_buf[i].c = commands[i].c;
 8ec:	fc 01       	movw	r30, r24
 8ee:	ee 0f       	add	r30, r30
 8f0:	ff 1f       	adc	r31, r31
 8f2:	e8 0f       	add	r30, r24
 8f4:	f9 1f       	adc	r31, r25
 8f6:	a1 e0       	ldi	r26, 0x01	; 1
 8f8:	b0 e0       	ldi	r27, 0x00	; 0
 8fa:	ac 0f       	add	r26, r28
 8fc:	bd 1f       	adc	r27, r29
 8fe:	ea 0f       	add	r30, r26
 900:	fb 1f       	adc	r31, r27
 902:	58 9f       	mul	r21, r24
 904:	d0 01       	movw	r26, r0
 906:	59 9f       	mul	r21, r25
 908:	b0 0d       	add	r27, r0
 90a:	11 24       	eor	r1, r1
 90c:	a2 5f       	subi	r26, 0xF2	; 242
 90e:	be 4d       	sbci	r27, 0xDE	; 222
 910:	8c 91       	ld	r24, X
 912:	80 83       	st	Z, r24
        repr_cmd_buf[i].len = commands[i].len;
 914:	11 96       	adiw	r26, 0x01	; 1
 916:	8c 91       	ld	r24, X
 918:	11 97       	sbiw	r26, 0x01	; 1
 91a:	81 83       	std	Z+1, r24	; 0x01
        repr_cmd_buf[i].flags = commands[i].flags;
 91c:	15 96       	adiw	r26, 0x05	; 5
 91e:	8c 91       	ld	r24, X
 920:	82 83       	std	Z+2, r24	; 0x02
} ss_cmd_repr;

uint8_t ss_get_commands(uint8_t *x, uint8_t len)
{
    ss_cmd_repr repr_cmd_buf[MAX_SS_CMDS];
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 922:	4f 5f       	subi	r20, 0xFF	; 255
 924:	cd cf       	rjmp	.-102    	; 0x8c0 <ss_get_commands+0x20>

00000926 <simpleserial_get>:

	return 0;
}

void simpleserial_get(void)
{
 926:	af 92       	push	r10
 928:	bf 92       	push	r11
 92a:	cf 92       	push	r12
 92c:	df 92       	push	r13
 92e:	ef 92       	push	r14
 930:	ff 92       	push	r15
 932:	0f 93       	push	r16
 934:	1f 93       	push	r17
 936:	cf 93       	push	r28
 938:	df 93       	push	r29
 93a:	cd b7       	in	r28, 0x3d	; 61
 93c:	de b7       	in	r29, 0x3e	; 62
 93e:	c1 54       	subi	r28, 0x41	; 65
 940:	d2 40       	sbci	r29, 0x02	; 2
 942:	cd bf       	out	0x3d, r28	; 61
 944:	de bf       	out	0x3e, r29	; 62
	char ascii_buf[2*MAX_SS_LEN];
	uint8_t data_buf[MAX_SS_LEN];
	char c;

	// Find which command we're receiving
	c = getch();
 946:	0e 94 8c 05 	call	0xb18	; 0xb18 <input_ch_0>

	int cmd;
	for(cmd = 0; cmd < num_commands; cmd++)
 94a:	40 91 ce 21 	lds	r20, 0x21CE	; 0x8021ce <num_commands>
 94e:	50 91 cf 21 	lds	r21, 0x21CF	; 0x8021cf <num_commands+0x1>
 952:	2e e0       	ldi	r18, 0x0E	; 14
 954:	31 e2       	ldi	r19, 0x21	; 33
 956:	10 e0       	ldi	r17, 0x00	; 0
 958:	00 e0       	ldi	r16, 0x00	; 0
 95a:	04 17       	cp	r16, r20
 95c:	15 07       	cpc	r17, r21
 95e:	94 f0       	brlt	.+36     	; 0x984 <simpleserial_get+0x5e>
		if(commands[cmd].c == c)
			break;
	}

	// If we didn't find a match, give up right away
	if(cmd == num_commands)
 960:	40 17       	cp	r20, r16
 962:	51 07       	cpc	r21, r17
 964:	b1 f4       	brne	.+44     	; 0x992 <simpleserial_get+0x6c>

	// Acknowledge (if version is 1.1)
#if SS_VER == SS_VER_1_1
	simpleserial_put('z', 1, ret);
#endif
}
 966:	cf 5b       	subi	r28, 0xBF	; 191
 968:	dd 4f       	sbci	r29, 0xFD	; 253
 96a:	cd bf       	out	0x3d, r28	; 61
 96c:	de bf       	out	0x3e, r29	; 62
 96e:	df 91       	pop	r29
 970:	cf 91       	pop	r28
 972:	1f 91       	pop	r17
 974:	0f 91       	pop	r16
 976:	ff 90       	pop	r15
 978:	ef 90       	pop	r14
 97a:	df 90       	pop	r13
 97c:	cf 90       	pop	r12
 97e:	bf 90       	pop	r11
 980:	af 90       	pop	r10
 982:	08 95       	ret
 984:	2a 5f       	subi	r18, 0xFA	; 250
 986:	3f 4f       	sbci	r19, 0xFF	; 255
	c = getch();

	int cmd;
	for(cmd = 0; cmd < num_commands; cmd++)
	{
		if(commands[cmd].c == c)
 988:	f9 01       	movw	r30, r18
 98a:	36 97       	sbiw	r30, 0x06	; 6
 98c:	90 81       	ld	r25, Z
 98e:	98 13       	cpse	r25, r24
 990:	7e c0       	rjmp	.+252    	; 0xa8e <simpleserial_get+0x168>
	// If we didn't find a match, give up right away
	if(cmd == num_commands)
		return;

	// If flag CMD_FLAG_LEN is set, the next byte indicates the sent length
	if ((commands[cmd].flags & CMD_FLAG_LEN) != 0)
 992:	26 e0       	ldi	r18, 0x06	; 6
 994:	20 9f       	mul	r18, r16
 996:	c0 01       	movw	r24, r0
 998:	21 9f       	mul	r18, r17
 99a:	90 0d       	add	r25, r0
 99c:	11 24       	eor	r1, r1
 99e:	9c 01       	movw	r18, r24
 9a0:	22 5f       	subi	r18, 0xF2	; 242
 9a2:	3e 4d       	sbci	r19, 0xDE	; 222
 9a4:	69 01       	movw	r12, r18
 9a6:	d9 01       	movw	r26, r18
 9a8:	15 96       	adiw	r26, 0x05	; 5
 9aa:	8c 91       	ld	r24, X
 9ac:	fe 01       	movw	r30, r28
 9ae:	31 96       	adiw	r30, 0x01	; 1
 9b0:	7f 01       	movw	r14, r30
 9b2:	80 ff       	sbrs	r24, 0
 9b4:	20 c0       	rjmp	.+64     	; 0x9f6 <simpleserial_get+0xd0>
	{
		uint8_t l = 0;
 9b6:	cf 57       	subi	r28, 0x7F	; 127
 9b8:	de 4f       	sbci	r29, 0xFE	; 254
 9ba:	18 82       	st	Y, r1
 9bc:	c1 58       	subi	r28, 0x81	; 129
 9be:	d1 40       	sbci	r29, 0x01	; 1
		char buff[2];
		buff[0] = getch();
 9c0:	0e 94 8c 05 	call	0xb18	; 0xb18 <input_ch_0>
 9c4:	89 83       	std	Y+1, r24	; 0x01
		buff[1] = getch();
 9c6:	0e 94 8c 05 	call	0xb18	; 0xb18 <input_ch_0>
 9ca:	8a 83       	std	Y+2, r24	; 0x02
		if (hex_decode(1, buff, &l))
 9cc:	ae 01       	movw	r20, r28
 9ce:	4f 57       	subi	r20, 0x7F	; 127
 9d0:	5e 4f       	sbci	r21, 0xFE	; 254
 9d2:	b7 01       	movw	r22, r14
 9d4:	81 e0       	ldi	r24, 0x01	; 1
 9d6:	90 e0       	ldi	r25, 0x00	; 0
 9d8:	0e 94 8f 03 	call	0x71e	; 0x71e <hex_decode>
 9dc:	89 2b       	or	r24, r25
 9de:	19 f6       	brne	.-122    	; 0x966 <simpleserial_get+0x40>
			return;
		commands[cmd].len = l;
 9e0:	cf 57       	subi	r28, 0x7F	; 127
 9e2:	de 4f       	sbci	r29, 0xFE	; 254
 9e4:	88 81       	ld	r24, Y
 9e6:	c1 58       	subi	r28, 0x81	; 129
 9e8:	d1 40       	sbci	r29, 0x01	; 1
 9ea:	90 e0       	ldi	r25, 0x00	; 0
 9ec:	d6 01       	movw	r26, r12
 9ee:	11 96       	adiw	r26, 0x01	; 1
 9f0:	8d 93       	st	X+, r24
 9f2:	9c 93       	st	X, r25
 9f4:	12 97       	sbiw	r26, 0x02	; 2

	// Find which command we're receiving
	c = getch();

	int cmd;
	for(cmd = 0; cmd < num_commands; cmd++)
 9f6:	67 01       	movw	r12, r14
			return;
		commands[cmd].len = l;
	}

	// Receive characters until we fill the ASCII buffer
	for(int i = 0; i < 2*commands[cmd].len; i++)
 9f8:	26 e0       	ldi	r18, 0x06	; 6
 9fa:	20 9f       	mul	r18, r16
 9fc:	c0 01       	movw	r24, r0
 9fe:	21 9f       	mul	r18, r17
 a00:	90 0d       	add	r25, r0
 a02:	11 24       	eor	r1, r1
 a04:	fc 01       	movw	r30, r24
 a06:	e1 5f       	subi	r30, 0xF1	; 241
 a08:	fe 4d       	sbci	r31, 0xDE	; 222
 a0a:	5f 01       	movw	r10, r30
 a0c:	f5 01       	movw	r30, r10
 a0e:	80 81       	ld	r24, Z
 a10:	91 81       	ldd	r25, Z+1	; 0x01
 a12:	88 0f       	add	r24, r24
 a14:	99 1f       	adc	r25, r25
 a16:	96 01       	movw	r18, r12
 a18:	2e 19       	sub	r18, r14
 a1a:	3f 09       	sbc	r19, r15
 a1c:	28 17       	cp	r18, r24
 a1e:	39 07       	cpc	r19, r25
 a20:	c8 f1       	brcs	.+114    	; 0xa94 <simpleserial_get+0x16e>

		ascii_buf[i] = c;
	}

	// Assert that last character is \n or \r
	c = getch();
 a22:	0e 94 8c 05 	call	0xb18	; 0xb18 <input_ch_0>
	if(c != '\n' && c != '\r')
 a26:	8a 30       	cpi	r24, 0x0A	; 10
 a28:	19 f0       	breq	.+6      	; 0xa30 <simpleserial_get+0x10a>
 a2a:	8d 30       	cpi	r24, 0x0D	; 13
 a2c:	09 f0       	breq	.+2      	; 0xa30 <simpleserial_get+0x10a>
 a2e:	9b cf       	rjmp	.-202    	; 0x966 <simpleserial_get+0x40>
		return;

	// ASCII buffer is full: convert to bytes
	// Check for illegal characters here
	if(hex_decode(commands[cmd].len, ascii_buf, data_buf))
 a30:	26 e0       	ldi	r18, 0x06	; 6
 a32:	20 9f       	mul	r18, r16
 a34:	c0 01       	movw	r24, r0
 a36:	21 9f       	mul	r18, r17
 a38:	90 0d       	add	r25, r0
 a3a:	11 24       	eor	r1, r1
 a3c:	8c 01       	movw	r16, r24
 a3e:	02 5f       	subi	r16, 0xF2	; 242
 a40:	1e 4d       	sbci	r17, 0xDE	; 222
 a42:	d8 01       	movw	r26, r16
 a44:	11 96       	adiw	r26, 0x01	; 1
 a46:	dc 90       	ld	r13, X
 a48:	11 97       	sbiw	r26, 0x01	; 1
 a4a:	ae 01       	movw	r20, r28
 a4c:	4f 57       	subi	r20, 0x7F	; 127
 a4e:	5e 4f       	sbci	r21, 0xFE	; 254
 a50:	b7 01       	movw	r22, r14
 a52:	8d 2d       	mov	r24, r13
 a54:	12 96       	adiw	r26, 0x02	; 2
 a56:	9c 91       	ld	r25, X
 a58:	0e 94 8f 03 	call	0x71e	; 0x71e <hex_decode>
 a5c:	89 2b       	or	r24, r25
 a5e:	09 f0       	breq	.+2      	; 0xa62 <simpleserial_get+0x13c>
 a60:	82 cf       	rjmp	.-252    	; 0x966 <simpleserial_get+0x40>
		return;

	// Callback
	uint8_t ret[1];
	ret[0] = commands[cmd].fp(data_buf, commands[cmd].len);
 a62:	d8 01       	movw	r26, r16
 a64:	13 96       	adiw	r26, 0x03	; 3
 a66:	ed 91       	ld	r30, X+
 a68:	fc 91       	ld	r31, X
 a6a:	6d 2d       	mov	r22, r13
 a6c:	ce 01       	movw	r24, r28
 a6e:	8f 57       	subi	r24, 0x7F	; 127
 a70:	9e 4f       	sbci	r25, 0xFE	; 254
 a72:	19 95       	eicall
 a74:	cf 5b       	subi	r28, 0xBF	; 191
 a76:	dd 4f       	sbci	r29, 0xFD	; 253
 a78:	88 83       	st	Y, r24
 a7a:	c1 54       	subi	r28, 0x41	; 65
 a7c:	d2 40       	sbci	r29, 0x02	; 2

	// Acknowledge (if version is 1.1)
#if SS_VER == SS_VER_1_1
	simpleserial_put('z', 1, ret);
 a7e:	ae 01       	movw	r20, r28
 a80:	4f 5b       	subi	r20, 0xBF	; 191
 a82:	5d 4f       	sbci	r21, 0xFD	; 253
 a84:	61 e0       	ldi	r22, 0x01	; 1
 a86:	8a e7       	ldi	r24, 0x7A	; 122
 a88:	0e 94 0d 04 	call	0x81a	; 0x81a <simpleserial_put>
 a8c:	6c cf       	rjmp	.-296    	; 0x966 <simpleserial_get+0x40>

	// Find which command we're receiving
	c = getch();

	int cmd;
	for(cmd = 0; cmd < num_commands; cmd++)
 a8e:	0f 5f       	subi	r16, 0xFF	; 255
 a90:	1f 4f       	sbci	r17, 0xFF	; 255
 a92:	63 cf       	rjmp	.-314    	; 0x95a <simpleserial_get+0x34>
	}

	// Receive characters until we fill the ASCII buffer
	for(int i = 0; i < 2*commands[cmd].len; i++)
	{
		c = getch();
 a94:	0e 94 8c 05 	call	0xb18	; 0xb18 <input_ch_0>

		// Check for early \n
		if(c == '\n' || c == '\r')
 a98:	8a 30       	cpi	r24, 0x0A	; 10
 a9a:	09 f4       	brne	.+2      	; 0xa9e <simpleserial_get+0x178>
 a9c:	64 cf       	rjmp	.-312    	; 0x966 <simpleserial_get+0x40>
 a9e:	8d 30       	cpi	r24, 0x0D	; 13
 aa0:	09 f4       	brne	.+2      	; 0xaa4 <simpleserial_get+0x17e>
 aa2:	61 cf       	rjmp	.-318    	; 0x966 <simpleserial_get+0x40>
			return;

		ascii_buf[i] = c;
 aa4:	d6 01       	movw	r26, r12
 aa6:	8d 93       	st	X+, r24
 aa8:	6d 01       	movw	r12, r26
 aaa:	b0 cf       	rjmp	.-160    	; 0xa0c <simpleserial_get+0xe6>

00000aac <init_uart0>:
   )
   {
/* This PORT setting is only valid to USARTC0 if other USARTs is used a
	 * different PORT and/or pins is used. */
	/* PIN3 (TXD0) as output. */
	PORTC.DIRSET = PIN3_bm;
 aac:	e0 e4       	ldi	r30, 0x40	; 64
 aae:	f6 e0       	ldi	r31, 0x06	; 6
 ab0:	88 e0       	ldi	r24, 0x08	; 8
 ab2:	81 83       	std	Z+1, r24	; 0x01

	/* PC2 (RXD0) as input. */
	PORTC.DIRCLR = PIN2_bm;
 ab4:	84 e0       	ldi	r24, 0x04	; 4
 ab6:	82 83       	std	Z+2, r24	; 0x02

	/* USARTC0, 8 Data bits, No Parity, 1 Stop bit. */
	USART_Format_Set(&USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
 ab8:	e0 ea       	ldi	r30, 0xA0	; 160
 aba:	f8 e0       	ldi	r31, 0x08	; 8
 abc:	83 e0       	ldi	r24, 0x03	; 3
 abe:	85 83       	std	Z+5, r24	; 0x05
	 *                 = 12
	 */
	#if SS_VER==SS_VER_2_0
	USART_Baudrate_Set(&USART, 1, 0);
	#else
	USART_Baudrate_Set(&USART, 11, 0);
 ac0:	8b e0       	ldi	r24, 0x0B	; 11
 ac2:	86 83       	std	Z+6, r24	; 0x06
 ac4:	17 82       	std	Z+7, r1	; 0x07
	#endif

	/* Enable both RX and TX. */
	USART_Rx_Enable(&USART);
 ac6:	84 81       	ldd	r24, Z+4	; 0x04
 ac8:	80 61       	ori	r24, 0x10	; 16
 aca:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(&USART);
 acc:	84 81       	ldd	r24, Z+4	; 0x04
 ace:	88 60       	ori	r24, 0x08	; 8
 ad0:	84 83       	std	Z+4, r24	; 0x04
   }
 ad2:	08 95       	ret

00000ad4 <input_ch_w_timeout_0>:
unsigned char									input_ch_w_timeout_0
	(
   char *					 	data,
   volatile unsigned int				timeout
   )
   {
 ad4:	cf 93       	push	r28
 ad6:	df 93       	push	r29
 ad8:	1f 92       	push	r1
 ada:	1f 92       	push	r1
 adc:	cd b7       	in	r28, 0x3d	; 61
 ade:	de b7       	in	r29, 0x3e	; 62
 ae0:	69 83       	std	Y+1, r22	; 0x01
 ae2:	7a 83       	std	Y+2, r23	; 0x02
   unsigned int				timeout_counter = 0;
 ae4:	30 e0       	ldi	r19, 0x00	; 0
 ae6:	20 e0       	ldi	r18, 0x00	; 0

   
   //check if a byte has been recieved or if the timeout has been excedded
   while (timeout_counter != timeout)
 ae8:	49 81       	ldd	r20, Y+1	; 0x01
 aea:	5a 81       	ldd	r21, Y+2	; 0x02
 aec:	42 17       	cp	r20, r18
 aee:	53 07       	cpc	r21, r19
 af0:	11 f4       	brne	.+4      	; 0xaf6 <input_ch_w_timeout_0+0x22>
			return BYTE_REC;
			}
		timeout_counter++;
		}
		
	return TIMEOUT;
 af2:	80 e0       	ldi	r24, 0x00	; 0
 af4:	09 c0       	rjmp	.+18     	; 0xb08 <input_ch_w_timeout_0+0x34>

   
   //check if a byte has been recieved or if the timeout has been excedded
   while (timeout_counter != timeout)
		{	
		if (USART_IsRXComplete(&USART))
 af6:	40 91 a1 08 	lds	r20, 0x08A1	; 0x8008a1 <__TEXT_REGION_LENGTH__+0x7de8a1>
 afa:	47 ff       	sbrs	r20, 7
 afc:	0a c0       	rjmp	.+20     	; 0xb12 <input_ch_w_timeout_0+0x3e>
			{
			*data = USART_GetChar(&USART);
 afe:	20 91 a0 08 	lds	r18, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7de8a0>
 b02:	fc 01       	movw	r30, r24
 b04:	20 83       	st	Z, r18
			return BYTE_REC;
 b06:	81 e0       	ldi	r24, 0x01	; 1
			}
		timeout_counter++;
		}
		
	return TIMEOUT;
	}
 b08:	0f 90       	pop	r0
 b0a:	0f 90       	pop	r0
 b0c:	df 91       	pop	r29
 b0e:	cf 91       	pop	r28
 b10:	08 95       	ret
		if (USART_IsRXComplete(&USART))
			{
			*data = USART_GetChar(&USART);
			return BYTE_REC;
			}
		timeout_counter++;
 b12:	2f 5f       	subi	r18, 0xFF	; 255
 b14:	3f 4f       	sbci	r19, 0xFF	; 255
 b16:	e8 cf       	rjmp	.-48     	; 0xae8 <input_ch_w_timeout_0+0x14>

00000b18 <input_ch_0>:
	(
   void
   )
   {
   //check if a byte has been recieved or if the timeout has been excedded
   while (!USART_IsRXComplete(&USART))
 b18:	80 91 a1 08 	lds	r24, 0x08A1	; 0x8008a1 <__TEXT_REGION_LENGTH__+0x7de8a1>
 b1c:	87 ff       	sbrs	r24, 7
 b1e:	fc cf       	rjmp	.-8      	; 0xb18 <input_ch_0>
		{
		continue;		
		}		
	return USART_GetChar(&USART);;
 b20:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7de8a0>
	}
 b24:	08 95       	ret

00000b26 <output_ch_0>:
void												output_ch_0
	(
	char							data
	)
	{
	while(!USART_IsTXDataRegisterEmpty(&USART));
 b26:	90 91 a1 08 	lds	r25, 0x08A1	; 0x8008a1 <__TEXT_REGION_LENGTH__+0x7de8a1>
 b2a:	95 ff       	sbrs	r25, 5
 b2c:	fc cf       	rjmp	.-8      	; 0xb26 <output_ch_0>
	USART_PutChar(&USART, data);
 b2e:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7de8a0>
	return;
 b32:	08 95       	ret

00000b34 <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel          Data register empty interrupt level.
 */
void USART_InterruptDriver_Initialize(USART_data_t * usart_data,
                                      USART_t * usart,
                                      USART_DREINTLVL_t dreIntLevel)
{
 b34:	fc 01       	movw	r30, r24
	usart_data->usart = usart;
 b36:	60 83       	st	Z, r22
 b38:	71 83       	std	Z+1, r23	; 0x01
	usart_data->dreIntLevel = dreIntLevel;
 b3a:	42 83       	std	Z+2, r20	; 0x02

	usart_data->buffer.RX_Tail = 0;
 b3c:	14 86       	std	Z+12, r1	; 0x0c
	usart_data->buffer.RX_Head = 0;
 b3e:	13 86       	std	Z+11, r1	; 0x0b
	usart_data->buffer.TX_Tail = 0;
 b40:	16 86       	std	Z+14, r1	; 0x0e
	usart_data->buffer.TX_Head = 0;
 b42:	15 86       	std	Z+13, r1	; 0x0d
}
 b44:	08 95       	ret

00000b46 <USART_InterruptDriver_DreInterruptLevel_Set>:
 *  \param dreIntLevel        Interrupt level of the DRE interrupt.
 */
void USART_InterruptDriver_DreInterruptLevel_Set(USART_data_t * usart_data,
                                                 USART_DREINTLVL_t dreIntLevel)
{
	usart_data->dreIntLevel = dreIntLevel;
 b46:	fc 01       	movw	r30, r24
 b48:	62 83       	std	Z+2, r22	; 0x02
}
 b4a:	08 95       	ret

00000b4c <USART_TXBuffer_FreeSpace>:
 *
 *  \retval true      There is data in the receive buffer.
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
 b4c:	fc 01       	movw	r30, r24
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
 b4e:	95 85       	ldd	r25, Z+13	; 0x0d
	uint8_t tempTail = usart_data->buffer.TX_Tail;
 b50:	26 85       	ldd	r18, Z+14	; 0x0e
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
 b52:	9f 5f       	subi	r25, 0xFF	; 255
 b54:	93 70       	andi	r25, 0x03	; 3
	uint8_t tempTail = usart_data->buffer.TX_Tail;

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
 b56:	81 e0       	ldi	r24, 0x01	; 1
 b58:	92 13       	cpse	r25, r18
 b5a:	01 c0       	rjmp	.+2      	; 0xb5e <USART_TXBuffer_FreeSpace+0x12>
 b5c:	80 e0       	ldi	r24, 0x00	; 0
}
 b5e:	08 95       	ret

00000b60 <USART_TXBuffer_PutByte>:
 *
 *  \param usart_data The USART_data_t struct instance.
 *  \param data       The data to send.
 */
bool USART_TXBuffer_PutByte(USART_data_t * usart_data, uint8_t data)
{
 b60:	1f 93       	push	r17
 b62:	cf 93       	push	r28
 b64:	df 93       	push	r29
 b66:	ec 01       	movw	r28, r24
 b68:	16 2f       	mov	r17, r22
	uint8_t tempTX_Head;
	bool TXBuffer_FreeSpace;
	USART_Buffer_t * TXbufPtr;

	TXbufPtr = &usart_data->buffer;
	TXBuffer_FreeSpace = USART_TXBuffer_FreeSpace(usart_data);
 b6a:	0e 94 a6 05 	call	0xb4c	; 0xb4c <USART_TXBuffer_FreeSpace>


	if(TXBuffer_FreeSpace)
 b6e:	88 23       	and	r24, r24
 b70:	79 f0       	breq	.+30     	; 0xb90 <USART_TXBuffer_PutByte+0x30>
	{
	  	tempTX_Head = TXbufPtr->TX_Head;
 b72:	9d 85       	ldd	r25, Y+13	; 0x0d
	  	TXbufPtr->TX[tempTX_Head]= data;
 b74:	fe 01       	movw	r30, r28
 b76:	e9 0f       	add	r30, r25
 b78:	f1 1d       	adc	r31, r1
 b7a:	17 83       	std	Z+7, r17	; 0x07
		/* Advance buffer head. */
		TXbufPtr->TX_Head = (tempTX_Head + 1) & USART_TX_BUFFER_MASK;
 b7c:	9f 5f       	subi	r25, 0xFF	; 255
 b7e:	93 70       	andi	r25, 0x03	; 3
 b80:	9d 87       	std	Y+13, r25	; 0x0d

		/* Enable DRE interrupt. */
		tempCTRLA = usart_data->usart->CTRLA;
 b82:	e8 81       	ld	r30, Y
 b84:	f9 81       	ldd	r31, Y+1	; 0x01
 b86:	93 81       	ldd	r25, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | usart_data->dreIntLevel;
 b88:	9c 7f       	andi	r25, 0xFC	; 252
 b8a:	2a 81       	ldd	r18, Y+2	; 0x02
 b8c:	92 2b       	or	r25, r18
		usart_data->usart->CTRLA = tempCTRLA;
 b8e:	93 83       	std	Z+3, r25	; 0x03
	}
	return TXBuffer_FreeSpace;
}
 b90:	df 91       	pop	r29
 b92:	cf 91       	pop	r28
 b94:	1f 91       	pop	r17
 b96:	08 95       	ret

00000b98 <USART_RXBufferData_Available>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
 b98:	fc 01       	movw	r30, r24
 b9a:	23 85       	ldd	r18, Z+11	; 0x0b
	uint8_t tempTail = usart_data->buffer.RX_Tail;
 b9c:	94 85       	ldd	r25, Z+12	; 0x0c

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
 b9e:	81 e0       	ldi	r24, 0x01	; 1
 ba0:	29 13       	cpse	r18, r25
 ba2:	01 c0       	rjmp	.+2      	; 0xba6 <USART_RXBufferData_Available+0xe>
 ba4:	80 e0       	ldi	r24, 0x00	; 0
}
 ba6:	08 95       	ret

00000ba8 <USART_RXBuffer_GetByte>:
 *  \param usart_data       The USART_data_t struct instance.
 *
 *  \return         Received data.
 */
uint8_t USART_RXBuffer_GetByte(USART_data_t * usart_data)
{
 ba8:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
 baa:	a4 85       	ldd	r26, Z+12	; 0x0c
 bac:	a8 0f       	add	r26, r24
 bae:	b9 2f       	mov	r27, r25
 bb0:	b1 1d       	adc	r27, r1
 bb2:	13 96       	adiw	r26, 0x03	; 3
 bb4:	8c 91       	ld	r24, X

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
 bb6:	94 85       	ldd	r25, Z+12	; 0x0c
 bb8:	9f 5f       	subi	r25, 0xFF	; 255
 bba:	93 70       	andi	r25, 0x03	; 3
 bbc:	94 87       	std	Z+12, r25	; 0x0c

	return ans;
}
 bbe:	08 95       	ret

00000bc0 <USART_RXComplete>:
 *  Stores received data in RX software buffer.
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
bool USART_RXComplete(USART_data_t * usart_data)
{
 bc0:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
 bc2:	83 85       	ldd	r24, Z+11	; 0x0b
 bc4:	8f 5f       	subi	r24, 0xFF	; 255
 bc6:	83 70       	andi	r24, 0x03	; 3

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
 bc8:	24 85       	ldd	r18, Z+12	; 0x0c
	uint8_t data = usart_data->usart->DATA;
 bca:	a0 81       	ld	r26, Z
 bcc:	b1 81       	ldd	r27, Z+1	; 0x01
 bce:	9c 91       	ld	r25, X

	if (tempRX_Head == tempRX_Tail) {
 bd0:	82 17       	cp	r24, r18
 bd2:	49 f0       	breq	.+18     	; 0xbe6 <USART_RXComplete+0x26>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
 bd4:	a3 85       	ldd	r26, Z+11	; 0x0b
 bd6:	ae 0f       	add	r26, r30
 bd8:	bf 2f       	mov	r27, r31
 bda:	b1 1d       	adc	r27, r1
 bdc:	13 96       	adiw	r26, 0x03	; 3
 bde:	9c 93       	st	X, r25
		usart_data->buffer.RX_Head = tempRX_Head;
 be0:	83 87       	std	Z+11, r24	; 0x0b
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
 be2:	81 e0       	ldi	r24, 0x01	; 1
 be4:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
 be6:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
 be8:	08 95       	ret

00000bea <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
 bea:	cf 93       	push	r28
 bec:	df 93       	push	r29
 bee:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
 bf0:	86 85       	ldd	r24, Z+14	; 0x0e
	if (bufPtr->TX_Head == tempTX_Tail){
 bf2:	95 85       	ldd	r25, Z+13	; 0x0d
 bf4:	a0 81       	ld	r26, Z
 bf6:	b1 81       	ldd	r27, Z+1	; 0x01
 bf8:	98 13       	cpse	r25, r24
 bfa:	09 c0       	rjmp	.+18     	; 0xc0e <USART_DataRegEmpty+0x24>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
 bfc:	13 96       	adiw	r26, 0x03	; 3
 bfe:	8c 91       	ld	r24, X
 c00:	13 97       	sbiw	r26, 0x03	; 3
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
 c02:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
 c04:	13 96       	adiw	r26, 0x03	; 3
 c06:	8c 93       	st	X, r24
		usart_data->usart->DATA = data;

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
	}
}
 c08:	df 91       	pop	r29
 c0a:	cf 91       	pop	r28
 c0c:	08 95       	ret
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
		usart_data->usart->CTRLA = tempCTRLA;

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
 c0e:	c6 85       	ldd	r28, Z+14	; 0x0e
 c10:	ce 0f       	add	r28, r30
 c12:	df 2f       	mov	r29, r31
 c14:	d1 1d       	adc	r29, r1
 c16:	8f 81       	ldd	r24, Y+7	; 0x07
		usart_data->usart->DATA = data;
 c18:	8c 93       	st	X, r24

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
 c1a:	86 85       	ldd	r24, Z+14	; 0x0e
 c1c:	8f 5f       	subi	r24, 0xFF	; 255
 c1e:	83 70       	andi	r24, 0x03	; 3
 c20:	86 87       	std	Z+14, r24	; 0x0e
	}
}
 c22:	f2 cf       	rjmp	.-28     	; 0xc08 <USART_DataRegEmpty+0x1e>

00000c24 <USART_NineBits_PutChar>:
 *
 *  \param usart      The USART module.
 *  \param data       The data to send.
 */
void USART_NineBits_PutChar(USART_t * usart, uint16_t data)
{
 c24:	fc 01       	movw	r30, r24
	if(data & 0x0100) {
		usart->CTRLB |= USART_TXB8_bm;
 c26:	84 81       	ldd	r24, Z+4	; 0x04
 *  \param usart      The USART module.
 *  \param data       The data to send.
 */
void USART_NineBits_PutChar(USART_t * usart, uint16_t data)
{
	if(data & 0x0100) {
 c28:	70 ff       	sbrs	r23, 0
 c2a:	04 c0       	rjmp	.+8      	; 0xc34 <USART_NineBits_PutChar+0x10>
		usart->CTRLB |= USART_TXB8_bm;
 c2c:	81 60       	ori	r24, 0x01	; 1
	}else {
		usart->CTRLB &= ~USART_TXB8_bm;
 c2e:	84 83       	std	Z+4, r24	; 0x04
	}

	usart->DATA = (data & 0x00FF);
 c30:	60 83       	st	Z, r22
}
 c32:	08 95       	ret
void USART_NineBits_PutChar(USART_t * usart, uint16_t data)
{
	if(data & 0x0100) {
		usart->CTRLB |= USART_TXB8_bm;
	}else {
		usart->CTRLB &= ~USART_TXB8_bm;
 c34:	8e 7f       	andi	r24, 0xFE	; 254
 c36:	fb cf       	rjmp	.-10     	; 0xc2e <USART_NineBits_PutChar+0xa>

00000c38 <USART_NineBits_GetChar>:
 *  \param usart      The USART module.
 *
 *  \retval           Received data.
 */
uint16_t USART_NineBits_GetChar(USART_t * usart)
{
 c38:	fc 01       	movw	r30, r24
	if(usart->CTRLB & USART_RXB8_bm) {
 c3a:	84 81       	ldd	r24, Z+4	; 0x04
 c3c:	80 ff       	sbrs	r24, 0
 c3e:	04 c0       	rjmp	.+8      	; 0xc48 <USART_NineBits_GetChar+0x10>
		return(0x0100 | usart->DATA);
 c40:	80 81       	ld	r24, Z
 c42:	90 e0       	ldi	r25, 0x00	; 0
 c44:	91 60       	ori	r25, 0x01	; 1
 c46:	08 95       	ret
	}else {
		return(usart->DATA);
 c48:	80 81       	ld	r24, Z
 c4a:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 c4c:	08 95       	ret

00000c4e <platform_init>:
#include "hal.h"
#include "xmega_hal.h"

void platform_init(void)
{  
    OSC.XOSCCTRL = 0x00;
 c4e:	10 92 52 00 	sts	0x0052, r1	; 0x800052 <__TEXT_REGION_LENGTH__+0x7de052>
    OSC.PLLCTRL = 0x00;
 c52:	10 92 55 00 	sts	0x0055, r1	; 0x800055 <__TEXT_REGION_LENGTH__+0x7de055>
    OSC.CTRL |= OSC_XOSCEN_bm;
 c56:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <__TEXT_REGION_LENGTH__+0x7de050>
 c5a:	88 60       	ori	r24, 0x08	; 8
 c5c:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x7de050>
    
    //wait for clock
    while((OSC.STATUS & OSC_XOSCRDY_bm) == 0);
 c60:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7de051>
 c64:	83 ff       	sbrs	r24, 3
 c66:	fc cf       	rjmp	.-8      	; 0xc60 <platform_init+0x12>
    
    //Switch clock source
    CCP = CCP_IOREG_gc;
 c68:	88 ed       	ldi	r24, 0xD8	; 216
 c6a:	84 bf       	out	0x34, r24	; 52
    CLK.CTRL = CLK_SCLKSEL_XOSC_gc;    
 c6c:	83 e0       	ldi	r24, 0x03	; 3
 c6e:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x7de040>
    
    //Turn off other sources besides external    
    OSC.CTRL = OSC_XOSCEN_bm;
 c72:	88 e0       	ldi	r24, 0x08	; 8
 c74:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x7de050>
    
 #if PLATFORM == CW303
    PORTA.DIRSET = PIN5_bm | PIN6_bm;
    PORTA.OUTSET = PIN5_bm | PIN6_bm;
 #endif
}
 c78:	08 95       	ret

00000c7a <main>:
	return 0x00;
}

int main(void)
{
    platform_init();
 c7a:	0e 94 27 06 	call	0xc4e	; 0xc4e <platform_init>
    init_uart();
 c7e:	0e 94 56 05 	call	0xaac	; 0xaac <init_uart0>
    trigger_setup();
 c82:	81 e0       	ldi	r24, 0x01	; 1
 c84:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x7de601>
    
    
	simpleserial_init();
 c88:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <simpleserial_init>
    simpleserial_addcmd('k', 16,  get_key);
 c8c:	43 e1       	ldi	r20, 0x13	; 19
 c8e:	51 e0       	ldi	r21, 0x01	; 1
 c90:	60 e1       	ldi	r22, 0x10	; 16
 c92:	70 e0       	ldi	r23, 0x00	; 0
 c94:	8b e6       	ldi	r24, 0x6B	; 107
 c96:	0e 94 f5 03 	call	0x7ea	; 0x7ea <simpleserial_addcmd>
    simpleserial_addcmd('p', 16,  get_pt);
 c9a:	4e e4       	ldi	r20, 0x4E	; 78
 c9c:	53 e0       	ldi	r21, 0x03	; 3
 c9e:	60 e1       	ldi	r22, 0x10	; 16
 ca0:	70 e0       	ldi	r23, 0x00	; 0
 ca2:	80 e7       	ldi	r24, 0x70	; 112
 ca4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <simpleserial_addcmd>
    simpleserial_addcmd('x',  0,   reset);
 ca8:	45 e1       	ldi	r20, 0x15	; 21
 caa:	51 e0       	ldi	r21, 0x01	; 1
 cac:	70 e0       	ldi	r23, 0x00	; 0
 cae:	60 e0       	ldi	r22, 0x00	; 0
 cb0:	88 e7       	ldi	r24, 0x78	; 120
 cb2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <simpleserial_addcmd>
    while(1)
        simpleserial_get();
 cb6:	0e 94 93 04 	call	0x926	; 0x926 <simpleserial_get>
 cba:	fd cf       	rjmp	.-6      	; 0xcb6 <main+0x3c>

00000cbc <_exit>:
 cbc:	f8 94       	cli

00000cbe <__stop_program>:
 cbe:	ff cf       	rjmp	.-2      	; 0xcbe <__stop_program>
