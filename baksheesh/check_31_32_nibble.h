int check_37(uint8_t *diff){
    uint64_t diff1 = 0x0000000000000000UL;
    uint64_t diff2 = 0x0000000000000000UL;
    for(int i=0; i<16; i++){
        diff1 = (diff1 << 4) | diff[15 - i];
        diff2 = (diff2 << 4) | diff[16 + 15 - i];
    }
    if ((((diff2|0x0808080804040404) == 0x0808080804040404) && ((diff1|0x0202020201010101) == 0x0202020201010101)) ||
        (((diff2|0x0101010108080808) == 0x0101010108080808) && ((diff1|0x0404040402020202) == 0x0404040402020202)) ||
        (((diff2|0x0202020201010101) == 0x0202020201010101) && ((diff1|0x0808080804040404) == 0x0808080804040404)) ||
        (((diff2|0x0404040402020202) == 0x0404040402020202) && ((diff1|0x0101010108080808) == 0x0101010108080808)) ||


        (((diff2|0x8080808040404040) == 0x8080808040404040) && ((diff1|0x2020202010101010) == 0x2020202010101010)) ||
        (((diff2|0x1010101080808080) == 0x1010101080808080) && ((diff1|0x4040404020202020) == 0x4040404020202020)) ||
        (((diff2|0x2020202010101010) == 0x2020202010101010) && ((diff1|0x8080808040404040) == 0x8080808040404040)) ||
        (((diff2|0x4040404020202020) == 0x4040404020202020) && ((diff1|0x1010101080808080) == 0x1010101080808080))){
            return 1;
    }
    return 0;
}
int check_36(uint8_t *diff){
    uint64_t diff1 = 0x0000000000000000UL;
    uint64_t diff2 = 0x0000000000000000UL;
    for(int i=0; i<16; i++){
        diff1 = (diff1 << 4) | diff[15 - i];
        diff2 = (diff2 << 4) | diff[16 + 15 - i];
    }
    if ((((diff2|0x0000000800000004 ) == 0x0000000800000004 ) && ((diff1|0x0000000200000001) == 0x0000000200000001)) ||
        (((diff2|0x0000000100000008 ) == 0x0000000100000008 ) && ((diff1|0x0000000400000002) == 0x0000000400000002)) ||
        (((diff2|0x0000000200000001 ) == 0x0000000200000001 ) && ((diff1|0x0000000800000004) == 0x0000000800000004)) ||
        (((diff2|0x0000000400000002 ) == 0x0000000400000002 ) && ((diff1|0x0000000100000008) == 0x0000000100000008)) ||

        (((diff2|0x0000008000000040 ) == 0x0000008000000040 ) && ((diff1|0x0000002000000010) == 0x0000002000000010)) ||
        (((diff2|0x0000001000000080 ) == 0x0000001000000080 ) && ((diff1|0x0000004000000020) == 0x0000004000000020)) ||
        (((diff2|0x0000002000000010 ) == 0x0000002000000010 ) && ((diff1|0x0000008000000040) == 0x0000008000000040)) ||
        (((diff2|0x0000004000000020 ) == 0x0000004000000020 ) && ((diff1|0x0000001000000080) == 0x0000001000000080)) ||

        (((diff2|0x0000080000000400 ) == 0x0000080000000400 ) && ((diff1|0x0000020000000100) == 0x0000020000000100)) ||
        (((diff2|0x0000010000000800 ) == 0x0000010000000800 ) && ((diff1|0x0000040000000200) == 0x0000040000000200)) ||
        (((diff2|0x0000020000000100 ) == 0x0000020000000100 ) && ((diff1|0x0000080000000400) == 0x0000080000000400)) ||
        (((diff2|0x0000040000000200 ) == 0x0000040000000200 ) && ((diff1|0x0000010000000800) == 0x0000010000000800)) ||

        (((diff2|0x0000800000004000 ) == 0x0000800000004000 ) && ((diff1|0x0000200000001000) == 0x0000200000001000)) ||
        (((diff2|0x0000100000008000 ) == 0x0000100000008000 ) && ((diff1|0x0000400000002000) == 0x0000400000002000)) ||
        (((diff2|0x0000200000001000 ) == 0x0000200000001000 ) && ((diff1|0x0000800000004000) == 0x0000800000004000)) ||
        (((diff2|0x0000400000002000 ) == 0x0000400000002000 ) && ((diff1|0x0000100000008000) == 0x0000100000008000)) ||


        /* for the MSB 64-bit at the input of fourth last round */
        (((diff2|0x0008000000040000 ) == 0x0008000000040000 ) && ((diff1|0x0002000000010000) == 0x0002000000010000)) ||
        (((diff2|0x0001000000080000 ) == 0x0001000000080000 ) && ((diff1|0x0004000000020000) == 0x0004000000020000)) ||
        (((diff2|0x0002000000010000 ) == 0x0002000000010000 ) && ((diff1|0x0008000000040000) == 0x0008000000040000)) ||
        (((diff2|0x0004000000020000 ) == 0x0004000000020000 ) && ((diff1|0x0001000000080000) == 0x0001000000080000)) ||

        (((diff2|0x0080000000400000 ) == 0x0080000000400000 ) && ((diff1|0x0020000000100000) == 0x0020000000100000)) ||
        (((diff2|0x0010000000800000 ) == 0x0010000000800000 ) && ((diff1|0x0040000000200000) == 0x0040000000200000)) ||
        (((diff2|0x0020000000100000 ) == 0x0020000000100000 ) && ((diff1|0x0080000000400000) == 0x0080000000400000)) ||
        (((diff2|0x0040000000200000 ) == 0x0040000000200000 ) && ((diff1|0x0010000000800000) == 0x0010000000800000)) ||

        (((diff2|0x0800000004000000 ) == 0x0800000004000000 ) && ((diff1|0x0200000001000000) == 0x0200000001000000)) ||
        (((diff2|0x0100000008000000 ) == 0x0100000008000000 ) && ((diff1|0x0400000002000000) == 0x0400000002000000)) ||
        (((diff2|0x0200000001000000 ) == 0x0200000001000000 ) && ((diff1|0x0800000004000000) == 0x0800000004000000)) ||
        (((diff2|0x0400000002000000 ) == 0x0400000002000000 ) && ((diff1|0x0100000008000000) == 0x0100000008000000)) ||

        (((diff2|0x8000000040000000 ) == 0x8000000040000000 ) && ((diff1|0x2000000010000000) == 0x2000000010000000)) ||
        (((diff2|0x1000000080000000 ) == 0x1000000080000000 ) && ((diff1|0x4000000020000000) == 0x4000000020000000)) ||
        (((diff2|0x2000000010000000 ) == 0x2000000010000000 ) && ((diff1|0x8000000040000000) == 0x8000000040000000)) ||
        (((diff2|0x4000000020000000 ) == 0x4000000020000000 ) && ((diff1|0x1000000080000000) == 0x1000000080000000))){
        
            return 1;
    }
    return 0;
}
